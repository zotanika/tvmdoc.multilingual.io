# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, Apache Software Foundation
# This file is distributed under the same license as the tvm package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: tvm 0.8.dev0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-04 20:34+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../../tutorials/autotvm/tune_simple_template.rst:13
msgid ""
"Click :ref:`here "
"<sphx_glr_download_tutorials_autotvm_tune_simple_template.py>` to "
"download the full example code"
msgstr ""

#: ../../tutorials/autotvm/tune_simple_template.rst:22
msgid "Writing Tunable Templates and Using the Auto-tuner"
msgstr ""

#: ../../tutorials/autotvm/tune_simple_template.rst:23
msgid "**Author**: `Lianmin Zheng <https://github.com/merrymercy>`_"
msgstr ""

#: ../../tutorials/autotvm/tune_simple_template.rst:25
msgid "This is an introduction tutorial to the auto-tuning module in TVM."
msgstr ""

#: ../../tutorials/autotvm/tune_simple_template.rst:27
msgid ""
"There are two steps in auto-tuning. The first step is defining a search "
"space. The second step is running a search algorithm to explore through "
"this space. In this tutorial, you can learn how to perform these two "
"steps in TVM. The whole workflow is illustrated by a matrix "
"multiplication example."
msgstr ""

#: ../../tutorials/autotvm/tune_simple_template.rst:33
msgid ""
"Note that this tutorial will not run on Windows or recent versions of "
"macOS. To get it to run, you will need to wrap the body of this tutorial "
"in a :code:`if __name__ == \"__main__\":` block."
msgstr ""

#: ../../tutorials/autotvm/tune_simple_template.rst:40
msgid "Install dependencies"
msgstr ""

#: ../../tutorials/autotvm/tune_simple_template.rst:41
msgid ""
"To use autotvm package in TVM, we need to install some extra "
"dependencies. This step (installing xgboost) can be skipped as it doesn't"
" need XGBoost (change \"3\" to \"2\" if you use python2):"
msgstr ""

#: ../../tutorials/autotvm/tune_simple_template.rst:49
msgid ""
"To make TVM run faster in tuning, it is recommended to use cython as FFI "
"of TVM. In the root directory of TVM, execute (change \"3\" to \"2\" if "
"you use python2):"
msgstr ""

#: ../../tutorials/autotvm/tune_simple_template.rst:58
msgid "Now return to python code. Import packages."
msgstr ""

#: ../../tutorials/autotvm/tune_simple_template.rst:85
msgid "Step 1:  Define the search space"
msgstr ""

#: ../../tutorials/autotvm/tune_simple_template.rst:86
msgid ""
"In this section, we will rewrite a deterministic TVM schedule code to a "
"tunable schedule template. You can regard the process of search space "
"definition as the parameterization of our existing schedule code."
msgstr ""

#: ../../tutorials/autotvm/tune_simple_template.rst:90
msgid ""
"To begin with, here is how we implement a blocked matrix multiplication "
"in TVM."
msgstr ""

#: ../../tutorials/autotvm/tune_simple_template.rst:128
msgid "Parametrize the schedule"
msgstr ""

#: ../../tutorials/autotvm/tune_simple_template.rst:129
msgid ""
"In the previous schedule code, we use a constant \"8\" as tiling factor. "
"However, it might not be the best one because the best tiling factor "
"depends on real hardware environment and input shape."
msgstr ""

#: ../../tutorials/autotvm/tune_simple_template.rst:133
msgid ""
"If you want the schedule code to be portable across a wider range of "
"input shapes and target hardware, it is better to define a set of "
"candidate values and pick the best one according to the measurement "
"results on target hardware."
msgstr ""

#: ../../tutorials/autotvm/tune_simple_template.rst:137
msgid ""
"In autotvm, we can define a tunable parameter, or a \"knob\" for such "
"kind of value."
msgstr ""

#: ../../tutorials/autotvm/tune_simple_template.rst:183
msgid ""
"Here we make four modifications to the previous schedule code and get a "
"tunable \"template\". We can explain the modifications one by one."
msgstr ""

#: ../../tutorials/autotvm/tune_simple_template.rst:186
msgid "Use a decorator to mark this function as a simple template."
msgstr ""

#: ../../tutorials/autotvm/tune_simple_template.rst:187
msgid ""
"Get a config object: You can regard this :code:`cfg` as an argument of "
"this function but we obtain it in a different way. With this argument, "
"this function is no longer a deterministic schedule code. Instead, we can"
" pass different configurations to this function and get different "
"schedules, so this function is a \"template\"."
msgstr ""

#: ../../tutorials/autotvm/tune_simple_template.rst:193
msgid ""
"To make the template function more compact, we do two things in a single "
"function. (1) define a search space and (2) schedule according to an "
"entity in this space. To achieve this, we make :code:`cfg` be either a "
":any:`ConfigSpace` or a :any:`ConfigEntity` object."
msgstr ""

#: ../../tutorials/autotvm/tune_simple_template.rst:198
msgid ""
"When it is a :any:`ConfigSpace`, it will collect all tunable knobs in "
"this function and build the search space. When it is a "
":any:`ConfigEntity`, it will ignore all space definition API (namely, "
":code:`cfg.define_XXXXX(...)`).   Instead, it stores deterministic values"
" for all tunable knobs, and we schedule according to these values."
msgstr ""

#: ../../tutorials/autotvm/tune_simple_template.rst:204
msgid ""
"During auto-tuning, we will first call this template with a "
":any:`ConfigSpace` object to build the search space. Then we call this "
"template with different :any:`ConfigEntity` in the built space to get "
"different schedules. Finally we will measure the code generated by "
"different schedules and pick the best one."
msgstr ""

#: ../../tutorials/autotvm/tune_simple_template.rst:209
msgid ""
"Define two tunable knobs. The first one is :code:`tile_y` with 5 possible"
" values. The second one is :code:`tile_x` with a same list of possible "
"values. These two knobs are independent, so they span a search space with"
" size = 5x5 = 25"
msgstr ""

#: ../../tutorials/autotvm/tune_simple_template.rst:213
msgid "Schedule according to the deterministic values in :code:`cfg`"
msgstr ""

#: ../../tutorials/autotvm/tune_simple_template.rst:219
msgid "Use better space definition API"
msgstr ""

#: ../../tutorials/autotvm/tune_simple_template.rst:220
msgid ""
"In the previous template, we manually list all possible values for a "
"knob. This is the lowest level API to define the space. However, we also "
"provide another set of API to make the space definition easier and "
"smarter. It is recommended to use this set of high level API."
msgstr ""

#: ../../tutorials/autotvm/tune_simple_template.rst:225
msgid ""
"In the following example, we use :any:`ConfigSpace.define_split` to "
"define a split knob. It will enumerate all the possible ways to split an "
"axis and construct the space."
msgstr ""

#: ../../tutorials/autotvm/tune_simple_template.rst:229
msgid ""
"We also have :any:`ConfigSpace.define_reorder` for reorder knob and "
":any:`ConfigSpace.define_annotate` for annotation like unroll, "
"vectorization, thread binding. When the high level API cannot meet your "
"requirement, you can always fall back to use low level API."
msgstr ""

#: ../../tutorials/autotvm/tune_simple_template.rst:278
msgid "More Explanation on :code:`cfg.defile_split`"
msgstr ""

#: ../../tutorials/autotvm/tune_simple_template.rst:280
msgid ""
"In this template, :code:`cfg.define_split(\"tile_y\", y, num_outputs=2)` "
"will enumerate all possible combinations that can split axis y into two "
"axes with factors of the length of y. For example, if the length of y is "
"32 and we want to split it into two axes using factors of 32, then there "
"are 6 possible values for (length of outer axis, length of inner axis) "
"pair, namely (32, 1), (16, 2), (8, 4), (4, 8), (2, 16) or (1, 32). They "
"are just the 6 possible values of `tile_y`."
msgstr ""

#: ../../tutorials/autotvm/tune_simple_template.rst:288
msgid ""
"During schedule, :code:`cfg[\"tile_y\"]` is a :code:`SplitEntity` object."
" We stores the lengths of outer axes and inner axes in "
":code:`cfg['tile_y'].size` (a tuple with two elements). In this template,"
" we apply it by using :code:`yo, yi = cfg['tile_y'].apply(s, C, y)`. "
"Actually, this is equivalent to :code:`yo, yi = s[C].split(y, "
"cfg[\"tile_y\"].size[1])` or  :code:`yo, yi = s[C].split(y, "
"nparts=cfg['tile_y\"].size[0])`"
msgstr ""

#: ../../tutorials/autotvm/tune_simple_template.rst:296
msgid ""
"The advantage of using cfg.apply API is that it makes multi-level split "
"(when num_outputs >= 3) easier."
msgstr ""

#: ../../tutorials/autotvm/tune_simple_template.rst:302
msgid "Step 2:  Search through the space"
msgstr ""

#: ../../tutorials/autotvm/tune_simple_template.rst:303
msgid ""
"In step 1, we build the search space by extending our old schedule code "
"into a template. The next step is to pick a tuner and explore in this "
"space."
msgstr ""

#: ../../tutorials/autotvm/tune_simple_template.rst:307
msgid "Auto-tuners in TVM"
msgstr ""

#: ../../tutorials/autotvm/tune_simple_template.rst:308
msgid "The job for a tuner can be described by following pseudo code"
msgstr ""

#: ../../tutorials/autotvm/tune_simple_template.rst:318
msgid ""
"When proposing the next batch of configs, the tuner can take different "
"strategies. We provide four tuners with different strategies in autotvm."
msgstr ""

#: ../../tutorials/autotvm/tune_simple_template.rst:321
msgid ":any:`RandomTuner`: Enumerate the space in a random order"
msgstr ""

#: ../../tutorials/autotvm/tune_simple_template.rst:322
msgid ":any:`GridSearchTuner`: Enumerate the space in a grid search order"
msgstr ""

#: ../../tutorials/autotvm/tune_simple_template.rst:323
msgid ":any:`GATuner`: Using genetic algorithm to search through the space"
msgstr ""

#: ../../tutorials/autotvm/tune_simple_template.rst:324
msgid ""
":any:`XGBTuner`: Uses a model based method. Train a XGBoost model to "
"predict the speed of lowered IR and pick the next batch according to the "
"prediction."
msgstr ""

#: ../../tutorials/autotvm/tune_simple_template.rst:326
msgid ""
"You can choose the tuner according to the size of your space, your time "
"budget and other factors. For example, if your space is very small (less "
"than 1000), a gridsearch tuner or a random tuner is good enough. If your "
"space is at the level of 10^9 (this is the space size of a conv2d "
"operator on CUDA GPU), XGBoostTuner can explore more efficiently and find"
" better configs."
msgstr ""

#: ../../tutorials/autotvm/tune_simple_template.rst:335
msgid "Begin tuning"
msgstr ""

#: ../../tutorials/autotvm/tune_simple_template.rst:336
msgid ""
"Here we continue our matrix multiplication example. First we should "
"create a tuning task. We can also inspect the initialized search space. "
"In this case, for a 512x512 square matrix multiplication, the space size "
"is 10x10=100"
msgstr ""

#: ../../tutorials/autotvm/tune_simple_template.rst:356
#: ../../tutorials/autotvm/tune_simple_template.rst:407
#: ../../tutorials/autotvm/tune_simple_template.rst:460
msgid "Out:"
msgstr ""

#: ../../tutorials/autotvm/tune_simple_template.rst:370
msgid ""
"Then we need to define how to measure the generated code and pick a "
"tuner. Since our space is small, a random tuner is just okay."
msgstr ""

#: ../../tutorials/autotvm/tune_simple_template.rst:373
msgid ""
"We only make 10 trials in this tutorial for demonstration. In practice, "
"you can do more trials according to your time budget. We will log the "
"tuning results into a log file. This file can be used to get the best "
"config later."
msgstr ""

#: ../../tutorials/autotvm/tune_simple_template.rst:428
msgid ""
"Finally we apply history best from the cache file and check its "
"correctness. We can call the function :code:`matmul` directly under the "
":any:`autotvm.apply_history_best` context. When we call this function, it"
" will query the dispatch context with its argument and get the best "
"config with the same argument."
msgstr ""

#: ../../tutorials/autotvm/tune_simple_template.rst:482
msgid ""
":download:`Download Python source code: tune_simple_template.py "
"<tune_simple_template.py>`"
msgstr ""

#: ../../tutorials/autotvm/tune_simple_template.rst:488
msgid ""
":download:`Download Jupyter notebook: tune_simple_template.ipynb "
"<tune_simple_template.ipynb>`"
msgstr ""

#: ../../tutorials/autotvm/tune_simple_template.rst:495
msgid "`Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_"
msgstr ""

