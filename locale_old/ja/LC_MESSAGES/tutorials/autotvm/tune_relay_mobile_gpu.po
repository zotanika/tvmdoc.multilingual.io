# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, Apache Software Foundation
# This file is distributed under the same license as the tvm package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: tvm 0.8.dev0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-04 20:34+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../../tutorials/autotvm/tune_relay_mobile_gpu.rst:13
msgid ""
"Click :ref:`here "
"<sphx_glr_download_tutorials_autotvm_tune_relay_mobile_gpu.py>` to "
"download the full example code"
msgstr ""

#: ../../tutorials/autotvm/tune_relay_mobile_gpu.rst:22
msgid "Auto-tuning a Convolutional Network for Mobile GPU"
msgstr ""

#: ../../tutorials/autotvm/tune_relay_mobile_gpu.rst:23
msgid ""
"**Author**: `Lianmin Zheng <https://github.com/merrymercy>`_, `Eddie Yan "
"<https://github.com/eqy>`_"
msgstr ""

#: ../../tutorials/autotvm/tune_relay_mobile_gpu.rst:25
msgid ""
"Auto-tuning for a specific device is critical for getting the best "
"performance. This is a tutorial about how to tune a whole convolutional "
"network."
msgstr ""

#: ../../tutorials/autotvm/tune_relay_mobile_gpu.rst:29
msgid ""
"The operator implementation for Mobile GPU in TVM is written in template "
"form. The template has many tunable knobs (tile factor, vectorization, "
"unrolling, etc). We will tune all convolution, depthwise convolution and "
"dense operators in the neural network. After tuning, we produce a log "
"file which stores the best knob values for all required operators. When "
"the TVM compiler compiles these operators, it will query this log file to"
" get the best knob values."
msgstr ""

#: ../../tutorials/autotvm/tune_relay_mobile_gpu.rst:36
msgid ""
"We also released pre-tuned parameters for some arm devices. You can go to"
" `Mobile GPU Benchmark <https://github.com/apache/tvm/wiki/Benchmark"
"#mobile-gpu>`_ to see the results."
msgstr ""

#: ../../tutorials/autotvm/tune_relay_mobile_gpu.rst:40
msgid ""
"Note that this tutorial will not run on Windows or recent versions of "
"macOS. To get it to run, you will need to wrap the body of this tutorial "
"in a :code:`if __name__ == \"__main__\":` block."
msgstr ""

#: ../../tutorials/autotvm/tune_relay_mobile_gpu.rst:47
msgid "Install dependencies"
msgstr ""

#: ../../tutorials/autotvm/tune_relay_mobile_gpu.rst:48
msgid ""
"To use the autotvm package in tvm, we need to install some extra "
"dependencies. (change \"3\" to \"2\" if you use python2):"
msgstr ""

#: ../../tutorials/autotvm/tune_relay_mobile_gpu.rst:55
msgid ""
"To make TVM run faster during tuning, it is recommended to use cython as "
"FFI of tvm. In the root directory of tvm, execute (change \"3\" to \"2\" "
"if you use python2):"
msgstr ""

#: ../../tutorials/autotvm/tune_relay_mobile_gpu.rst:64
msgid "Now return to python code. Import packages."
msgstr ""

#: ../../tutorials/autotvm/tune_relay_mobile_gpu.rst:92
msgid "Define network"
msgstr ""

#: ../../tutorials/autotvm/tune_relay_mobile_gpu.rst:93
msgid ""
"First we need to define the network in relay frontend API. We can load "
"some pre-defined network from :code:`relay.testing`. We can also load "
"models from MXNet, ONNX and TensorFlow."
msgstr ""

#: ../../tutorials/autotvm/tune_relay_mobile_gpu.rst:158
msgid "Start RPC Tracker"
msgstr ""

#: ../../tutorials/autotvm/tune_relay_mobile_gpu.rst:159
msgid ""
"TVM uses RPC session to communicate with ARM boards. During tuning, the "
"tuner will send the generated code to the board and measure the speed of "
"code on the board."
msgstr ""

#: ../../tutorials/autotvm/tune_relay_mobile_gpu.rst:163
msgid ""
"To scale up the tuning, TVM uses RPC Tracker to manage distributed "
"devices. The RPC Tracker is a centralized controller node. We can "
"register all devices to the tracker. For example, if we have 10 phones, "
"we can register all of them to the tracker, and run 10 measurements in "
"parallel, accelerating the tuning process."
msgstr ""

#: ../../tutorials/autotvm/tune_relay_mobile_gpu.rst:168
msgid ""
"To start an RPC tracker, run this command on the host machine. The "
"tracker is required during the whole tuning process, so we need to open a"
" new terminal for this command:"
msgstr ""

#: ../../tutorials/autotvm/tune_relay_mobile_gpu.rst:176
msgid "The expected output is"
msgstr ""

#: ../../tutorials/autotvm/tune_relay_mobile_gpu.rst:185
msgid "Register Devices to RPC Tracker"
msgstr ""

#: ../../tutorials/autotvm/tune_relay_mobile_gpu.rst:186
msgid ""
"Now we can register our devices to the tracker. The first step is to "
"build the TVM runtime for the ARM devices."
msgstr ""

#: ../../tutorials/autotvm/tune_relay_mobile_gpu.rst:189
msgid ""
"For Linux: Follow this section :ref:`build-tvm-runtime-on-device` to "
"build the TVM runtime on the device. Then register the device to tracker "
"by"
msgstr ""

#: ../../tutorials/autotvm/tune_relay_mobile_gpu.rst:197
msgid "(replace :code:`[HOST_IP]` with the IP address of your host machine)"
msgstr ""

#: ../../tutorials/autotvm/tune_relay_mobile_gpu.rst:199
msgid ""
"For Android: Follow this `readme page "
"<https://github.com/apache/tvm/tree/main/apps/android_rpc>`_ to install "
"TVM RPC APK on the android device. Make sure you can pass the android RPC"
" test. Then you have already registered your device. During tuning, you "
"have to go to developer option and enable \"Keep screen awake during "
"changing\" and charge your phone to make it stable."
msgstr ""

#: ../../tutorials/autotvm/tune_relay_mobile_gpu.rst:205
msgid "After registering devices, we can confirm it by querying rpc_tracker"
msgstr ""

#: ../../tutorials/autotvm/tune_relay_mobile_gpu.rst:211
msgid ""
"For example, if we have 2 Huawei mate10 pro, 11 Raspberry Pi 3B and 2 "
"rk3399, the output can be"
msgstr ""

#: ../../tutorials/autotvm/tune_relay_mobile_gpu.rst:225
msgid ""
"You can register multiple devices to the tracker to accelerate the "
"measurement in tuning."
msgstr ""

#: ../../tutorials/autotvm/tune_relay_mobile_gpu.rst:230
msgid "Set Tuning Options"
msgstr ""

#: ../../tutorials/autotvm/tune_relay_mobile_gpu.rst:231
msgid ""
"Before tuning, we should apply some configurations. Here I use an RK3399 "
"board as example. In your setting, you should modify the target and "
"device_key accordingly. set :code:`use_android` to True if you use "
"android phone."
msgstr ""

#: ../../tutorials/autotvm/tune_relay_mobile_gpu.rst:285
msgid "How to set tuning options"
msgstr ""

#: ../../tutorials/autotvm/tune_relay_mobile_gpu.rst:287
msgid ""
"In general, the default values provided here work well. If you have "
"enough time budget, you can set :code:`n_trial`, :code:`early_stopping` "
"larger, which makes the tuning run longer. If your device runs very slow "
"or your conv2d operators have many GFLOPs, considering to set timeout "
"larger."
msgstr ""

#: ../../tutorials/autotvm/tune_relay_mobile_gpu.rst:297
msgid "Begin Tuning"
msgstr ""

#: ../../tutorials/autotvm/tune_relay_mobile_gpu.rst:298
msgid ""
"Now we can extract tuning tasks from the network and begin tuning. Here, "
"we provide a simple utility function to tune a list of tasks. This "
"function is just an initial implementation which tunes them in sequential"
" order. We will introduce a more sophisticated tuning scheduler in the "
"future."
msgstr ""

#: ../../tutorials/autotvm/tune_relay_mobile_gpu.rst:368
msgid "Finally, we launch tuning jobs and evaluate the end-to-end performance."
msgstr ""

#: ../../tutorials/autotvm/tune_relay_mobile_gpu.rst:447
msgid "Sample Output"
msgstr ""

#: ../../tutorials/autotvm/tune_relay_mobile_gpu.rst:448
msgid ""
"The tuning needs to compile many programs and extract feature from them. "
"So a high performance CPU is recommended. One sample output is listed "
"below. It takes about 3 hours on a 32T AMD Ryzen Threadripper."
msgstr ""

#: ../../tutorials/autotvm/tune_relay_mobile_gpu.rst:481
msgid "**Experiencing Difficulties?**"
msgstr ""

#: ../../tutorials/autotvm/tune_relay_mobile_gpu.rst:483
msgid ""
"The auto tuning module is error-prone. If you always see \" 0.00/ 0.00 "
"GFLOPS\", then there must be something wrong."
msgstr ""

#: ../../tutorials/autotvm/tune_relay_mobile_gpu.rst:486
msgid ""
"First, make sure you set the correct configuration of your device. Then, "
"you can print debug information by adding these lines in the beginning of"
" the script. It will print every measurement result, where you can find "
"useful error messages."
msgstr ""

#: ../../tutorials/autotvm/tune_relay_mobile_gpu.rst:496
msgid ""
"Finally, always feel free to ask our community for help on "
"https://discuss.tvm.apache.org"
msgstr ""

#: ../../tutorials/autotvm/tune_relay_mobile_gpu.rst:511
msgid ""
":download:`Download Python source code: tune_relay_mobile_gpu.py "
"<tune_relay_mobile_gpu.py>`"
msgstr ""

#: ../../tutorials/autotvm/tune_relay_mobile_gpu.rst:517
msgid ""
":download:`Download Jupyter notebook: tune_relay_mobile_gpu.ipynb "
"<tune_relay_mobile_gpu.ipynb>`"
msgstr ""

#: ../../tutorials/autotvm/tune_relay_mobile_gpu.rst:524
msgid "`Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_"
msgstr ""

