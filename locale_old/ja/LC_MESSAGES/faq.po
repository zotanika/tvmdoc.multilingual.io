# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, Apache Software Foundation
# This file is distributed under the same license as the tvm package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: tvm 0.8.dev0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-04 20:34+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../../faq.rst:20
msgid "Frequently Asked Questions"
msgstr ""

#: ../../faq.rst:24
msgid "How to Install"
msgstr ""

#: ../../faq.rst:25
msgid "See :ref:`installation`."
msgstr ""

#: ../../faq.rst:29
msgid "How to add a new Hardware Backend"
msgstr ""

#: ../../faq.rst:31
msgid ""
"If the hardware backend has LLVM support, then we can directly generate "
"the code by setting the correct target triple as in "
":py:mod:`~tvm.target`."
msgstr ""

#: ../../faq.rst:33
msgid ""
"If the target hardware is a GPU, try to use the cuda, opencl or vulkan "
"backend."
msgstr ""

#: ../../faq.rst:34
msgid ""
"If the target hardware is a special accelerator, checkout :ref:`vta-"
"index` and :ref:`relay-bring-your-own-codegen`."
msgstr ""

#: ../../faq.rst:36
msgid ""
"For all of the above cases, You may want to add target specific "
"optimization templates using AutoTVM, see :ref:`tutorials-autotvm-sec`."
msgstr ""

#: ../../faq.rst:38
msgid ""
"Besides using LLVM's vectorization, we can also embed micro-kernels to "
"leverage hardware intrinsics, see :ref:`tutorials-tensorize`."
msgstr ""

#: ../../faq.rst:43
msgid "TVM's relation to Other IR/DSL Projects"
msgstr ""

#: ../../faq.rst:44
msgid ""
"There are usually two levels of abstractions of IR in the deep learning "
"systems. TensorFlow's XLA and Intel's ngraph both use a computation graph"
" representation. This representation is high level, and can be helpful to"
" perform generic optimizations such as memory reuse, layout "
"transformation and automatic differentiation."
msgstr ""

#: ../../faq.rst:49
msgid ""
"TVM adopts a low-level representation, that explicitly express the choice"
" of memory layout, parallelization pattern, locality and hardware "
"primitives etc. This level of IR is closer to directly target hardwares. "
"The low-level IR adopts ideas from existing image processing languages "
"like Halide, darkroom and loop transformation tools like loopy and "
"polyhedra-based analysis. We specifically focus on expressing deep "
"learning workloads (e.g. recurrence), optimization for different hardware"
" backends and embedding with frameworks to provide end-to-end compilation"
" stack."
msgstr ""

#: ../../faq.rst:60
msgid "TVM's relation to libDNN, cuDNN"
msgstr ""

#: ../../faq.rst:61
msgid ""
"TVM can incorporate these libraries as external calls. One goal of TVM is"
" to be able to generate high-performing kernels. We will evolve TVM an "
"incremental manner as we learn from the techniques of manual kernel "
"crafting and add these as primitives in DSL. See also top for recipes of "
"operators in TVM."
msgstr ""

#: ../../faq.rst:68
msgid "Security"
msgstr ""

#: ../../faq.rst:69
msgid "See :ref:`dev-security`"
msgstr ""

