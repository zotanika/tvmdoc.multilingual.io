# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, Apache Software Foundation
# This file is distributed under the same license as the tvm package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: tvm 0.8.dev0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-04 20:34+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../../langref/hybrid_script.rst:21
msgid "Hybrid Frontend Language Reference"
msgstr ""

#: ../../langref/hybrid_script.rst:24
msgid "Overview"
msgstr ""

#: ../../langref/hybrid_script.rst:26
msgid ""
"This hybrid frontend allows users to write preliminary versions of some "
"idioms that yet have been supported by TVM officially."
msgstr ""

#: ../../langref/hybrid_script.rst:30
msgid "Features"
msgstr ""

#: ../../langref/hybrid_script.rst:33
msgid "Software Emulation"
msgstr ""

#: ../../langref/hybrid_script.rst:35
msgid ""
"Both software emulation and compilation are supported. To define a "
"function, you need to use ``tvm.te.hybrid.script`` decorator to indicate "
"this is a hybrid function:"
msgstr ""

#: ../../langref/hybrid_script.rst:52
msgid ""
"This decorator will import `Keywords`_ required spontaneously when "
"software emulation. After software emulation is done, the imported "
"keywords will be cleaned up. Users do not need worry about keyword "
"conflict and pollution."
msgstr ""

#: ../../langref/hybrid_script.rst:56
msgid ""
"Every element passed for software emulation in the argument list is "
"either a python variable or ``numpy`` numeric type."
msgstr ""

#: ../../langref/hybrid_script.rst:60
msgid "Backend Compilation"
msgstr ""

#: ../../langref/hybrid_script.rst:62
msgid ""
"This function is not encouraged to use, users are encouraged to use the "
"second interface. The current parse interface looks like:"
msgstr ""

#: ../../langref/hybrid_script.rst:72
msgid ""
"If we pass these tvm data structures, like ``Tensor``, ``Var``, "
"``Expr.*Imm``, or ``tvm.container.Array``, to this function, it returns a"
" op node:"
msgstr ""

#: ../../langref/hybrid_script.rst:81
msgid ""
"You can use any methods that can be applied on a TVM ``OpNode``, like "
"create_schedule, although so far, the functionality of schedule is as "
"limited as ``ExternOpNode``. At least, it can be built to LLVM module."
msgstr ""

#: ../../langref/hybrid_script.rst:86
msgid "Tuning"
msgstr ""

#: ../../langref/hybrid_script.rst:88
msgid ""
"Follow up the example above, you can use some tvm like interfaces to tune"
" the code:"
msgstr ""

#: ../../langref/hybrid_script.rst:97
msgid ""
"For now, you can use loop annotations (``unroll``, ``parallel``, "
"``vectorize``, and ``bind``), loop manipulation (``split`` and ``fuse``),"
" and ``reorder``."
msgstr ""

#: ../../langref/hybrid_script.rst:102
msgid ""
"This is a preliminary function, so users should be in charge of the "
"correctness of the functionality after tuning. Specifically, users should"
" be careful when fusing and reorderding imperfect loops."
msgstr ""

#: ../../langref/hybrid_script.rst:107
msgid "Loops"
msgstr ""

#: ../../langref/hybrid_script.rst:109
msgid ""
"In HalideIR, loops have in total 4 types: ``serial``, ``unrolled``, "
"``parallel``, and ``vectorized``."
msgstr ""

#: ../../langref/hybrid_script.rst:111
msgid ""
"Here we use ``range`` aka ``serial``, ``unroll``, ``parallel``, and "
"``vectorize``, these **4** keywords to annotate the corresponding types "
"of for loops. The the usage is roughly the same as Python standard "
"``range``."
msgstr ""

#: ../../langref/hybrid_script.rst:115
msgid ""
"Besides all the loop types supported in Halide, ``const_range`` is "
"supported for some specific conditions. Sometimes, "
"``tvm.container.Array`` is desired to pass as an argument, but in TVM-"
"HalideIR, there is no such support that converts ``tvm.container.Array`` "
"to an ``Expr``. Thus, a limited feature is supported. Users can access "
"containers by either constants or constants loops annotated."
msgstr ""

#: ../../langref/hybrid_script.rst:131
msgid "Variables"
msgstr ""

#: ../../langref/hybrid_script.rst:133
msgid ""
"All the mutable variables will be lowered to an array with size 1. It "
"regards the first store of a variable as its declaration."
msgstr ""

#: ../../langref/hybrid_script.rst:138
msgid ""
"Unlike conventional Python, in hybrid script, the declared variable can "
"only be used in the scope level it is declared."
msgstr ""

#: ../../langref/hybrid_script.rst:144
msgid ""
"Currently, you can ONLY use basic-typed variables, i.e. the type of the "
"variable should be either ``float32``, or ``int32``."
msgstr ""

#: ../../langref/hybrid_script.rst:158
msgid "Attributes"
msgstr ""

#: ../../langref/hybrid_script.rst:160
msgid ""
"So far, ONLY tensors' ``shape`` and ``dtype`` attribute are supported! "
"The ``shape`` attribute is essentially a tuple, so you MUST access it as "
"an array. Currently, only constant-indexed access is supported."
msgstr ""

#: ../../langref/hybrid_script.rst:173
msgid "Conditional Statement and Expression"
msgstr ""

#: ../../langref/hybrid_script.rst:184
msgid "However, NO ``True`` and ``False`` keyword supported yet."
msgstr ""

#: ../../langref/hybrid_script.rst:188
msgid "Math Intrinsics"
msgstr ""

#: ../../langref/hybrid_script.rst:190
msgid ""
"So far, these math intrinsics, ``log``, ``exp``, ``sigmoid``, ``tanh``, "
"``power``, and ``popcount``, are supported. No import is required, just "
"as it is mentioned in `Software Emulation`_, just use it!"
msgstr ""

#: ../../langref/hybrid_script.rst:195
msgid "Array Allocation"
msgstr ""

#: ../../langref/hybrid_script.rst:197
msgid "**Under construction, this function will be supported later!**"
msgstr ""

#: ../../langref/hybrid_script.rst:199
msgid ""
"Use a function call ``allocation(shape, type, share/local)`` to declare "
"an array buffer. The basic usage is roughly the same as a normal "
"``numpy.array``, and you should access high-dim array in ``a[i, j, k]`` "
"fashion instead of ``a[i][j][k]``, even for ``tvm.container.Array`` for "
"compilation."
msgstr ""

#: ../../langref/hybrid_script.rst:206
msgid "Thread Bind"
msgstr ""

#: ../../langref/hybrid_script.rst:209
msgid "You can also do loop-thread bind by writing code like this:"
msgstr ""

#: ../../langref/hybrid_script.rst:218
msgid "Assert Statement"
msgstr ""

#: ../../langref/hybrid_script.rst:220
msgid ""
"Assert statement is supported, you can simply use it as it is in standard"
" Python."
msgstr ""

#: ../../langref/hybrid_script.rst:228
msgid ""
"``Assert`` is NOT a function call. Users are encouraged to use assert in "
"the way presented above --- condition followed by message. It fits both "
"Python AST and HalideIR."
msgstr ""

#: ../../langref/hybrid_script.rst:232
msgid "Keywords"
msgstr ""

#: ../../langref/hybrid_script.rst:233
msgid ""
"For keywords: ``serial``, ``range``, ``unroll``, ``parallel``, "
"``vectorize``, ``bind``, ``const_range``"
msgstr ""

#: ../../langref/hybrid_script.rst:234
msgid ""
"Math keywords: ``log``, ``exp``, ``sqrt``, ``rsqrt``, ``sigmoid``, "
"``tanh``, ``power``, ``popcount``, ``round``, ``ceil_div``"
msgstr ""

#: ../../langref/hybrid_script.rst:235
msgid "Allocate keywords: ``allocate``, ``output_tensor``"
msgstr ""

#: ../../langref/hybrid_script.rst:236
msgid ""
"Data type keywords: ``uint8``, ``uint16``, ``uint32``, ``uint64``, "
"``int8``, ``int16``, ``int32``, ``int64``, ``float16``, ``float32``, "
"``float64``"
msgstr ""

#: ../../langref/hybrid_script.rst:237
msgid "Others: ``max_num_threads``"
msgstr ""

