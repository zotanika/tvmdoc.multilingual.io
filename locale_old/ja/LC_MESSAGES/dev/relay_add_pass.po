# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, Apache Software Foundation
# This file is distributed under the same license as the tvm package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: tvm 0.8.dev0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-04 20:34+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../../dev/relay_add_pass.rst:21
msgid "Adding a Compiler Pass to Relay"
msgstr ""

#: ../../dev/relay_add_pass.rst:23
msgid ""
"Compiler passes are the primary interface for both extending Relay's "
"feature set and for performing optimizations on Relay programs. By "
"writing a compiler pass, you can modify the AST or collect information "
"about the AST, depending on your goal. Indeed, some of Relay's most "
"important built-in features (e.g., autodiff and type inference) are "
"nothing more than \"standard\" compiler passes."
msgstr ""

#: ../../dev/relay_add_pass.rst:30
msgid "At a high level, there are two key components to writing a pass:"
msgstr ""

#: ../../dev/relay_add_pass.rst:32
msgid "Creating one or more C++ classes that traverse the program"
msgstr ""

#: ../../dev/relay_add_pass.rst:33
msgid ""
"Wrapping the traversal implementation and its metadata in the pass "
"manager API so it can neatly interface with the :ref:`pass-infra`"
msgstr ""

#: ../../dev/relay_add_pass.rst:35
msgid ""
"To begin, we'll give an overview of the key mechanisms for writing a "
"compiler pass. Then, we'll walk through a concrete example of the "
"constant-folding pass in Relay."
msgstr ""

#: ../../dev/relay_add_pass.rst:40
msgid "AST Traversers"
msgstr ""

#: ../../dev/relay_add_pass.rst:42
msgid ""
"The base class used to traverse Relay programs is ``ExprFunctor``. The "
"public interface it provides is a ``VisitExpr`` method that takes an "
"expression and zero or more arguments and returns an instance of some "
"type. When you extend this class, you define the AST traversal pattern by"
" overriding implementations of ``VisitExpr_`` for each type of "
"expression."
msgstr ""

#: ../../dev/relay_add_pass.rst:48
msgid ""
"The relation between ``VisitExpr`` and ``VisitExpr_`` has to do with "
"dispatch. Each ``VisitExpr_`` definition targets a specific type of "
"expression, but you don't always know which node type you'll be visiting."
" To remedy this, ``ExprFunctor`` provides a ``VisitExpr`` function which "
"routes from the given expression to the ``VisitExpr_`` case that handles "
"it. Although C++ already provides dynamic dispatch, ``ExprFunctor`` "
"defines its own vtable, which ``VisitExpr`` uses. By defining our own "
"vtable, we have more control over dispatch. For example, if we wanted to "
"define a ``PrintVisitor`` traverser that printed \"Here\" before every "
"visit, we could override ``VisitExpr``:"
msgstr ""

#: ../../dev/relay_add_pass.rst:66
msgid ""
"``ExprFunctor`` itself is a very general class, which is why more often "
"than not, you will be extending ``ExprVisitor`` or ``ExprMutator``. These"
" classes extend ``ExprFunctor`` and provide default implementations of "
"``VisitExpr_`` that capture common traversal patterns for each expression"
" type. Having these default implementations means we only need to provide"
" overriding implementations for the expression types where we want "
"different behavior. We describe each subclass on its own in the following"
" sections."
msgstr ""

#: ../../dev/relay_add_pass.rst:75
msgid "Expression Visitors"
msgstr ""

#: ../../dev/relay_add_pass.rst:77
msgid ""
"``ExprVisitor`` is for passes that don't modify the program and instead "
"perform program analyses and collect information. With this class, "
"``VisitExpr`` and the private counterparts return nothing. The "
"``VisitExpr_`` implementations provided by this class simply visit all of"
" the expression's fields that are expressions. The default implementation"
" for ``IfNode`` is shown below."
msgstr ""

#: ../../dev/relay_add_pass.rst:92
msgid ""
"Note that we're calling ``VisitExpr`` and not ``VisitExpr_`` here, so we "
"can use the vtable in ``ExprFunctor`` for routing."
msgstr ""

#: ../../dev/relay_add_pass.rst:95
msgid ""
"Now, if we wanted to write a class ``CallChecker`` that checks if any "
"function calls appear in the program, we would only need to extend "
"``ExprVisitor`` and define the following ``VisitExpr_`` method:"
msgstr ""

#: ../../dev/relay_add_pass.rst:105
msgid ""
"where ``result_`` is a field. In this case, we don't need to further "
"recurse on the fields of the ``CallNode``, because ``result_`` is already"
" true and we now know the original expression contains a call. To make "
"this visitor usable, we would provide the following public method:"
msgstr ""

#: ../../dev/relay_add_pass.rst:118
msgid ""
"And that's all we need. It is very common to define a public interface "
"that performs some bookkeeping before invoking the top-level recursion. "
"We could of course further wrap the API by making a standalone procedure "
"that creates a ``CallChecker`` instance and calls ``Check`` on it, but "
"the takeaway is that we've achieved our goal with very little effort."
msgstr ""

#: ../../dev/relay_add_pass.rst:125
msgid "Expression Mutators"
msgstr ""

#: ../../dev/relay_add_pass.rst:127
msgid ""
"``ExprMutator`` is for passes that transform the program in some way. "
"With this class, ``VisitExpr`` and its private counterparts return "
"``Expr``. The default ``VisitExpr_`` implementations provided by this "
"class visit all of the expression's fields that are expressions and set "
"the fields to be the result of visiting them. The default implementation "
"for ``TupleGetItemNode`` is shown below."
msgstr ""

#: ../../dev/relay_add_pass.rst:145
msgid ""
"There are a few things to notice here. First, ``Mutate`` is an alias for "
"``VisitExpr`` in ``ExprMutator``. Second, we only return a new node if "
"the call to ``Mutate`` modified the ``tuple`` field. This method of "
"update is called a functional update and doing so avoids unnecessary "
"allocations."
msgstr ""

#: ../../dev/relay_add_pass.rst:150
msgid ""
"One feature ``ExprMutator`` has that ``ExprVisitor`` doesn't is a built-"
"in ``memo_`` field for caching results. It makes sense that "
"``ExprMutator`` has a memoizer, because we know which types of results "
"we're caching (i.e., ``Expr``), whereas the visit methods of "
"``ExprVisitor`` don't return anything. Usually, when we want to cache "
"results in a subclass of ``ExprVisitor``, we need to define the cache "
"ourselves."
msgstr ""

#: ../../dev/relay_add_pass.rst:157
msgid ""
"Now, if we wanted to write a class ``IfCollapser`` that replaces every if"
" statement with its true branch, we would override ``VisitExpr_`` for "
"``IfNode``:"
msgstr ""

#: ../../dev/relay_add_pass.rst:167
msgid ""
"Note that the returned expression will not necessarily be an ``IfNode``, "
"and this is fine, because the return type is ``Expr``. Now, we create the"
" public interface:"
msgstr ""

#: ../../dev/relay_add_pass.rst:177
msgid ""
"With this mutator, we didn't need to do any bookkeeping, but we still "
"want to follow the convention of having a descriptive method as the "
"interface."
msgstr ""

#: ../../dev/relay_add_pass.rst:181
msgid "Example: Constant Folding"
msgstr ""

#: ../../dev/relay_add_pass.rst:183
msgid ""
"In order to better understand the process of writing a pass, we will look"
" at the constant folding pass (found in "
"`src/relay/transforms/fold_constant.cc`_) as a guide, because it is a "
"relatively simple pass that incorporates both types of traversals."
msgstr ""

#: ../../dev/relay_add_pass.rst:188
msgid ""
"Constant folding involves evaluating expressions in the program that only"
" involve constant values, then replacing those expressions with the "
"result of evaluating them. The goal of this pass is to frontload all of "
"the computations that we can. To achieve this, the constant folding pass "
"makes use of a visitor (``ConstantChecker``) and a mutator "
"(``ConstantFolder``)."
msgstr ""

#: ../../dev/relay_add_pass.rst:195
msgid "The ``ConstantChecker`` Visitor"
msgstr ""

#: ../../dev/relay_add_pass.rst:197
msgid ""
"This visitor is used to check if an expression is constant. In Relay, we "
"define an expression to be constant if it is a ``ConstantNode`` or it is "
"a ``TupleNode`` with only constant fields."
msgstr ""

#: ../../dev/relay_add_pass.rst:201
msgid ""
"We use a ``memo_`` field to map from nodes to whether they are constant "
"and to cache these results. Below are the ``VisitExpr_`` definitions in "
"the ``ConstantChecker``."
msgstr ""

#: ../../dev/relay_add_pass.rst:222
msgid ""
"The bookkeeping used to coordinate these definitions is a ``Check`` "
"method that returns whether the given expression is considered constant."
msgstr ""

#: ../../dev/relay_add_pass.rst:235
msgid ""
"We don't modify ``memo_`` for every node we encounter; instead we only "
"modify ``memo_`` when the encountered node could potentially be constant."
" Then we rely on the default value being false when ``memo_`` doesn't "
"contain ``expr``."
msgstr ""

#: ../../dev/relay_add_pass.rst:241
msgid "The ``ConstantFolder`` Mutator"
msgstr ""

#: ../../dev/relay_add_pass.rst:243
msgid ""
"This mutator performs the bulk of the constant folding pass and "
"internally uses ``ConstantChecker``. In Relay, there are three node types"
" that are involved in constant folding: ``LetNode``, "
"``TupleItemGetNode``, and ``CallNode``. In the following paragraphs, we "
"explain the roles of each in the pass."
msgstr ""

#: ../../dev/relay_add_pass.rst:269
msgid ""
"In the ``LetNode`` case, we first attempt to const-fold the value being "
"bound in the expression. If we can, then we populate ``memo_`` and return"
" the result of visiting the body---essentially, propagating the bound "
"value to its use sites in the body. If we can't const-fold the bound "
"value, we mimic the default implementation."
msgstr ""

#: ../../dev/relay_add_pass.rst:287
msgid ""
"In the ``TupleItemGetNode`` case, we check if ``op->tuple`` field is a "
"``TupleNode``. If so, we replace the tuple get with the field of the "
"tuple pointed to by ``op->index``. The reason we need to check is because"
" ``op->tuple`` might evaluate to a tuple, without itself being a tuple."
msgstr ""

#: ../../dev/relay_add_pass.rst:319
msgid ""
"In the ``CallNode`` case, we first use the ``VisitExpr_`` of "
"``ExprMutator`` to visit the call, which const-folds all of the fields of"
" the call. We use ``ExprMutator::VisitExpr_`` instead of ``VisitExpr``, "
"because we want to bypass the vtable (to avoid an infinite loop) and use "
"the default implementation provided by ``ExprMutator``. Then we evaluate "
"the call only if all of the arguments are constant (using "
"``ConstantChecker``). Evaluating the call produces a **value**, so we use"
" a helper method ``ValueToExpr`` to allow us to place the evaluated "
"expression back into the AST."
msgstr ""

#: ../../dev/relay_add_pass.rst:328
msgid ""
"Now, we construct a more convenient interface ``FoldConstant`` for our "
"constant folder. ``FoldConstant`` is a standalone function outside of the"
" ``ConstantFolder`` class that takes an expression and internally creates"
" and uses a ``ConstantFolder`` instance (the full definition can be found"
" in `src/relay/transforms/fold_constant.cc`_)."
msgstr ""

#: ../../dev/relay_add_pass.rst:336
msgid "Registering a Pass with the Pass Manager"
msgstr ""

#: ../../dev/relay_add_pass.rst:338
msgid ""
"*Note: please see the documentation on the :ref:`pass-infra` for more "
"specific detail on this subject.*"
msgstr ""

#: ../../dev/relay_add_pass.rst:340
msgid ""
"With the AST traversers written, the pass can be registered to become a "
"TVM API endpoint with the following code:"
msgstr ""

#: ../../dev/relay_add_pass.rst:357
msgid ""
"If the ``Pass`` object produced by the above code is given to the pass "
"infrastructure, it will ensure that the AST traversal is applied to every"
" function in the given Relay module, which is the behavior one would "
"expect for a constant folding pass (it should fold all constants where "
"possible)."
msgstr ""

#: ../../dev/relay_add_pass.rst:362
msgid ""
"The function ``CreateFunctionPass`` allows for registering the "
"optimization level of the pass (in this case, 2), which can be used to "
"group together passes based on their general utility, a name for the "
"pass, and any dependencies for the pass. A pass's dependencies are given "
"as a list of any passes whose results are necessary to be able to run the"
" current pass. ``FoldConstant`` does not have any dependencies, but many "
"Relay passes do depend on having type information, so ``InferType`` is a "
"common dependency; others may depend on the program's being in A-normal "
"form, via the ``ToANormalForm`` pass."
msgstr ""

#: ../../dev/relay_add_pass.rst:371
msgid ""
"Note that the ``PassContext`` object contains information a pass uses for"
" error reporting and configuration options; ``FoldConstant`` does not "
"need this information but other passes may reference their "
"``PassContext`` objects."
msgstr ""

#: ../../dev/relay_add_pass.rst:375
msgid ""
"The pass can now be invoked via the pass infrastructure, though it's a "
"good idea to also add a Python binding for the pass, as in this code "
"snippet:"
msgstr ""

#: ../../dev/relay_add_pass.rst:383
msgid ""
"Once ``Pass`` objects are defined in the above fashion, they can be "
"invoked using the pass infrastructure's ``Sequential`` construct, which "
"takes a list of passes and applies them in sequence to a Relay module, "
"obtaining a transformed module as a result. For example, the below code "
"applies both the ``FoldConstant`` and ``ToANormalForm`` passes (one after"
" the other) to each function in ``mod`` and obtains a new module."
msgstr ""

#: ../../dev/relay_add_pass.rst:397
msgid ""
"More detail about registration can be found in :ref:`tvm-runtime-system` "
"and more information about the pass manager interface can be found in "
":ref:`pass-infra`. Relay's standard passes are listed in "
"`include/tvm/relay/transform.h`_ and implemented in `src/relay/pass/`_."
msgstr ""

