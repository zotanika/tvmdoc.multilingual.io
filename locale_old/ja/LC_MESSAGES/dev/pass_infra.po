# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, Apache Software Foundation
# This file is distributed under the same license as the tvm package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: tvm 0.8.dev0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-04 20:34+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../../dev/pass_infra.rst:21
msgid "Pass Infrastructure"
msgstr ""

#: ../../dev/pass_infra.rst:23
msgid ""
"Both Relay and TVM IR contain a series of optimization passes which "
"improve performance metrics of models such as mean inference, memory "
"footprint, or power consumption for specific devices. There is a suite of"
" standard optimizations as well as machine learning-specific "
"optimizations including constant folding, dead code elimination, operator"
" layout alteration, operator fusion, buffer handling, and loop "
"transformation, etc. Each of these passes is structured as a ir-to-ir "
"transformation using the analysis result collected during and/or before "
"traversal."
msgstr ""

#: ../../dev/pass_infra.rst:31
msgid ""
"However, as TVM evolves quickly, the need for a more systematic and "
"efficient way to manage these passes is becoming apparent. In addition, a"
" generic framework that manages the passes across different layers of the"
" TVM stack (e.g. Relay and tir) paves the way for developers to quickly "
"prototype and plug the implemented passes into the system."
msgstr ""

#: ../../dev/pass_infra.rst:37
msgid ""
"This doc describes the design of such an infra that takes the advantage "
"of the way production compilers are used to manage the optimization "
"passes and the style modern deep learning frameworks adopted to build up "
"layers."
msgstr ""

#: ../../dev/pass_infra.rst:41
msgid ""
"For example, many existing production compilers, such as GCC and LLVM, "
"employ pass managers to effectively manage the execution of passes. "
"Initially managing passes is straightforward as the number of passes is "
"small, but mature compilers will contain hundreds of individual passes. "
"Often external users will want to have custom passes correctly scheduled "
"without having to modify a single handcrafted pass order."
msgstr ""

#: ../../dev/pass_infra.rst:48
msgid ""
"Similarly, modern deep learning frameworks, such as Pytorch and MXNet "
"Gluon, also have the tendency to enable pass-style layer construction "
"scheme through `Sequential`_ and `Block`_, respectively. With such "
"constructs, these modern frameworks are able to conveniently add "
"modules/layers to their containers and build up neural networks easily."
msgstr ""

#: ../../dev/pass_infra.rst:54
msgid ""
"The design of the Relay pass infra is largely inspired by the the "
"hierarchical pass manager used in LLVM and the block-style containers "
"used in the popular deep learning frameworks. The major goals of the pass"
" infra include:"
msgstr ""

#: ../../dev/pass_infra.rst:58
msgid ""
"enabling better programmatic orchestration of optimizations. This allows "
"users to flexibly customize and build their own optimization pipelines."
msgstr ""

#: ../../dev/pass_infra.rst:61
msgid "providing a user-friendly way to debug optimization passes."
msgstr ""

#: ../../dev/pass_infra.rst:63
msgid ""
"alleviating developers from manually and respectively resolving the "
"dependencies between passes."
msgstr ""

#: ../../dev/pass_infra.rst:66
msgid ""
"simplifying the implementation of new passes for developers. For example,"
" we allow users to implement a pass in Python and let the pass infra "
"manipulate its execution."
msgstr ""

#: ../../dev/pass_infra.rst:71
msgid "The Design"
msgstr ""

#: ../../dev/pass_infra.rst:73
msgid ""
"We focus on ease of extension for users, making it possible for users to "
"quickly add new passes without loss of backward compatibility. The design"
" contains both the backend and the frontend. The former implements the "
"main logic of the pass infra. The latter provides simple APIs for users "
"to interact with, i.e., allowing users to quickly create their own "
"optimization pipelines."
msgstr ""

#: ../../dev/pass_infra.rst:80
msgid "C++ Backend"
msgstr ""

#: ../../dev/pass_infra.rst:82
msgid ""
"We provide a ``PassInfo`` object to contain the basic information needed "
"by a pass. ``name`` is the pass name, ``opt_level`` indicates at which "
"optimization level the pass will be enabled, and ``required`` represents "
"the passes that are required to execute a certain pass (see "
"`include/tvm/ir/transform.h`_ for more details). For example, during "
"registration of a pass (will be covered in later), the pass developers "
"can specify the name of the pass, the optimization level it will be "
"performed at, and/or the passes that are required. ``opt_level`` could be"
" used to help the pass infra identify if a certain pass needs to be "
"executed when running under a user-provided optimization level. The "
"``required`` field can be used by the pass infra to resolve pass "
"dependencies."
msgstr ""

#: ../../dev/pass_infra.rst:102 ../../dev/pass_infra.rst:403
msgid "PassContext"
msgstr ""

#: ../../dev/pass_infra.rst:104
msgid ""
"``PassContext`` carries useful information for an optimization pass. For "
"example, it contains the error reporting system so optimization authors "
"can provide diagnostics about why an optimization fails. ``PassContext`` "
"is also designed to replace the old ``BuildConfig`` which was used to "
"help users configure the compilation options, including optimization "
"level and required/disabled passes, etc. For instance, we may have a "
"configuration which performs all passes at ``opt_level=3`` with some "
"disabled passes using ``disabled_pass=xx`` provided by ``PassContext``. "
"Now we could glob all passes at ``opt_level=3`` and exclude those in the "
"disabled pass list."
msgstr ""

#: ../../dev/pass_infra.rst:114
msgid ""
"This class is designed for users to conveniently write the Python "
"``with`` syntax to perform optimizations under a certain configuration. "
"In addition, the users can obtain the context that is available within a "
"certain program scope in a thread-safe way through "
"``PassContext::Current()``, since a thread-local store "
"``PassContextThreadLocalStore`` is used to hold the created pass context "
"objects. Examples will be provided later to show how we can use both the "
"C++ and Python APIs to create a compilation pipeline using pass context."
msgstr ""

#: ../../dev/pass_infra.rst:163
msgid "Pass Constructs"
msgstr ""

#: ../../dev/pass_infra.rst:165
msgid ""
"The pass infra is designed in a hierarchical manner, and it could work at"
" different granularities of Relay/tir programs. A pure virtual class "
"``PassNode`` is introduced to serve as the base of the different "
"optimization passes. This class contains several virtual methods that "
"must be implemented by the subclasses at the level of modules, functions,"
" or sequences of passes."
msgstr ""

#: ../../dev/pass_infra.rst:179
msgid ""
"The functor shows how a pass must be realized, i.e. it always works on a "
":py:class:`IRModule` under a certain context. All passes are designed in "
"a ``Module`` to ``Module`` manner. Therefore, optimizations governed by "
"the pass infra will always update the whole module."
msgstr ""

#: ../../dev/pass_infra.rst:184
msgid ""
"Several subclasses have been created to implement different types of "
"optimization passes, e.g., function-level passes, module-level passes, "
"and sequential passes.  Each subclass itself could act as a pass manager."
" For instance, they could collect the required passes and execute them or"
" build a dependency graph based on the given metadata. The full "
"definition of them can be found in `src/relay/ir/transform.cc`_ and "
"`src/ir/transform.cc`_."
msgstr ""

#: ../../dev/pass_infra.rst:192
msgid "Module-Level Passes"
msgstr ""

#: ../../dev/pass_infra.rst:194
msgid ""
"Module level passes are geared mainly for global and inter-procedural "
"optimizations (IPO), which are similar to the module pass used in LLVM. "
"Some typical passes in Relay that need the global picture of a module, "
"such as A-normal form conversion and lambda lifting, etc., fall into this"
" set. At this level, users can even add and/or delete functions in a "
"module. Note that all passes"
msgstr ""

#: ../../dev/pass_infra.rst:210
msgid ""
"``pass_info`` maintains the information needed by a module-level pass. "
"``pass_func`` sketches the real optimization. For example, we may need to"
" perform dead code elimination on the module. We could implement the "
"algorithm in the ``pass_func`` and let it run on a module. It will then "
"remove the dead code including the unused functions in the module. Note "
"that this field is designed as a packed function, which enables the "
"implementation of the optimization in both C++ and Python."
msgstr ""

#: ../../dev/pass_infra.rst:219
msgid "Function-Level Passes"
msgstr ""

#: ../../dev/pass_infra.rst:221
msgid ""
"Function-level passes are used to implement various intra-function level "
"optimizations for a given Relay/tir module. It fetches one function at a "
"time from the function list of a module for optimization and yields a "
"rewritten Relay ``Function`` or tir ``PrimFunc``. Most of passes can be "
"classified into this category, such as common subexpression elimination "
"and inference simplification in Relay as well as vectorization and "
"flattening storage in tir, etc."
msgstr ""

#: ../../dev/pass_infra.rst:228
msgid ""
"Note that the scope of passes at this level is either a Relay function or"
" a tir primitive function. Therefore, we cannot add or delete a function "
"through these passes as they are not aware of the global information."
msgstr ""

#: ../../dev/pass_infra.rst:242
msgid ""
"``pass_info`` is identical to what we just described in the module pass. "
"``pass_func`` takes a function for optimization, it also needs a module "
"as we may use it for reporting errors. A function could be annotated with"
" \"SkipOptimization\" so that it will be ignored during optimization."
msgstr ""

#: ../../dev/pass_infra.rst:248
msgid "Sequential Passes"
msgstr ""

#: ../../dev/pass_infra.rst:250
msgid ""
"``SequentialPass`` is similar to Pytorch ``nn.Sequential`` that contains "
"a host of passes for execution."
msgstr ""

#: ../../dev/pass_infra.rst:263
msgid ""
"Only a few passes currently in Relay are put in this group. For example, "
"``FoldScaleAxis`` requires to dispatch ``ForwardFoldScaleAxis`` and "
"``BackwardFoldScaleAxis`` internally. In addition, "
"``BackwardFoldScaleAxis`` is recommended to be fulfilled first. This "
"pass, hence, is an ideal candidate for ``SequentialPass``."
msgstr ""

#: ../../dev/pass_infra.rst:269
msgid ""
"The following code shows how individual passes in a sequential pass are "
"invoked. Essentially, we sequentially execute each pass in a sequential "
"pass using the order that they were appended to the pass list."
msgstr ""

#: ../../dev/pass_infra.rst:292
msgid ""
"Upon the invocation of a pass, we first check if this pass is enabled. "
"This is done by first checking if the pass is explicitly disabled by a "
"user, followed by inspecting if it is specified as a required pass by the"
" user. If it is still undetermined whether this pass is enabled, its "
"``opt_level`` will be checked. This pass will be enabled and therefore "
"executed only when its optimization level is not less than the configured"
" optimization level in the pass context."
msgstr ""

#: ../../dev/pass_infra.rst:299
msgid ""
"To execute the pass, we need first to retrieve the registered pass in the"
" TVM packed function registry using the pass name. This is possible "
"because every pass is registered with an API endpoint as we will show "
"later."
msgstr ""

#: ../../dev/pass_infra.rst:314
msgid ""
"Some helper functions are provided to create each type of these "
"aforementioned passes. These helpers are also exposed to the Python "
"frontend for users to favorably use Python APIs to create a specific pass"
" object."
msgstr ""

#: ../../dev/pass_infra.rst:341
msgid "Pass Registration"
msgstr ""

#: ../../dev/pass_infra.rst:343
msgid ""
"We've covered the concept of different level of passes and the context "
"used for compilation. It would be interesting to see how easily users can"
" register a pass.  Let's take const folding as an example. This pass has "
"already been implemented to fold constants in a Relay function (found in "
"`src/relay/pass/fold_constant.cc`_)."
msgstr ""

#: ../../dev/pass_infra.rst:349
msgid "An API was provided to perform the ``Expr`` to ``Expr`` transformation."
msgstr ""

#: ../../dev/pass_infra.rst:355
msgid ""
"In order to register this pass to the pass infra, we first need to decide"
" at which level this pass will be performed. As const folding happens on "
"individual functions, we should intuitively create a ``FunctionPass`` for"
" it through ``CreateFunctionPass``. The ``pass_func`` is returned as a "
"packed function that invokes the ``Expr`` to ``Expr`` API on each "
"function in a `IRModule`. ``{}`` indicates that no prerequisite is "
"required for this pass. Otherwise, the pass developer has to identify and"
" list them."
msgstr ""

#: ../../dev/pass_infra.rst:363
msgid ""
"Meanwhile, a pass API endpoint is registered with the name "
"``relay._transform.FoldConstant``. This pass, therefore, becomes an entry"
" in the registry that can be accessed by both C++ (e.g. the ``GetPass`` "
"above) and Python when needed."
msgstr ""

#: ../../dev/pass_infra.rst:385
msgid ""
"To allow other C++ modules to apply this pass, we declare a free function"
" in `include/tvm/relay/transform.h`_ as the following:"
msgstr ""

#: ../../dev/pass_infra.rst:393
msgid "Python Frontend"
msgstr ""

#: ../../dev/pass_infra.rst:395
msgid ""
"Only some simple APIs are needed for the frontend side. For example, we "
"can provide users the following APIs to create and execute a pass (full "
"implementation is provided in `python/tvm/relay/transform.py`_ and "
"`python/tvm/ir/transform.py`_). The backend receives the information and "
"decides which function it should use to create a Pass object."
msgstr ""

#: ../../dev/pass_infra.rst:405
msgid ""
"Python frontend provides a wrapper for the ``PassContext`` to enable the "
"``with`` syntax by overriding ``__enter__`` and ``__exit__``. A "
"``current`` static method is offered for users to get the context that is"
" in use under a certain scope."
msgstr ""

#: ../../dev/pass_infra.rst:426
msgid ""
"A ``PassContext`` is used to configure the compilation options, including"
" the optimization level and required/disabled passes. It can also take a "
"dictionary of configs so that different passes can conveniently fetch the"
" passed data, such as fallback device info and step/depth for loop "
"unrolling, etc. In order to enable fetching the required config, the key "
"must be registered through ``TVM_REGISTER_PASS_CONFIG_OPTION``. For "
"example, the following is used by the loop unrolling pass"
msgstr ""

#: ../../dev/pass_infra.rst:438
msgid "Please refer to `src/tir/transforms/unroll_loop.cc`_ for more details."
msgstr ""

#: ../../dev/pass_infra.rst:441
msgid "Pass Objects"
msgstr ""

#: ../../dev/pass_infra.rst:443
msgid ""
"``Pass`` is the base class of all pass objects. All methods here are just"
" simple wrappers that were implemented in the backend. They are defined "
"for users to conveniently interact with the base class in Python. Only a "
"``__call__`` is defined in the pass base class to make the subclasses as "
"callable objects so that they can be invoked easily (e.g., "
"``pass_xx(arg)``) for execution."
msgstr ""

#: ../../dev/pass_infra.rst:456
msgid ""
"Some auxiliary APIs are provided to enable easy creation of passes from "
"the Python frontend and to let the pass infra control the execution. For "
"example, ``module_pass``, ``function_pass``, and ``sequential`` are "
"provided to users so that they can customize their own pass or pass "
"pipeline."
msgstr ""

#: ../../dev/pass_infra.rst:461
msgid ""
"For all the passes that are implemented in the C++ backend, we provide "
"corresponding Python APIs in `python/tvm/ir/transform.py`_ and "
"`python/tvm/relay/transform.py`_, respectively. For instance, const "
"folding has a Python API like the following:"
msgstr ""

#: ../../dev/pass_infra.rst:471
msgid "Users can build a pass through decoration like the following:"
msgstr ""

#: ../../dev/pass_infra.rst:489
msgid ""
"The ``transform`` function here adds an ``abs`` function to the input "
"module, but it could be any customized optimizations at the module level."
" After creating this ``module_pass``, users can apply it on any Relay "
"module. For example, we can build an empty module and apply this pass to "
"add an ``abs`` function."
msgstr ""

#: ../../dev/pass_infra.rst:500
msgid ""
"Correspondingly, we also offer such functionality for ``function_pass``. "
"For instance, an example function-level pass could be written as the "
"following:"
msgstr ""

#: ../../dev/pass_infra.rst:524
msgid ""
"Alternatively, users can also directly register a pass without using the "
"decorators and then invoke it. For more examples about how to customize "
"your own optimization pipeline and debug Relay and tir passes, please "
"refer to the `use pass infra`_ tutorial."
msgstr ""

