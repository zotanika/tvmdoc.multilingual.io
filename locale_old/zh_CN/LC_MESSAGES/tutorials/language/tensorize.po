# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, Apache Software Foundation
# This file is distributed under the same license as the tvm package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: tvm 0.8.dev0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-04 20:34+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../../tutorials/language/tensorize.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_tutorials_language_tensorize.py>` to "
"download the full example code"
msgstr ""

#: ../../tutorials/language/tensorize.rst:24
msgid "Use Tensorize to Leverage Hardware Intrinsics"
msgstr ""

#: ../../tutorials/language/tensorize.rst:25
msgid "**Author**: `Yizhi Liu <https://github.com/yzhliu>`_"
msgstr ""

#: ../../tutorials/language/tensorize.rst:27
msgid "This is an introduction material on how to perform tensorization in TVM."
msgstr ""

#: ../../tutorials/language/tensorize.rst:29
msgid ""
"By using schedule primitive :code:`tensorize`, people can replace a unit "
"of computation with the corresponding intrinsics, making it easy to "
"leverage handcrafted micro-kernels, as well as extend TVM to support new "
"hardware architectures."
msgstr ""

#: ../../tutorials/language/tensorize.rst:34
msgid ""
"The purpose of this tutorial is to show the functionality and usage of "
"tensorize instead of providing an efficient solution."
msgstr ""

#: ../../tutorials/language/tensorize.rst:57
msgid "Define Matrix Multiplication"
msgstr ""

#: ../../tutorials/language/tensorize.rst:58
msgid ""
"Take matrix multiplication as our example. Matmul first multiply the "
"corresponding elements between two matrix, then accumulate across a "
"certain axis. The following lines describe the computation :code:`A * "
"B^T` in TVM."
msgstr ""

#: ../../tutorials/language/tensorize.rst:82
#: ../../tutorials/language/tensorize.rst:135
#: ../../tutorials/language/tensorize.rst:260
msgid "Out:"
msgstr ""

#: ../../tutorials/language/tensorize.rst:110
msgid "Schedule the Matmul"
msgstr ""

#: ../../tutorials/language/tensorize.rst:111
msgid ""
"Now, suppose we have an accelerator that supports matrix-vector "
"multiplication (GEMV) as a hardware primitive, which can take arbitrary "
"size of reduce axis, but another axis needs to be no larger than 16. Thus"
" we break down the matmul loops to make the innermost loops a (16x64) "
"GEMV."
msgstr ""

#: ../../tutorials/language/tensorize.rst:164
msgid ""
"As showed in the IR printed above, the inner loops :code:`j.inner` along "
"with :code:`k` together form a computation of GEMV - within the inner "
"most two loops, the index :code:`i` is fixed, the access to the matrix "
":code:`A` only varies by :code:`k`, which makes the access pattern of "
":code:`A` a \"vector\". In order to leverage our hypothetical hardware's "
"GEMV instruction, we can tensorize over :code:`j.inner`."
msgstr ""

#: ../../tutorials/language/tensorize.rst:173
msgid "Define GEMV Tensorization Intrinsic"
msgstr ""

#: ../../tutorials/language/tensorize.rst:174
msgid ""
"Before scheduling the tensorization, we need to first define the "
"intrinsic function for GEMV. It includes two parts, the first is a "
"compute definition of GEMV. TVM uses it to match the computing pattern in"
" the original Matmul schedule. The second is to specify how to execute "
"GEMV on the device, which is done in :code:`intrin_func` below."
msgstr ""

#: ../../tutorials/language/tensorize.rst:224
msgid ""
"Here :code:`te.decl_tensor_intrin` declares how to execute the "
"computation :code:`c.op`. Our implementation simply takes the inputs and "
"outputs, converts them to pointers and emit an external function call. "
"Note that tensorization requires user to specify :code:`offset_factor`, "
"with this information, TVM has knowledge of whether the data is aligned "
"between the start address of the original data structure and the offset "
"being passed to tensorize, so that it has chance to optimize with "
"vectorized loading. We set the factor to 1 for simplification."
msgstr ""

#: ../../tutorials/language/tensorize.rst:234
msgid ""
"Buffers are also declared for inputs and outputs, though this is not "
"required, we benefit from the extra information provided by buffers. For "
"example, we pass :code:`bb.strides[0]` as an argument to the external "
"function :code:`gemv_update`. For now :code:`bb.strides[0] == l`, but "
"later we will see how they can differ with more complicated schedules."
msgstr ""

#: ../../tutorials/language/tensorize.rst:240
msgid ""
"Note that we use :code:`te.var(\"s1\")` as the first stride dimension for"
" :code:`B`. If the strides can be inferred - in this case, TVM knows "
"tensor B is compact thus the strides are :code:`[L, 1]` - such "
"placeholder can be put to let TVM automatically bind the inferred value "
"for us."
msgstr ""

#: ../../tutorials/language/tensorize.rst:284
msgid ""
"By tensorizing over :code:`yi`, the inner most two loops are now replaced"
" by the intrinsic function we defined before. In order to build and run "
"the module, let's define the external function :code:`gemv_update`, it is"
" a naive implementation of GEMV, just for demonstration."
msgstr ""

#: ../../tutorials/language/tensorize.rst:323
msgid ""
"Now we leverage the pragma attribute :code:`import_llvm` to import llvm "
"asm inline. The importing needs to happen before the tensorized GEMV "
"being executed."
msgstr ""

#: ../../tutorials/language/tensorize.rst:356
msgid ""
"Finally we compare the tensorize version with that :code:`numpy.dot` "
"produces, ensure our implementation is correct."
msgstr ""

#: ../../tutorials/language/tensorize.rst:380
msgid "Reduce-update for Tensorize"
msgstr ""

#: ../../tutorials/language/tensorize.rst:381
msgid ""
"So far you have learned the basic idea of tensorize, now let's move one "
"step forward to a more complicated case."
msgstr ""

#: ../../tutorials/language/tensorize.rst:384
msgid ""
"Assume our accelerator could only multiply a vector by a square matrix, "
"in which the vector size needs to be no larger than 16. Given such "
"hardware constrain, now we need to split the reduce axis as following,"
msgstr ""

#: ../../tutorials/language/tensorize.rst:399
msgid ""
"However, since the tensorize intrinsic now only covers a part of the "
"reduce axis, instead of using one \"body\" function, TVM requires a "
":code:`reduce_reset` function, which will be invoked before the reduce "
"for-loop, and a :code:`reduce_update` function, which defines the "
"\"update\" computing strategy."
msgstr ""

#: ../../tutorials/language/tensorize.rst:480
msgid ""
"Note that :code:`intrin_func` now returns a triplet: :code:`(body, "
"reduce_reset, reduce_update)`. If tensorization includes all the reduce "
"axes, function :code:`body()` will be invoked, otherwise "
":code:`reduce_reset()` and :code:`reduce_update()` together will be used."
" In our example :code:`body()` and :code:`reduce_update()` share the same"
" implementation, while in other cases, hardware may have different "
"instructions for these two functions. Moreover, we can see now "
":code:`bb.strides[0]` is different from :code:`l` due to the tiling."
msgstr ""

#: ../../tutorials/language/tensorize.rst:490
msgid "Tensorize for squared GEMV, build and check the results,"
msgstr ""

#: ../../tutorials/language/tensorize.rst:512
msgid "Summary"
msgstr ""

#: ../../tutorials/language/tensorize.rst:513
msgid ""
"This tutorial demonstrates the usage of tensorize intrinsic in TVM. "
"Tensorize provides a way for users to get fully optimized schedule via "
"micro-kernels. For example, INT8 quantization on Intel CPUs uses "
"tensorization to invoke AVX instruction directly. It also enables TVM to "
"compile to ASICs - checkout :ref:`vta-index` for details. We also "
"demonstrates how to use inline assembly importing, which helps users "
"inject asm easily into the schedule."
msgstr ""

#: ../../tutorials/language/tensorize.rst:536
msgid ":download:`Download Python source code: tensorize.py <tensorize.py>`"
msgstr ""

#: ../../tutorials/language/tensorize.rst:542
msgid ":download:`Download Jupyter notebook: tensorize.ipynb <tensorize.ipynb>`"
msgstr ""

#: ../../tutorials/language/tensorize.rst:549
msgid "`Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_"
msgstr ""

