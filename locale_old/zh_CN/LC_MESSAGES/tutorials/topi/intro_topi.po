# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, Apache Software Foundation
# This file is distributed under the same license as the tvm package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: tvm 0.8.dev0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-04 20:34+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../../tutorials/topi/intro_topi.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_tutorials_topi_intro_topi.py>` to "
"download the full example code"
msgstr ""

#: ../../tutorials/topi/intro_topi.rst:22
msgid "Introduction to TOPI"
msgstr ""

#: ../../tutorials/topi/intro_topi.rst:23
msgid "**Author**: `Ehsan M. Kermani <https://github.com/ehsanmok>`_"
msgstr ""

#: ../../tutorials/topi/intro_topi.rst:25
msgid ""
"This is an introductory tutorial to TVM Operator Inventory (TOPI). TOPI "
"provides numpy-style generic operations and schedules with higher "
"abstractions than TVM. In this tutorial, we will see how TOPI can save us"
" from writing boilerplates code in TVM."
msgstr ""

#: ../../tutorials/topi/intro_topi.rst:51
msgid "Basic example"
msgstr ""

#: ../../tutorials/topi/intro_topi.rst:52
msgid ""
"Let's revisit the sum of rows operation (equivalent to :code:`B = "
"numpy.sum(A, axis=1)`') \\ To compute the sum of rows of a two "
"dimensional TVM tensor A, we should specify the symbolic operation as "
"well as schedule as follows"
msgstr ""

#: ../../tutorials/topi/intro_topi.rst:77
msgid "and to examine the IR code in human readable format, we can do"
msgstr ""

#: ../../tutorials/topi/intro_topi.rst:92
#: ../../tutorials/topi/intro_topi.rst:136
#: ../../tutorials/topi/intro_topi.rst:216
#: ../../tutorials/topi/intro_topi.rst:268
msgid "Out:"
msgstr ""

#: ../../tutorials/topi/intro_topi.rst:117
msgid ""
"However, for such a common operation we had to define the reduce axis "
"ourselves as well as explicit computation with :code:`te.compute`. "
"Imagine for more complicated operations how much details we need to "
"provide. Fortunately, we can replace those two lines with simple "
":code:`topi.sum` much like :code:`numpy.sum`"
msgstr ""

#: ../../tutorials/topi/intro_topi.rst:162
msgid "Numpy-style operator overloading"
msgstr ""

#: ../../tutorials/topi/intro_topi.rst:163
msgid ""
"We can add two tensors using :code:`topi.broadcast_add` that have correct"
" (broadcastable with specific) shapes. Even shorter, TOPI provides "
"operator overloading for such common operations. For example,"
msgstr ""

#: ../../tutorials/topi/intro_topi.rst:186
msgid ""
"Overloaded with the same syntax, TOPI handles broadcasting a primitive "
"(`int`, `float`) to a tensor :code:`d - 3.14`."
msgstr ""

#: ../../tutorials/topi/intro_topi.rst:191
msgid "Generic schedules and fusing operations"
msgstr ""

#: ../../tutorials/topi/intro_topi.rst:192
msgid ""
"Up to now, we have seen an example of how TOPI can save us from writing "
"explicit computations in lower level API. But it doesn't stop here. Still"
" we did the scheduling as before. TOPI also provides higher level "
"scheduling recipes depending on a given context. For example, for CUDA, "
"we can schedule the following series of operations ending with "
":code:`topi.sum` using only :code:`topi.generic.schedule_reduce`"
msgstr ""

#: ../../tutorials/topi/intro_topi.rst:253
msgid ""
"As you can see, scheduled stages of computation have been accumulated and"
" we can examine them by"
msgstr ""

#: ../../tutorials/topi/intro_topi.rst:279
msgid ""
"We can test the correctness by comparing with :code:`numpy` result as "
"follows"
msgstr ""

#: ../../tutorials/topi/intro_topi.rst:333
msgid ""
"TOPI also provides common neural nets operations such as _softmax_ with "
"optimized schedule"
msgstr ""

#: ../../tutorials/topi/intro_topi.rst:350
msgid "Fusing convolutions"
msgstr ""

#: ../../tutorials/topi/intro_topi.rst:351
msgid "We can fuse :code:`topi.nn.conv2d` and :code:`topi.nn.relu` together."
msgstr ""

#: ../../tutorials/topi/intro_topi.rst:355
msgid ""
"TOPI functions are all generic functions. They have different "
"implementations for different backends to optimize for performance. For "
"each backend, it is necessary to call them under a target scope for both "
"compute declaration and schedule. TVM will choose the right function to "
"call with the target information."
msgstr ""

#: ../../tutorials/topi/intro_topi.rst:379
msgid "Summary"
msgstr ""

#: ../../tutorials/topi/intro_topi.rst:380
msgid "In this tutorial, we have seen"
msgstr ""

#: ../../tutorials/topi/intro_topi.rst:382
msgid "How to use TOPI API for common operations with numpy-style operators."
msgstr ""

#: ../../tutorials/topi/intro_topi.rst:383
msgid ""
"How TOPI facilitates generic schedules and operator fusion for a context,"
" to generate optimized kernel codes."
msgstr ""

#: ../../tutorials/topi/intro_topi.rst:398
msgid ":download:`Download Python source code: intro_topi.py <intro_topi.py>`"
msgstr ""

#: ../../tutorials/topi/intro_topi.rst:404
msgid ":download:`Download Jupyter notebook: intro_topi.ipynb <intro_topi.ipynb>`"
msgstr ""

#: ../../tutorials/topi/intro_topi.rst:411
msgid "`Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_"
msgstr ""

