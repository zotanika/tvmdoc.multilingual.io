# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, Apache Software Foundation
# This file is distributed under the same license as the tvm package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: tvm 0.8.dev0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-04 20:34+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../../contribute/code_review.rst:21
msgid "Perform Code Reviews"
msgstr ""

#: ../../contribute/code_review.rst:23
msgid ""
"This is a general guideline for code reviewers. First of all, while it is"
" great to add new features to a project, we must also be aware that each "
"line of code we introduce also brings **technical debt** that we may have"
" to eventually pay."
msgstr ""

#: ../../contribute/code_review.rst:25
msgid ""
"Open source code is maintained by a community with diverse background, "
"and hence it is even more important to provide clear, documented and "
"maintainable code. Code reviews are a shepherding process to spot "
"potential problems, improve quality of the code. We should, however, not "
"rely on the code review process to get the code into a ready state. "
"Contributors are encouraged to polish the code to a ready state before "
"requesting reviews. This is especially expected for code owner and "
"committer candidates."
msgstr ""

#: ../../contribute/code_review.rst:27
msgid ""
"Here are some checklists for code reviews, it is also helpful reference "
"for contributors."
msgstr ""

#: ../../contribute/code_review.rst:32
msgid "Hold the Highest Standard"
msgstr ""

#: ../../contribute/code_review.rst:33
msgid ""
"The first rule for code reviewers is to always keep the highest standard,"
" and do not approve code just to \"be friendly\". Good, informative "
"critics each other learn and prevent technical debt in early stages."
msgstr ""

#: ../../contribute/code_review.rst:36
msgid "Deliberate on API and Data Structures"
msgstr ""

#: ../../contribute/code_review.rst:37
msgid ""
"A minimum and stable API is critical to the project’s life. A good API "
"makes a huge difference. Always think very carefully about all the "
"aspects including naming, argument definitions and behavior."
msgstr ""

#: ../../contribute/code_review.rst:39
msgid ""
"When possible, pay more attention still to the proposed API design during"
" code reviews. Remember, it is easier to improve code implementation, but"
" it is extremely hard to change an API once accepted. We should treat "
"data structures that are shared across modules(e.g. AST) in the same way."
" If/when uncertain, start a conversation with more developers before "
"committing."
msgstr ""

#: ../../contribute/code_review.rst:44
msgid "Here are some useful principles for designing APIs:"
msgstr ""

#: ../../contribute/code_review.rst:46
msgid ""
"Be consistent with existing well-known package’s APIs if the features "
"overlap. For example, tensor operation APIs should always be consistent "
"with the numpy API."
msgstr ""

#: ../../contribute/code_review.rst:48
msgid ""
"Be consistent with existing APIs in the same project. For example, we "
"should use the same argument ordering across all the optimization passes,"
" so there is no \"surprise\" when using them."
msgstr ""

#: ../../contribute/code_review.rst:51
msgid ""
"Think about whether the API will change in the future. For example, we "
"will have more options like loop_unrolling and device placement policy as"
" we add more optimizations in build. We can package optimization knobs "
"into a build configuration object. In this way, the build API is stable "
"over time, even though it may be enriched."
msgstr ""

#: ../../contribute/code_review.rst:55
msgid ""
"Write documentation. Documentation is mandatory for APIs and sometimes "
"writing documents helps us to think further about the design as well as "
"whether we need to add further clarifications."
msgstr ""

#: ../../contribute/code_review.rst:57
msgid ""
"Minimum. Think about how many lines of code a user has to write to use "
"the API. Remove layers of abstraction when possible."
msgstr ""

#: ../../contribute/code_review.rst:62
msgid "Ensure Test Coverage"
msgstr ""

#: ../../contribute/code_review.rst:63
msgid ""
"Each new change of features should introduce test cases. Bug fixes should"
" include regression tests that prevent the problem from happening again."
msgstr ""

#: ../../contribute/code_review.rst:67
msgid "Documentation is Mandatory"
msgstr ""

#: ../../contribute/code_review.rst:68
msgid ""
"Documentation is often overlooked. When adding new functions or changing "
"an existing function, the documentation should be directly updated. A new"
" feature is meaningless without documentation to make it accessible. See "
"more at :ref:`doc_guide`"
msgstr ""

#: ../../contribute/code_review.rst:71
msgid "Minimum Dependency"
msgstr ""

#: ../../contribute/code_review.rst:72
msgid ""
"Always be cautious in introducing dependencies. While it is important to "
"reuse code and avoid reinventing the wheel, dependencies can increase "
"burden of users in deployment. A good design principle is that a feature "
"or function should only have a dependecy if/when a user actually use it."
msgstr ""

#: ../../contribute/code_review.rst:75
msgid "Ensure Readability"
msgstr ""

#: ../../contribute/code_review.rst:76
msgid ""
"While it is hard to implement a new feature, it is even harder to make "
"others understand and maintain the code you wrote. It is common for a PMC"
" or committer to not be able to understand certain contributions. In such"
" case, a reviewer should say \"I don’t understand\" and ask the "
"contributor to clarify. We highly encourage code comments which explain "
"the code logic along with the code."
msgstr ""

#: ../../contribute/code_review.rst:80
msgid "Concise Implementation"
msgstr ""

#: ../../contribute/code_review.rst:81
msgid ""
"Some basic principles applied here: favor vectorized array code over "
"loops, use existing APIs that solve the problem."
msgstr ""

#: ../../contribute/code_review.rst:84
msgid "Document Lessons in Code Reviews"
msgstr ""

#: ../../contribute/code_review.rst:85
msgid ""
"When you find there are some common or recurring lessons that can be "
"summarized, add it to the :ref:`code_guide`. It is always good to refer "
"to the guideline document when requesting changes, so the lessons can be "
"shared to all the community."
msgstr ""

#: ../../contribute/code_review.rst:91
msgid "Respect each other"
msgstr ""

#: ../../contribute/code_review.rst:92
msgid ""
"The code reviewers and contributors are paying the most precious currency"
" in the world -- time. We are volunteers in the community to spend the "
"time to build good code, help each other, learn and have fun hacking."
msgstr ""

#: ../../contribute/code_review.rst:95
msgid "Learn from other Code Reviews"
msgstr ""

#: ../../contribute/code_review.rst:96
msgid ""
"There can be multiple reviewers reviewing the same changes. Many times "
"other reviewers may spot things you did not find. Try to learn from other"
" code reviews, when possible, document these lessons."
msgstr ""

#: ../../contribute/code_review.rst:100
msgid "Approve and Request Changes Explicitly"
msgstr ""

#: ../../contribute/code_review.rst:101
msgid ""
"The contributor and code owner can request code reviews from multiple "
"reviewers. Remember to approve changes when your comments are addressed "
"in a code review. To do so -- please click on changes tab in the pull "
"request, then select approve, or comment on the code and click request "
"changes. Code owner can decide if the code can be merged in case by case "
"if some of the reviewers did not respond in time(e.g. a week) and "
"existing reviews are sufficient."
msgstr ""

