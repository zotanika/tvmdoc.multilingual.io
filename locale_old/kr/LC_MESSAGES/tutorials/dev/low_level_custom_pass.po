# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, Apache Software Foundation
# This file is distributed under the same license as the tvm package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: tvm 0.8.dev0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-04 20:34+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../../tutorials/dev/low_level_custom_pass.rst:13
msgid ""
"Click :ref:`here "
"<sphx_glr_download_tutorials_dev_low_level_custom_pass.py>` to download "
"the full example code"
msgstr ""

#: ../../tutorials/dev/low_level_custom_pass.rst:22
msgid "Writing a Customized Pass"
msgstr ""

#: ../../tutorials/dev/low_level_custom_pass.rst:23
msgid "**Author**: `Jian Weng <https://were.github.io>`_"
msgstr ""

#: ../../tutorials/dev/low_level_custom_pass.rst:25
msgid ""
"TVM is a framework that abstracts away the heterogenity of machine "
"learning accelerators. Sometimes users may want customize some analysis "
"and IR transformations to adapt TVM to their own specialized hardware. "
"This tutorial helps users write a customized pass in TVM."
msgstr ""

#: ../../tutorials/dev/low_level_custom_pass.rst:31
msgid "Prerequisites"
msgstr ""

#: ../../tutorials/dev/low_level_custom_pass.rst:33
msgid ""
"Before reading this tutorial, we assume readers have already known these "
"topics well:"
msgstr ""

#: ../../tutorials/dev/low_level_custom_pass.rst:35
msgid ""
"Writing an algorithm in TVM and schedule it. Otherwise, see example "
"tutorials like :ref:`opt-gemm`."
msgstr ""

#: ../../tutorials/dev/low_level_custom_pass.rst:37
msgid ""
"The basic structure of HalideIR. Otherwise, see ``HalideIR/src/ir/IR.h`` "
"to learn what attributes of IR nodes are defined."
msgstr ""

#: ../../tutorials/dev/low_level_custom_pass.rst:39
msgid ""
"Visitor design pattern. Otherwise, check the `Python AST module "
"<https://docs.python.org/3/library/ast.html>`_ to see how an AST visitor "
"is implemented."
msgstr ""

#: ../../tutorials/dev/low_level_custom_pass.rst:42
msgid ""
"How a Schedule is lowered to either an IRModule class or a LLVM module. "
"Otherwise, take a look at ``python/tvm/build_module.py`` to get some "
"basics."
msgstr ""

#: ../../tutorials/dev/low_level_custom_pass.rst:62
msgid ""
"We first write a very simple vector add and build it with the default "
"schedule. Then, we use our customized lowering pass to manipulate the IR "
"directly instead of using schedule primitives."
msgstr ""

#: ../../tutorials/dev/low_level_custom_pass.rst:86
#: ../../tutorials/dev/low_level_custom_pass.rst:247
msgid "Out:"
msgstr ""

#: ../../tutorials/dev/low_level_custom_pass.rst:109
msgid "Writing a Pass"
msgstr ""

#: ../../tutorials/dev/low_level_custom_pass.rst:110
msgid ""
"Essentially, an \"IR transformation pass\" is a function which maps a "
"statement to a new statement. Thus, we define this vectorize function and"
" implement it step by step."
msgstr ""

#: ../../tutorials/dev/low_level_custom_pass.rst:116
msgid "TVM already provides two class for users to both analyze and transform IR."
msgstr ""

#: ../../tutorials/dev/low_level_custom_pass.rst:119
msgid "IR Visitor"
msgstr ""

#: ../../tutorials/dev/low_level_custom_pass.rst:120
msgid ""
"We can use ``tvm.tir.stmt_functor.post_order_visit(stmt, func)`` to "
"gather information from the Halide IR. ``func`` is a function callback. "
"This function will be called before exiting the current IR node, i.e. "
"post-order visit. Then we leverage side effects to store the result of IR"
" visit, because the return value of ``func`` will be ignored."
msgstr ""

#: ../../tutorials/dev/low_level_custom_pass.rst:127
msgid ""
"You MUST use some array to store the result of IR visit. Even the value "
"is a single variable. This is mainly due to the constraints in the "
"Python-C runtime. The variable values will be refreshed every recursion "
"but the array values will be preserved."
msgstr ""

#: ../../tutorials/dev/low_level_custom_pass.rst:158
msgid "IR Transformation"
msgstr ""

#: ../../tutorials/dev/low_level_custom_pass.rst:159
msgid ""
"The transformation interface is slightly different from the visitor "
"interface. There is only a post-order callback in the visitor, but "
"transformation visitor supports both a pre-order and a post-order "
"callback. If you want to keep the origin IR node, just return None. If "
"you want to change the current node to some node, use TVM IR maker "
"interface to build it and return this value."
msgstr ""

#: ../../tutorials/dev/low_level_custom_pass.rst:167
msgid ""
"If the pre-order function is called and returns a value which is not "
"None, the post-order function will be skipped."
msgstr ""

#: ../../tutorials/dev/low_level_custom_pass.rst:214
msgid "Glue to Lowering"
msgstr ""

#: ../../tutorials/dev/low_level_custom_pass.rst:215
msgid ""
"So far, we are done with writing this IR transformation pass. What we "
"need to do next is to glue this pass to TVM's lower pass."
msgstr ""

#: ../../tutorials/dev/low_level_custom_pass.rst:218
msgid ""
"In this case, we inject the pass written above into the TVM standard "
"lowering pass by feeding **a list of tuple** as argument to "
"``tir.add_lower_pass``. \"Tuple\" indicates different phases of lowering."
" In TVM, there are four phases of lowering and user-customized ones will "
"be called after each phase is done."
msgstr ""

#: ../../tutorials/dev/low_level_custom_pass.rst:227
msgid "Here are the essential transformations done by each phase:"
msgstr ""

#: ../../tutorials/dev/low_level_custom_pass.rst:225
msgid "Phase 0 generates the raw IR and loop levels."
msgstr ""

#: ../../tutorials/dev/low_level_custom_pass.rst:226
msgid "Phase 1 flattens the array storage."
msgstr ""

#: ../../tutorials/dev/low_level_custom_pass.rst:227
msgid "Phase 2 transforms loops, like unroll, vectorization and thread-binding."
msgstr ""

#: ../../tutorials/dev/low_level_custom_pass.rst:228
msgid "Phase 3 does some cleanup work."
msgstr ""

#: ../../tutorials/dev/low_level_custom_pass.rst:230
msgid "Thus, a good place to put this transformation pass is just after Phase 1."
msgstr ""

#: ../../tutorials/dev/low_level_custom_pass.rst:270
msgid "Quick View"
msgstr ""

#: ../../tutorials/dev/low_level_custom_pass.rst:271
msgid ""
"This tutorial gives a quick view of writing a customized IR "
"transformation pass: - Use ``tvm.tir.stmt_functor.post_order_visit`` to "
"gather information on each IR nodes. - Use "
"``tvm.tir.stmt_functor.ir_transform`` to transform IR nodes. - Wrap up "
"two above to write an IR-transformation function. - Use "
"``tvm.transform.PassContext`` to put this function to TVM lowering pass"
msgstr ""

#: ../../tutorials/dev/low_level_custom_pass.rst:291
msgid ""
":download:`Download Python source code: low_level_custom_pass.py "
"<low_level_custom_pass.py>`"
msgstr ""

#: ../../tutorials/dev/low_level_custom_pass.rst:297
msgid ""
":download:`Download Jupyter notebook: low_level_custom_pass.ipynb "
"<low_level_custom_pass.ipynb>`"
msgstr ""

#: ../../tutorials/dev/low_level_custom_pass.rst:304
msgid "`Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_"
msgstr ""

