# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020 - 2021, Apache Software Foundation
# This file is distributed under the same license as the tvm package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: tvm 0.8.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-02-06 10:20+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../_staging/contribute/code_guide.rst:21
msgid "Code Guide and Tips"
msgstr ""

#: ../../_staging/contribute/code_guide.rst:23
msgid ""
"This is a document used to record tips in TVM codebase for reviewers and "
"contributors. Most of them are summarized through lessons during the "
"contributing and process."
msgstr ""

#: ../../_staging/contribute/code_guide.rst:28
msgid "C++ Code Styles"
msgstr ""

#: ../../_staging/contribute/code_guide.rst:29
msgid "Use the Google C/C++ style."
msgstr ""

#: ../../_staging/contribute/code_guide.rst:30
msgid "The public facing functions are documented in doxygen format."
msgstr ""

#: ../../_staging/contribute/code_guide.rst:31
msgid "Favor concrete type declaration over ``auto`` as long as it is short."
msgstr ""

#: ../../_staging/contribute/code_guide.rst:32
msgid ""
"Favor passing by const reference (e.g. ``const Expr&``) over passing by "
"value. Except when the function consumes the value by copy constructor or"
" move, pass by value is better than pass by const reference in such "
"cases."
msgstr ""

#: ../../_staging/contribute/code_guide.rst:35
msgid "Favor ``const`` member function when possible."
msgstr ""

#: ../../_staging/contribute/code_guide.rst:37
msgid ""
"We use `clang-format` to enforce the code style. Because different "
"version of clang-format might change by its version, it is recommended to"
" use the same version of the clang-format as the main one. You can also "
"use the following command via docker."
msgstr ""

#: ../../_staging/contribute/code_guide.rst:47
msgid ""
"clang-format is also not perfect, when necessary, you can use disble "
"clang-format on certain code regions."
msgstr ""

#: ../../_staging/contribute/code_guide.rst:58
msgid ""
"Because clang-format may not recognize macros, it is recommended to use "
"macro like normal function styles."
msgstr ""

#: ../../_staging/contribute/code_guide.rst:79
msgid "Python Code Styles"
msgstr ""

#: ../../_staging/contribute/code_guide.rst:80
msgid ""
"The functions and classes are documented in `numpydoc "
"<https://numpydoc.readthedocs.io/en/latest/>`_ format."
msgstr ""

#: ../../_staging/contribute/code_guide.rst:81
msgid "Check your code style using ``make pylint``"
msgstr ""

#: ../../_staging/contribute/code_guide.rst:82
msgid "Stick to language features as in ``python 3.6``"
msgstr ""

#: ../../_staging/contribute/code_guide.rst:86
msgid "Writing Python Tests"
msgstr ""

#: ../../_staging/contribute/code_guide.rst:87
msgid ""
"We use `pytest <https://docs.pytest.org/en/stable/>`_ for all python "
"testing. ``tests/python`` contains all the tests."
msgstr ""

#: ../../_staging/contribute/code_guide.rst:89
msgid ""
"If you want your test to run over a variety of targets, use the "
":py:func:`tvm.testing.parametrize_targets` decorator. For example:"
msgstr ""

#: ../../_staging/contribute/code_guide.rst:97
msgid ""
"will run ``test_mytest`` with ``target=\"llvm\"``, ``target=\"cuda\"``, "
"and few others. This also ensures that your test is run on the correct "
"hardware by the CI. If you only want to test against a couple targets use"
" ``@tvm.testing.parametrize_targets(\"target_1\", \"target_2\")``. If you"
" want to test on a single target, use the associated decorator from "
":py:func:`tvm.testing`. For example, CUDA tests use the "
"``@tvm.testing.requires_cuda`` decorator."
msgstr ""

#: ../../_staging/contribute/code_guide.rst:100
msgid "Handle Integer Constant Expression"
msgstr ""

#: ../../_staging/contribute/code_guide.rst:101
msgid ""
"We often need to handle constant integer expressions in TVM. Before we do"
" so, the first question we want to ask is that is it really necessary to "
"get a constant integer. If symbolic expression also works and let the "
"logic flow, we should use symbolic expression as much as possible. So the"
" generated code works for shapes that are not known ahead of time."
msgstr ""

#: ../../_staging/contribute/code_guide.rst:103
msgid ""
"Note that in some cases we cannot know certain information, e.g. sign of "
"symbolic variable, it is ok to make assumptions in certain cases. While "
"adding precise support if the variable is constant."
msgstr ""

#: ../../_staging/contribute/code_guide.rst:105
msgid ""
"If we do have to get constant integer expression, we should get the "
"constant value using type ``int64_t`` instead of ``int``, to avoid "
"potential integer overflow. We can always reconstruct an integer with the"
" corresponding expression type via ``make_const``. The following code "
"gives an example."
msgstr ""

