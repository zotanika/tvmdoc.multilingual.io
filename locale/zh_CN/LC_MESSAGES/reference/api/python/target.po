# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020 - 2021, Apache Software Foundation
# This file is distributed under the same license as the tvm package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: tvm 0.8.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-02-06 10:20+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../_staging/reference/api/python/target.rst:19
msgid "tvm.target"
msgstr ""

#: of tvm.target:1
msgid "Target description and codgen module."
msgstr ""

#: of tvm.target:3
msgid "TVM's target string is in format ``<target_kind> [-option=value]...``."
msgstr ""

#: of tvm.target:7
msgid "The list of options include:"
msgstr ""

#: of tvm.target:9
msgid "**-device=<device name>**"
msgstr ""

#: of tvm.target:11
msgid "The device name."
msgstr ""

#: of tvm.target:13
msgid "**-mtriple=<target triple>**"
msgstr ""

#: of tvm.target:15
msgid "Specify the target triple, which is useful for cross compilation."
msgstr ""

#: of tvm.target:18
msgid "**-mcpu=<cpuname>**"
msgstr ""

#: of tvm.target:20
msgid ""
"Specify a specific chip in the current architecture to generate code for."
" By default this is infered from the target triple and autodetected to "
"the current architecture."
msgstr ""

#: of tvm.target:24
msgid "**-mattr=a1,+a2,-a3,...**"
msgstr ""

#: of tvm.target:26
msgid ""
"Override or control specific attributes of the target, such as whether "
"SIMD operations are enabled or not. The default set of attributes is set "
"by the current CPU."
msgstr ""

#: of tvm.target:30
msgid "**-mabi=<abi>**"
msgstr ""

#: of tvm.target:32
msgid "Generate code for the specified ABI, for example \"lp64d\"."
msgstr ""

#: of tvm.target:34
msgid "**-system-lib**"
msgstr ""

#: of tvm.target:36
msgid ""
"Build TVM system library module. System lib is a global module that "
"contains self registered functions in program startup. User can get the "
"module using :any:`tvm.runtime.system_lib`. It is useful in environments "
"where dynamic loading api like dlopen is banned. The system lib will be "
"available as long as the result code is linked by the program."
msgstr ""

#: of tvm.target:42
msgid ""
"We can use :py:func:`tvm.target.Target` to create a tvm.target.Target "
"from the target string. We can also use other specific function in this "
"module to create specific targets."
msgstr ""

#: of tvm.target:1
msgid "**Classes:**"
msgstr ""

#: of tvm.target:1:<autosummary>:1
msgid ":py:obj:`Target <tvm.target.Target>`\\ \\(target\\[\\, host\\]\\)"
msgstr ""

#: of tvm.target.target.Target:1 tvm.target:1:<autosummary>:1
msgid "Target device information, use through TVM API."
msgstr ""

#: of tvm.target:1:<autosummary>:1
msgid ":py:obj:`GenericFunc <tvm.target.GenericFunc>`\\ \\(\\)"
msgstr ""

#: of tvm.target:1:<autosummary>:1
msgid "GenericFunc node reference."
msgstr ""

#: of tvm.target:1
msgid "**Functions:**"
msgstr ""

#: of tvm.target.target.Target:1:<autosummary>:1
msgid ":py:obj:`create <tvm.target.create>`\\ \\(target\\)"
msgstr ""

#: of tvm.target.target.Target:1:<autosummary>:1
msgid "Deprecated."
msgstr ""

#: of tvm.target.target.Target:1:<autosummary>:1
msgid ":py:obj:`cuda <tvm.target.cuda>`\\ \\(\\[model\\, options\\]\\)"
msgstr ""

#: of tvm.target.target.Target:1:<autosummary>:1 tvm.target.target.cuda:1
msgid "Returns a cuda target."
msgstr ""

#: of tvm.target.target.Target:1:<autosummary>:1
msgid ":py:obj:`rocm <tvm.target.rocm>`\\ \\(\\[model\\, options\\]\\)"
msgstr ""

#: of tvm.target.target.Target:1:<autosummary>:1 tvm.target.target.rocm:1
msgid "Returns a ROCM target."
msgstr ""

#: of tvm.target.target.Target:1:<autosummary>:1
msgid ":py:obj:`mali <tvm.target.mali>`\\ \\(\\[model\\, options\\]\\)"
msgstr ""

#: of tvm.target.target.Target:1:<autosummary>:1 tvm.target.target.mali:1
msgid "Returns a ARM Mali GPU target."
msgstr ""

#: of tvm.target.target.Target:1:<autosummary>:1
msgid ""
":py:obj:`intel_graphics <tvm.target.intel_graphics>`\\ \\(\\[model\\, "
"options\\]\\)"
msgstr ""

#: of tvm.target.target.Target:1:<autosummary>:1
#: tvm.target.target.intel_graphics:1
msgid "Returns an Intel Graphics target."
msgstr ""

#: of tvm.target.target.Target:1:<autosummary>:1
msgid ":py:obj:`arm_cpu <tvm.target.arm_cpu>`\\ \\(\\[model\\, options\\]\\)"
msgstr ""

#: of tvm.target.target.Target:1:<autosummary>:1
msgid "Returns a ARM CPU target."
msgstr ""

#: of tvm.target.target.Target:1:<autosummary>:1
msgid ":py:obj:`rasp <tvm.target.rasp>`\\ \\(\\[options\\]\\)"
msgstr ""

#: of tvm.target.target.Target:1:<autosummary>:1 tvm.target.target.rasp:1
msgid "Return a Raspberry 3b target."
msgstr ""

#: of tvm.target.target.Target:1:<autosummary>:1
msgid ":py:obj:`bifrost <tvm.target.bifrost>`\\ \\(\\[model\\, options\\]\\)"
msgstr ""

#: of tvm.target.target.Target:1:<autosummary>:1 tvm.target.target.bifrost:1
msgid "Return an ARM Mali GPU target (Bifrost architecture)."
msgstr ""

#: of tvm.target.target.Target:1:<autosummary>:1
msgid ":py:obj:`riscv_cpu <tvm.target.riscv_cpu>`\\ \\(\\[model\\, options\\]\\)"
msgstr ""

#: of tvm.target.target.Target:1:<autosummary>:1
msgid "Returns a RISC-V CPU target."
msgstr ""

#: of tvm.target.target.Target:1:<autosummary>:1
msgid ":py:obj:`hexagon <tvm.target.hexagon>`\\ \\(\\[cpu\\_ver\\]\\)"
msgstr ""

#: of tvm.target.target.Target:1:<autosummary>:1 tvm.target.target.hexagon:1
msgid "Returns a Hexagon target."
msgstr ""

#: of tvm.target.target.Target:1:<autosummary>:1
msgid ""
":py:obj:`make_compilation_config <tvm.target.make_compilation_config>`\\ "
"\\(ctxt\\, targets\\[\\, ...\\]\\)"
msgstr ""

#: of tvm.target.target.Target:1:<autosummary>:1
msgid ""
"Returns a CompilationConfig appropriate for targets and an optional "
"host_target."
msgstr ""

#: of tvm.target.target.Target:1:<autosummary>:1
msgid ":py:obj:`list_tags <tvm.target.list_tags>`\\ \\(\\)"
msgstr ""

#: of tvm.target.tag.list_tags:1 tvm.target.target.Target:1:<autosummary>:1
msgid ""
"Returns a dict of tags, which maps each tag name to its corresponding "
"target."
msgstr ""

#: of tvm.target.target.Target:1:<autosummary>:1
msgid ":py:obj:`generic_func <tvm.target.generic_func>`\\ \\(fdefault\\)"
msgstr ""

#: of tvm.target.generic_func.generic_func:1
#: tvm.target.target.Target:1:<autosummary>:1
msgid "Wrap a target generic function."
msgstr ""

#: of tvm.target.target.Target:1:<autosummary>:1
msgid ""
":py:obj:`get_native_generic_func <tvm.target.get_native_generic_func>`\\ "
"\\(name\\)"
msgstr ""

#: of tvm.target.target.Target:1:<autosummary>:1
msgid "Get a generic function from the global registry."
msgstr ""

#: of tvm.target.target.Target:1:<autosummary>:1
msgid ""
":py:obj:`override_native_generic_func "
"<tvm.target.override_native_generic_func>`\\ \\(func\\_name\\)"
msgstr ""

#: of tvm.target.generic_func.override_native_generic_func:1
#: tvm.target.target.Target:1:<autosummary>:1
msgid "Override a generic function defined in C++"
msgstr ""

#: of tvm.target.target.Target:5
msgid "You can create target using the constructor or the following functions"
msgstr ""

#: of tvm.target.target.Target:7
msgid ":py:func:`tvm.target.arm_cpu` create arm_cpu target"
msgstr ""

#: of tvm.target.target.Target:8
msgid ":py:func:`tvm.target.cuda` create CUDA target"
msgstr ""

#: of tvm.target.target.Target:9
msgid ":py:func:`tvm.target.rocm` create ROCM target"
msgstr ""

#: of tvm.target.target.Target:10
msgid ":py:func:`tvm.target.mali` create Mali target"
msgstr ""

#: of tvm.target.target.Target:11
msgid ":py:func:`tvm.target.intel_graphics` create Intel Graphics target"
msgstr ""

#: of tvm.target.generic_func.GenericFunc:1 tvm.target.target.Target:1
msgid "**Methods:**"
msgstr ""

#: of tvm.target.target.Target:1:<autosummary>:1
msgid ":py:obj:`current <tvm.target.Target.current>`\\ \\(\\[allow\\_none\\]\\)"
msgstr ""

#: of tvm.target.target.Target.current:1
#: tvm.target.target.Target:1:<autosummary>:1
msgid "Returns the current target."
msgstr ""

#: of tvm.target.target.Target:1:<autosummary>:1
msgid ":py:obj:`list_kinds <tvm.target.Target.list_kinds>`\\ \\(\\)"
msgstr ""

#: of tvm.target.target.Target.list_kinds:1
#: tvm.target.target.Target:1:<autosummary>:1
msgid "Returns the list of available target names."
msgstr ""

#: of tvm.target.target.Target:1:<autosummary>:1
msgid ""
":py:obj:`check_and_update_host_consist "
"<tvm.target.Target.check_and_update_host_consist>`\\ \\(target\\[\\, "
"...\\]\\)"
msgstr ""

#: of tvm.target.target.Target:1:<autosummary>:1
msgid ""
"A helper function that merges a legacy \"target, target_host\" pair, then"
" returns the merged target and its host field."
msgstr ""

#: of tvm.target.target.Target:1
msgid "**Attributes:**"
msgstr ""

#: of tvm.target.target.Target.current:1:<autosummary>:1
msgid ":py:obj:`model <tvm.target.Target.model>`\\"
msgstr ""

#: of tvm.target.Target.model:1
#: tvm.target.target.Target.current:1:<autosummary>:1
msgid "Returns model from the target if it exists."
msgstr ""

#: of tvm.target.target.Target.current:1:<autosummary>:1
msgid ":py:obj:`mcpu <tvm.target.Target.mcpu>`\\"
msgstr ""

#: of tvm.target.Target.mcpu:1
#: tvm.target.target.Target.current:1:<autosummary>:1
msgid "Returns the mcpu from the target if it exists."
msgstr ""

#: of tvm.target.target.Target.current:1:<autosummary>:1
msgid ":py:obj:`mattr <tvm.target.Target.mattr>`\\"
msgstr ""

#: of tvm.target.Target.mattr:1
#: tvm.target.target.Target.current:1:<autosummary>:1
msgid "Returns the mattr from the target if it exists."
msgstr ""

#: of tvm.target.generic_func.GenericFunc.register
#: tvm.target.generic_func.GenericFunc.set_default
#: tvm.target.generic_func.generic_func
#: tvm.target.generic_func.get_native_generic_func
#: tvm.target.generic_func.override_native_generic_func
#: tvm.target.target.Target.check_and_update_host_consist
#: tvm.target.target.Target.current tvm.target.target.arm_cpu
#: tvm.target.target.bifrost tvm.target.target.cuda tvm.target.target.hexagon
#: tvm.target.target.intel_graphics tvm.target.target.mali
#: tvm.target.target.rasp tvm.target.target.riscv_cpu tvm.target.target.rocm
msgid "Parameters"
msgstr ""

#: of tvm.target.target.Target.current:3
msgid "Whether allow the current target to be none"
msgstr ""

#: of tvm.target.target.Target.current
msgid "Raises"
msgstr ""

#: of tvm.target.target.Target.check_and_update_host_consist:1
msgid ""
"A helper function that merges a legacy \"target, target_host\" pair, then"
" returns the merged target and its host field. The function is for legacy"
" target and target host pair only, and should not be used in the new "
"target system."
msgstr ""

#: of tvm.target.target.Target.check_and_update_host_consist:5
msgid "The target or heterogeneous target"
msgstr ""

#: of tvm.target.target.Target.check_and_update_host_consist:7
msgid "The target host"
msgstr ""

#: of tvm.target.target.Target.check_and_update_host_consist:9
msgid ""
"When the type of target is dict, whether Target is the key (Otherwise the"
" value)"
msgstr ""

#: of tvm.target.target.create:1
msgid "Deprecated. Use the constructor of :py:mod:`tvm.target.Target` directly."
msgstr ""

#: of tvm.target.target.cuda:3
msgid "The model of cuda device (e.g. 1080ti)"
msgstr ""

#: of tvm.target.target.arm_cpu:6 tvm.target.target.bifrost:3
#: tvm.target.target.cuda:5 tvm.target.target.intel_graphics:5
#: tvm.target.target.mali:5 tvm.target.target.rasp:3
#: tvm.target.target.riscv_cpu:6 tvm.target.target.rocm:5
msgid "Additional options"
msgstr ""

#: of tvm.target.target.intel_graphics:3 tvm.target.target.mali:3
#: tvm.target.target.rocm:3
msgid "The model of this device"
msgstr ""

#: of tvm.target.target.arm_cpu:1
msgid ""
"Returns a ARM CPU target. This function will also download pre-tuned op "
"parameters when there is none."
msgstr ""

#: of tvm.target.target.arm_cpu:4
msgid "SoC name or phone name of the arm board."
msgstr ""

#: of tvm.target.target.riscv_cpu:1
msgid "Returns a RISC-V CPU target. Default: sifive-u54 rv64gc"
msgstr ""

#: of tvm.target.target.riscv_cpu:4
msgid "CPU name."
msgstr ""

#: of tvm.target.target.hexagon:3
msgid ""
"CPU version used for code generation. Not all allowed cpu str will be "
"valid, LLVM will throw an error."
msgstr ""

#: of tvm.target.target.hexagon:8
msgid "Size of HVX vector in bytes. Value of 0 disables HVX codegen."
msgstr ""

#: of tvm.target.target.hexagon:10
msgid ""
"User defined sim arguments. CPU version defaults to cpu_ver. Otherwise, "
"separate versions are used for codegen and sim. Not all allowed cpu "
"strings will be valid, simulator will throw an error if invalid. Does not"
" affect codegen."
msgstr ""

#: of tvm.target.target.hexagon:15
msgid "User defined compiler arguments."
msgstr ""

#: of tvm.target.target.hexagon:17
msgid "Whether to link graph parameters into the LLVM module."
msgstr ""

#: of tvm.target.compilation_config.make_compilation_config:1
msgid ""
"Returns a CompilationConfig appropriate for targets and an optional "
"host_target. Currently intended just for unit tests and will be replaced "
"by a Python CompilationConfig class in the future. Note that targets must"
" be a dictionary from IntImm objects to Targets and we do not support any"
" of the lighter-weight conventions used by the various build(...) APIs."
msgstr ""

#: of tvm.target.generic_func.generic_func
#: tvm.target.generic_func.get_native_generic_func
#: tvm.target.generic_func.override_native_generic_func
#: tvm.target.tag.list_tags
msgid "Returns"
msgstr ""

#: of tvm.target.tag.list_tags:3
msgid ""
"**tag_dict** -- The dict of tags mapping each tag name to to its "
"corresponding target. None if TVM is built in runtime-only mode."
msgstr ""

#: of tvm.target.generic_func.generic_func
#: tvm.target.generic_func.get_native_generic_func
#: tvm.target.generic_func.override_native_generic_func
#: tvm.target.tag.list_tags
msgid "Return type"
msgstr ""

#: of tvm.target.generic_func.GenericFunc:1
msgid ""
"GenericFunc node reference. This represents a generic function that may "
"be specialized for different targets. When this object is called, a "
"specialization is chosen based on the current target."
msgstr ""

#: of tvm.target.generic_func.GenericFunc:7
msgid ""
"Do not construct an instance of this object, it should only ever be used "
"as a return value from calling into C++."
msgstr ""

#: of tvm.target.generic_func.GenericFunc.set_default:1:<autosummary>:1
msgid ""
":py:obj:`set_default <tvm.target.GenericFunc.set_default>`\\ "
"\\(func\\[\\, allow\\_override\\]\\)"
msgstr ""

#: of tvm.target.generic_func.GenericFunc.set_default:1
#: tvm.target.generic_func.GenericFunc.set_default:1:<autosummary>:1
msgid ""
"Set the default function to be used if no specializations match the "
"current target."
msgstr ""

#: of tvm.target.generic_func.GenericFunc.set_default:1:<autosummary>:1
msgid ""
":py:obj:`register <tvm.target.GenericFunc.register>`\\ \\(func\\, "
"key\\_list\\[\\, allow\\_override\\]\\)"
msgstr ""

#: of tvm.target.generic_func.GenericFunc.register:1
#: tvm.target.generic_func.GenericFunc.set_default:1:<autosummary>:1
msgid "Register a specialization for this GenericFunc."
msgstr ""

#: of tvm.target.generic_func.GenericFunc.set_default:4
msgid "The default function"
msgstr ""

#: of tvm.target.generic_func.GenericFunc.set_default:6
msgid "Whether to allow the current default to be overridden"
msgstr ""

#: of tvm.target.generic_func.GenericFunc.register:3
msgid "The function to be registered."
msgstr ""

#: of tvm.target.generic_func.GenericFunc.register:5
msgid "The key to be registered."
msgstr ""

#: of tvm.target.generic_func.GenericFunc.register:7
msgid "Whether to allow existing keys to be overridden."
msgstr ""

#: of tvm.target.generic_func.generic_func:3
#: tvm.target.generic_func.override_native_generic_func:3
msgid ""
"Generic function allows registration of further functions that can be "
"dispatched on current target context. If no registered dispatch is "
"matched, the fdefault will be called."
msgstr ""

#: of tvm.target.generic_func.generic_func:7
msgid "The default function."
msgstr ""

#: of tvm.target.generic_func.generic_func:10
#: tvm.target.generic_func.override_native_generic_func:10
msgid "**fgeneric** -- A wrapped generic function."
msgstr ""

#: of tvm.target.generic_func.generic_func:14
#: tvm.target.generic_func.override_native_generic_func:14
msgid "Example"
msgstr ""

#: of tvm.target.generic_func.get_native_generic_func:1
msgid ""
"Get a generic function from the global registry. If no function is "
"registered under the given name, a new generic function is created."
msgstr ""

#: of tvm.target.generic_func.get_native_generic_func:5
msgid "The name of the generic function to get"
msgstr ""

#: of tvm.target.generic_func.get_native_generic_func:8
msgid "**func** -- The generic function for the given name"
msgstr ""

#: of tvm.target.generic_func.override_native_generic_func:7
msgid "The name of the generic func to be overridden"
msgstr ""

