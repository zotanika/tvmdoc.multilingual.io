# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020 - 2021, Apache Software Foundation
# This file is distributed under the same license as the tvm package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: tvm 0.8.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-02-06 10:20+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../_staging/reference/api/python/runtime.rst:19
msgid "tvm.runtime"
msgstr ""

#: of tvm.runtime:1
msgid "TVM runtime namespace."
msgstr ""

#: of tvm.runtime:1
msgid "**Classes:**"
msgstr ""

#: of tvm.runtime:1:<autosummary>:1
msgid ""
":py:obj:`PackedFunc <tvm.runtime.PackedFunc>`\\ \\(handle\\, "
"is\\_global\\)"
msgstr ""

#: of tvm.runtime.packed_func.PackedFunc:1 tvm.runtime:1:<autosummary>:1
msgid "The PackedFunc object used in TVM."
msgstr ""

#: of tvm.runtime:1:<autosummary>:1
msgid ":py:obj:`Object <tvm.runtime.Object>`\\ \\(\\)"
msgstr ""

#: of tvm.runtime.object.Object:1 tvm.runtime:1:<autosummary>:1
msgid "Base class for all tvm's runtime objects."
msgstr ""

#: of tvm.runtime:1:<autosummary>:1
msgid ":py:obj:`ObjectGeneric <tvm.runtime.ObjectGeneric>`\\ \\(\\)"
msgstr ""

#: of tvm.runtime.object_generic.ObjectGeneric:1 tvm.runtime:1:<autosummary>:1
msgid "Base class for all classes that can be converted to object."
msgstr ""

#: of tvm.runtime:1:<autosummary>:1
msgid ":py:obj:`DataType <tvm.runtime.DataType>`\\ \\(type\\_str\\)"
msgstr ""

#: of tvm._ffi.runtime_ctypes.DataType:1 tvm.runtime:1:<autosummary>:1
msgid "TVM datatype structure"
msgstr ""

#: of tvm.runtime:1:<autosummary>:1
msgid ":py:obj:`DataTypeCode <tvm.runtime.DataTypeCode>`\\ \\(\\)"
msgstr ""

#: of tvm._ffi.runtime_ctypes.DataTypeCode:1 tvm.runtime:1:<autosummary>:1
msgid "DataType code in DLTensor."
msgstr ""

#: of tvm.runtime:1:<autosummary>:1
msgid ":py:obj:`Device <tvm.runtime.Device>`\\ \\(device\\_type\\, device\\_id\\)"
msgstr ""

#: of tvm._ffi.runtime_ctypes.Device:1 tvm.runtime:1:<autosummary>:1
msgid "TVM device strucure."
msgstr ""

#: of tvm.runtime:1:<autosummary>:1
msgid ":py:obj:`Module <tvm.runtime.Module>`\\ \\(handle\\)"
msgstr ""

#: of tvm.runtime.module.Module:1 tvm.runtime:1:<autosummary>:1
msgid "Runtime Module."
msgstr ""

#: of tvm.runtime:1:<autosummary>:1
msgid ":py:obj:`Report <tvm.runtime.Report>`\\ \\(\\)"
msgstr ""

#: of tvm.runtime.profiling.Report:1 tvm.runtime:1:<autosummary>:1
msgid "A container for information gathered during a profiling run."
msgstr ""

#: of tvm.runtime:1:<autosummary>:1
msgid ":py:obj:`String <tvm.runtime.String>`\\ \\(content\\)"
msgstr ""

#: of tvm.runtime.container.String:1 tvm.runtime:1:<autosummary>:1
msgid "TVM runtime.String object, represented as a python str."
msgstr ""

#: of tvm.runtime:1:<autosummary>:1
msgid ":py:obj:`ShapeTuple <tvm.runtime.ShapeTuple>`\\ \\(shape\\)"
msgstr ""

#: of tvm.runtime:1:<autosummary>:1
msgid "TVM runtime ShapeTuple object."
msgstr ""

#: of tvm.runtime:1
msgid "**Functions:**"
msgstr ""

#: of tvm.runtime.packed_func.PackedFunc:1:<autosummary>:1
msgid ""
":py:obj:`convert_to_object <tvm.runtime.convert_to_object>`\\ "
"\\(value\\[\\, span\\]\\)"
msgstr ""

#: of tvm.runtime.object_generic.convert_to_object:1
#: tvm.runtime.packed_func.PackedFunc:1:<autosummary>:1
msgid "Convert a Python value to corresponding object type."
msgstr ""

#: of tvm.runtime.packed_func.PackedFunc:1:<autosummary>:1
msgid ":py:obj:`convert <tvm.runtime.convert>`\\ \\(value\\[\\, span\\]\\)"
msgstr ""

#: of tvm.runtime.object_generic.convert:1
#: tvm.runtime.packed_func.PackedFunc:1:<autosummary>:1
msgid "Convert value to TVM object or function."
msgstr ""

#: of tvm.runtime.packed_func.PackedFunc:1:<autosummary>:1
msgid ":py:obj:`const <tvm.runtime.const>`\\ \\(value\\[\\, dtype\\, span\\]\\)"
msgstr ""

#: of tvm.runtime.object_generic.const:1
#: tvm.runtime.packed_func.PackedFunc:1:<autosummary>:1
msgid "construct a constant"
msgstr ""

#: of tvm.runtime.packed_func.PackedFunc:1:<autosummary>:1
msgid ":py:obj:`device <tvm.runtime.device>`\\ \\(dev\\_type\\[\\, dev\\_id\\]\\)"
msgstr ""

#: of tvm.runtime.ndarray.device:1
#: tvm.runtime.packed_func.PackedFunc:1:<autosummary>:1
msgid "Construct a TVM device with given device type and id."
msgstr ""

#: of tvm.runtime.packed_func.PackedFunc:1:<autosummary>:1
msgid ":py:obj:`cpu <tvm.runtime.cpu>`\\ \\(\\[dev\\_id\\]\\)"
msgstr ""

#: of tvm.runtime.ndarray.cpu:1
#: tvm.runtime.packed_func.PackedFunc:1:<autosummary>:1
msgid "Construct a CPU device"
msgstr ""

#: of tvm.runtime.packed_func.PackedFunc:1:<autosummary>:1
msgid ":py:obj:`cuda <tvm.runtime.cuda>`\\ \\(\\[dev\\_id\\]\\)"
msgstr ""

#: of tvm.runtime.ndarray.cuda:1 tvm.runtime.ndarray.gpu:1
#: tvm.runtime.packed_func.PackedFunc:1:<autosummary>:1
msgid "Construct a CUDA GPU device"
msgstr ""

#: of tvm.runtime.packed_func.PackedFunc:1:<autosummary>:1
msgid ":py:obj:`gpu <tvm.runtime.gpu>`\\ \\(\\[dev\\_id\\]\\)"
msgstr ""

#: of tvm.runtime.packed_func.PackedFunc:1:<autosummary>:1
msgid ":py:obj:`opencl <tvm.runtime.opencl>`\\ \\(\\[dev\\_id\\]\\)"
msgstr ""

#: of tvm.runtime.ndarray.opencl:1
#: tvm.runtime.packed_func.PackedFunc:1:<autosummary>:1
msgid "Construct a OpenCL device"
msgstr ""

#: of tvm.runtime.packed_func.PackedFunc:1:<autosummary>:1
msgid ":py:obj:`cl <tvm.runtime.cl>`\\ \\(\\[dev\\_id\\]\\)"
msgstr ""

#: of tvm.runtime.packed_func.PackedFunc:1:<autosummary>:1
msgid ":py:obj:`vulkan <tvm.runtime.vulkan>`\\ \\(\\[dev\\_id\\]\\)"
msgstr ""

#: of tvm.runtime.ndarray.vulkan:1
#: tvm.runtime.packed_func.PackedFunc:1:<autosummary>:1
msgid "Construct a Vulkan device"
msgstr ""

#: of tvm.runtime.packed_func.PackedFunc:1:<autosummary>:1
msgid ":py:obj:`metal <tvm.runtime.metal>`\\ \\(\\[dev\\_id\\]\\)"
msgstr ""

#: of tvm.runtime.ndarray.metal:1
#: tvm.runtime.packed_func.PackedFunc:1:<autosummary>:1
msgid "Construct a metal device"
msgstr ""

#: of tvm.runtime.packed_func.PackedFunc:1:<autosummary>:1
msgid ":py:obj:`mtl <tvm.runtime.mtl>`\\ \\(\\[dev\\_id\\]\\)"
msgstr ""

#: of tvm.runtime.packed_func.PackedFunc:1:<autosummary>:1
msgid ":py:obj:`vpi <tvm.runtime.vpi>`\\ \\(\\[dev\\_id\\]\\)"
msgstr ""

#: of tvm.runtime.ndarray.vpi:1
#: tvm.runtime.packed_func.PackedFunc:1:<autosummary>:1
msgid "Construct a VPI simulated device"
msgstr ""

#: of tvm.runtime.packed_func.PackedFunc:1:<autosummary>:1
msgid ":py:obj:`rocm <tvm.runtime.rocm>`\\ \\(\\[dev\\_id\\]\\)"
msgstr ""

#: of tvm.runtime.ndarray.rocm:1
#: tvm.runtime.packed_func.PackedFunc:1:<autosummary>:1
msgid "Construct a ROCM device"
msgstr ""

#: of tvm.runtime.packed_func.PackedFunc:1:<autosummary>:1
msgid ":py:obj:`ext_dev <tvm.runtime.ext_dev>`\\ \\(\\[dev\\_id\\]\\)"
msgstr ""

#: of tvm.runtime.ndarray.ext_dev:1
#: tvm.runtime.packed_func.PackedFunc:1:<autosummary>:1
msgid "Construct a extension device"
msgstr ""

#: of tvm.runtime.packed_func.PackedFunc:1:<autosummary>:1
msgid ":py:obj:`load_module <tvm.runtime.load_module>`\\ \\(path\\[\\, fmt\\]\\)"
msgstr ""

#: of tvm.runtime.module.load_module:1
#: tvm.runtime.packed_func.PackedFunc:1:<autosummary>:1
msgid "Load module from file."
msgstr ""

#: of tvm.runtime.packed_func.PackedFunc:1:<autosummary>:1
msgid ":py:obj:`enabled <tvm.runtime.enabled>`\\ \\(target\\)"
msgstr ""

#: of tvm.runtime.module.enabled:1
#: tvm.runtime.packed_func.PackedFunc:1:<autosummary>:1
msgid "Whether module runtime is enabled for target"
msgstr ""

#: of tvm.runtime.packed_func.PackedFunc:1:<autosummary>:1
msgid ":py:obj:`system_lib <tvm.runtime.system_lib>`\\ \\(\\)"
msgstr ""

#: of tvm.runtime.module.system_lib:1
#: tvm.runtime.packed_func.PackedFunc:1:<autosummary>:1
msgid "Get system-wide library module singleton."
msgstr ""

#: of tvm.runtime.packed_func.PackedFunc:1:<autosummary>:1
msgid ":py:obj:`save_param_dict <tvm.runtime.save_param_dict>`\\ \\(params\\)"
msgstr ""

#: of tvm.runtime.packed_func.PackedFunc:1:<autosummary>:1
#: tvm.runtime.params.save_param_dict:1
msgid "Save parameter dictionary to binary bytes."
msgstr ""

#: of tvm.runtime.packed_func.PackedFunc:1:<autosummary>:1
msgid ""
":py:obj:`load_param_dict <tvm.runtime.load_param_dict>`\\ "
"\\(param\\_bytes\\)"
msgstr ""

#: of tvm.runtime.packed_func.PackedFunc:1:<autosummary>:1
#: tvm.runtime.params.load_param_dict:1
msgid "Load parameter dictionary to binary bytes."
msgstr ""

#: of tvm.runtime.packed_func.PackedFunc:3
msgid ""
"Function plays an key role to bridge front and backend in TVM. Function "
"provide a type-erased interface, you can call function with positional "
"arguments."
msgstr ""

#: of tvm.runtime.packed_func.PackedFunc:6
msgid ""
"The compiled module returns Function. TVM backend also registers and "
"exposes its API as Functions."
msgstr ""

#: of tvm.runtime.packed_func.PackedFunc:9
msgid "The following are list of common usage scenario of tvm.runtime.PackedFunc."
msgstr ""

#: of tvm.runtime.packed_func.PackedFunc:11
msgid "Automatic exposure of C++ API into python"
msgstr ""

#: of tvm.runtime.packed_func.PackedFunc:12
msgid "To call PackedFunc from python side"
msgstr ""

#: of tvm.runtime.packed_func.PackedFunc:13
msgid "To call python callbacks to inspect results in generated code"
msgstr ""

#: of tvm.runtime.packed_func.PackedFunc:14
msgid "Bring python hook into C++ backend"
msgstr ""

#: of tvm.runtime.packed_func.PackedFunc:19
msgid ":obj:`tvm.register_func`"
msgstr ""

#: of tvm.runtime.packed_func.PackedFunc:19
msgid "How to register global function."
msgstr ""

#: of tvm.runtime.packed_func.PackedFunc:21
msgid ":obj:`tvm.get_global_func`"
msgstr ""

#: of tvm.runtime.packed_func.PackedFunc:22
msgid "How to get global function."
msgstr ""

#: of tvm._ffi.runtime_ctypes.Device:1 tvm.runtime.module.Module:1
#: tvm.runtime.object_generic.ObjectGeneric:1 tvm.runtime.profiling.Report:1
msgid "**Methods:**"
msgstr ""

#: of tvm.runtime.object_generic.ObjectGeneric.asobject:1:<autosummary>:1
msgid ":py:obj:`asobject <tvm.runtime.ObjectGeneric.asobject>`\\ \\(\\)"
msgstr ""

#: of tvm.runtime.object_generic.ObjectGeneric.asobject:1
#: tvm.runtime.object_generic.ObjectGeneric.asobject:1:<autosummary>:1
msgid "Convert value to object"
msgstr ""

#: of tvm._ffi.runtime_ctypes.Device:3
msgid ""
"Typically constructed using convenience function "
":meth:`tvm.runtime.device`."
msgstr ""

#: of tvm._ffi.runtime_ctypes.Device:6
msgid ""
"Exposes uniform interface to device-specific APIs such as CUDA or OpenCL."
"  Some properties may return None depending on whether an API exposes "
"that particular property."
msgstr ""

#: of tvm._ffi.runtime_ctypes.Device:1 tvm.runtime.module.Module:1
msgid "**Attributes:**"
msgstr ""

#: of tvm._ffi.runtime_ctypes.Device:1:<autosummary>:1
msgid ":py:obj:`exist <tvm.runtime.Device.exist>`\\"
msgstr ""

#: of tvm._ffi.runtime_ctypes.Device:1:<autosummary>:1
#: tvm.runtime.Device.exist:1
msgid "Whether this device exists."
msgstr ""

#: of tvm._ffi.runtime_ctypes.Device:1:<autosummary>:1
msgid ""
":py:obj:`max_threads_per_block "
"<tvm.runtime.Device.max_threads_per_block>`\\"
msgstr ""

#: of tvm._ffi.runtime_ctypes.Device:1:<autosummary>:1
#: tvm.runtime.Device.max_threads_per_block:1
msgid "Maximum number of threads on each block."
msgstr ""

#: of tvm._ffi.runtime_ctypes.Device:1:<autosummary>:1
msgid ":py:obj:`warp_size <tvm.runtime.Device.warp_size>`\\"
msgstr ""

#: of tvm._ffi.runtime_ctypes.Device:1:<autosummary>:1
#: tvm.runtime.Device.warp_size:1
msgid "Number of threads that execute concurrently."
msgstr ""

#: of tvm._ffi.runtime_ctypes.Device:1:<autosummary>:1
msgid ""
":py:obj:`max_shared_memory_per_block "
"<tvm.runtime.Device.max_shared_memory_per_block>`\\"
msgstr ""

#: of tvm._ffi.runtime_ctypes.Device:1:<autosummary>:1
#: tvm.runtime.Device.max_shared_memory_per_block:1
msgid "Total amount of shared memory per block in bytes."
msgstr ""

#: of tvm._ffi.runtime_ctypes.Device:1:<autosummary>:1
msgid ":py:obj:`compute_version <tvm.runtime.Device.compute_version>`\\"
msgstr ""

#: of tvm._ffi.runtime_ctypes.Device:1:<autosummary>:1
#: tvm.runtime.Device.compute_version:1
msgid "Get compute version number as string."
msgstr ""

#: of tvm._ffi.runtime_ctypes.Device:1:<autosummary>:1
msgid ":py:obj:`device_name <tvm.runtime.Device.device_name>`\\"
msgstr ""

#: of tvm._ffi.runtime_ctypes.Device:1:<autosummary>:1
#: tvm.runtime.Device.device_name:1
msgid "Return the vendor-specific name of device."
msgstr ""

#: of tvm._ffi.runtime_ctypes.Device:1:<autosummary>:1
msgid ":py:obj:`max_clock_rate <tvm.runtime.Device.max_clock_rate>`\\"
msgstr ""

#: of tvm._ffi.runtime_ctypes.Device:1:<autosummary>:1
#: tvm.runtime.Device.max_clock_rate:1
msgid "Return the max clock frequency of device (kHz)."
msgstr ""

#: of tvm._ffi.runtime_ctypes.Device:1:<autosummary>:1
msgid ""
":py:obj:`multi_processor_count "
"<tvm.runtime.Device.multi_processor_count>`\\"
msgstr ""

#: of tvm._ffi.runtime_ctypes.Device:1:<autosummary>:1
#: tvm.runtime.Device.multi_processor_count:1
msgid "Return the number of compute units in the device."
msgstr ""

#: of tvm._ffi.runtime_ctypes.Device:1:<autosummary>:1
msgid ""
":py:obj:`max_thread_dimensions "
"<tvm.runtime.Device.max_thread_dimensions>`\\"
msgstr ""

#: of tvm._ffi.runtime_ctypes.Device:1:<autosummary>:1
#: tvm.runtime.Device.max_thread_dimensions:1
msgid "Return the maximum size of each thread axis"
msgstr ""

#: of tvm._ffi.runtime_ctypes.Device:1:<autosummary>:1
msgid ":py:obj:`api_version <tvm.runtime.Device.api_version>`\\"
msgstr ""

#: of tvm._ffi.runtime_ctypes.Device:1:<autosummary>:1
#: tvm.runtime.Device.api_version:1
msgid "Returns version number of the SDK used to compile TVM."
msgstr ""

#: of tvm._ffi.runtime_ctypes.Device:1:<autosummary>:1
msgid ":py:obj:`driver_version <tvm.runtime.Device.driver_version>`\\"
msgstr ""

#: of tvm._ffi.runtime_ctypes.Device:1:<autosummary>:1
#: tvm.runtime.Device.driver_version:1
msgid "Returns version number of the driver"
msgstr ""

#: of tvm.runtime.Device.exist:1:<autosummary>:1
msgid ""
":py:obj:`create_raw_stream <tvm.runtime.Device.create_raw_stream>`\\ "
"\\(\\)"
msgstr ""

#: of tvm._ffi.runtime_ctypes.Device.create_raw_stream:1
#: tvm.runtime.Device.exist:1:<autosummary>:1
msgid "Create a new runtime stream at the context."
msgstr ""

#: of tvm.runtime.Device.exist:1:<autosummary>:1
msgid ""
":py:obj:`free_raw_stream <tvm.runtime.Device.free_raw_stream>`\\ "
"\\(stream\\)"
msgstr ""

#: of tvm._ffi.runtime_ctypes.Device.free_raw_stream:1
#: tvm.runtime.Device.exist:1:<autosummary>:1
msgid "Free a created stream handle."
msgstr ""

#: of tvm.runtime.Device.exist:1:<autosummary>:1
msgid ""
":py:obj:`set_raw_stream <tvm.runtime.Device.set_raw_stream>`\\ "
"\\(stream\\)"
msgstr ""

#: of tvm._ffi.runtime_ctypes.Device.set_raw_stream:1
#: tvm.runtime.Device.exist:1:<autosummary>:1
msgid "Set a created stream handle."
msgstr ""

#: of tvm.runtime.Device.exist:1:<autosummary>:1
msgid ":py:obj:`sync <tvm.runtime.Device.sync>`\\ \\(\\[stream\\]\\)"
msgstr ""

#: of tvm._ffi.runtime_ctypes.Device.sync:1
#: tvm.runtime.Device.exist:1:<autosummary>:1
msgid "Synchronize until jobs finished at the context."
msgstr ""

#: of tvm.runtime.Device.exist:3
msgid ""
"Returns True if TVM has support for the device, if the physical device is"
" present, and the device is accessible through appropriate drivers (e.g. "
"cuda/vulkan)."
msgstr ""

#: of tvm._ffi.runtime_ctypes.Device.create_raw_stream
#: tvm.runtime.Device.api_version tvm.runtime.Device.compute_version
#: tvm.runtime.Device.device_name tvm.runtime.Device.driver_version
#: tvm.runtime.Device.exist tvm.runtime.Device.max_clock_rate
#: tvm.runtime.Device.max_shared_memory_per_block
#: tvm.runtime.Device.max_thread_dimensions
#: tvm.runtime.Device.max_threads_per_block
#: tvm.runtime.Device.multi_processor_count tvm.runtime.Device.warp_size
#: tvm.runtime.Module.entry_func tvm.runtime.Module.imported_modules
#: tvm.runtime.module.Module.export_library
#: tvm.runtime.module.Module.get_function tvm.runtime.module.Module.get_source
#: tvm.runtime.module.Module.time_evaluator tvm.runtime.module.enabled
#: tvm.runtime.module.load_module tvm.runtime.module.system_lib
#: tvm.runtime.ndarray.cpu tvm.runtime.ndarray.cuda tvm.runtime.ndarray.device
#: tvm.runtime.ndarray.ext_dev tvm.runtime.ndarray.gpu
#: tvm.runtime.ndarray.metal tvm.runtime.ndarray.opencl
#: tvm.runtime.ndarray.rocm tvm.runtime.ndarray.vpi tvm.runtime.ndarray.vulkan
#: tvm.runtime.object_generic.const tvm.runtime.object_generic.convert
#: tvm.runtime.object_generic.convert_to_object
#: tvm.runtime.params.load_param_dict tvm.runtime.params.save_param_dict
#: tvm.runtime.profiling.Report.csv tvm.runtime.profiling.Report.from_json
#: tvm.runtime.profiling.Report.json tvm.runtime.profiling.Report.table
msgid "Returns"
msgstr ""

#: of tvm.runtime.Device.exist:7
msgid "**exist** -- True if the device exists"
msgstr ""

#: of tvm._ffi.runtime_ctypes.Device.create_raw_stream
#: tvm.runtime.Device.api_version tvm.runtime.Device.compute_version
#: tvm.runtime.Device.device_name tvm.runtime.Device.driver_version
#: tvm.runtime.Device.exist tvm.runtime.Device.max_clock_rate
#: tvm.runtime.Device.max_shared_memory_per_block
#: tvm.runtime.Device.max_thread_dimensions
#: tvm.runtime.Device.max_threads_per_block
#: tvm.runtime.Device.multi_processor_count tvm.runtime.Device.warp_size
#: tvm.runtime.Module.entry_func tvm.runtime.Module.imported_modules
#: tvm.runtime.module.Module.export_library
#: tvm.runtime.module.Module.get_function tvm.runtime.module.Module.get_source
#: tvm.runtime.module.Module.time_evaluator tvm.runtime.module.enabled
#: tvm.runtime.module.load_module tvm.runtime.module.system_lib
#: tvm.runtime.ndarray.cpu tvm.runtime.ndarray.cuda tvm.runtime.ndarray.device
#: tvm.runtime.ndarray.ext_dev tvm.runtime.ndarray.gpu
#: tvm.runtime.ndarray.metal tvm.runtime.ndarray.opencl
#: tvm.runtime.ndarray.rocm tvm.runtime.ndarray.vpi tvm.runtime.ndarray.vulkan
#: tvm.runtime.object_generic.const tvm.runtime.object_generic.convert
#: tvm.runtime.object_generic.convert_to_object
#: tvm.runtime.params.load_param_dict tvm.runtime.params.save_param_dict
#: tvm.runtime.profiling.Report.csv tvm.runtime.profiling.Report.from_json
#: tvm.runtime.profiling.Report.json tvm.runtime.profiling.Report.table
msgid "Return type"
msgstr ""

#: of tvm.runtime.Device.max_threads_per_block:3
msgid ""
"Returns device value for cuda, metal, rocm, opencl, and vulkan devices.  "
"Returns remote device value for RPC devices. Returns None for all other "
"devices."
msgstr ""

#: of tvm.runtime.Device.max_threads_per_block:7
msgid "**max_threads_per_block** -- The number of threads on each block"
msgstr ""

#: of tvm.runtime.Device.warp_size:3
msgid ""
"Returns device value for for cuda, rocm, and vulkan.  Returns 1 for metal"
" and opencl devices, regardless of the physical device.  Returns remote "
"device value for RPC devices.  Returns None for all other devices."
msgstr ""

#: of tvm.runtime.Device.warp_size:8
msgid "**warp_size** -- Number of threads that execute concurrently"
msgstr ""

#: of tvm.runtime.Device.api_version:6 tvm.runtime.Device.compute_version:6
#: tvm.runtime.Device.device_name:3
#: tvm.runtime.Device.max_shared_memory_per_block:3
#: tvm.runtime.Device.max_thread_dimensions:3
msgid ""
"Returns device value for cuda, rocm, opencl, and vulkan. Returns remote "
"device value for RPC devices.  Returns None for all other devices."
msgstr ""

#: of tvm.runtime.Device.max_shared_memory_per_block:7
msgid ""
"**max_shared_memory_per_block** -- Total amount of shared memory per "
"block in bytes"
msgstr ""

#: of tvm.runtime.Device.compute_version:3
msgid ""
"Returns maximum API version (e.g. CUDA/OpenCL/Vulkan) supported by the "
"device."
msgstr ""

#: of tvm.runtime.Device.compute_version:10
msgid "**version** -- The version string in `major.minor` format."
msgstr ""

#: of tvm.runtime.Device.device_name:7
msgid "**device_name** -- The name of the device."
msgstr ""

#: of tvm.runtime.Device.max_clock_rate:3
#: tvm.runtime.Device.multi_processor_count:3
msgid ""
"Returns device value for cuda, rocm, and opencl.  Returns remote device "
"value for RPC devices.  Returns None for all other devices."
msgstr ""

#: of tvm.runtime.Device.max_clock_rate:7
msgid "**max_clock_rate** -- The maximum clock frequency of the device (kHz)"
msgstr ""

#: of tvm.runtime.Device.multi_processor_count:7
msgid "**multi_processor_count** -- Thee number of compute units in the device"
msgstr ""

#: of tvm.runtime.Device.max_thread_dimensions:7
msgid "**dims** -- The maximum length of threadIdx.x, threadIdx.y, threadIdx.z"
msgstr ""

#: of tvm.runtime.Device.api_version:3
msgid "For example, CUDA_VERSION for cuda or VK_HEADER_VERSION for Vulkan."
msgstr ""

#: of tvm.runtime.Device.api_version:10
msgid "**version** -- The version of the SDK"
msgstr ""

#: of tvm.runtime.Device.driver_version:3
msgid ""
"Returns driver vendor's internal version number. (e.g. \"450.408.256\" "
"for nvidia-driver-450)"
msgstr ""

#: of tvm.runtime.Device.driver_version:6
msgid ""
"Returns device value for opencl and vulkan.  Returns remote device value "
"for RPC devices.  Returns None for all other devices."
msgstr ""

#: of tvm.runtime.Device.driver_version:10
msgid "**version** -- The version string in `major.minor.patch` format."
msgstr ""

#: of tvm._ffi.runtime_ctypes.Device.create_raw_stream:3
msgid "User should free the stream after use."
msgstr ""

#: of tvm._ffi.runtime_ctypes.Device.create_raw_stream:5
msgid "**stream** -- The created runtime stream."
msgstr ""

#: of tvm._ffi.runtime_ctypes.Device.free_raw_stream
#: tvm._ffi.runtime_ctypes.Device.set_raw_stream
#: tvm._ffi.runtime_ctypes.Device.sync tvm.runtime.container.String
#: tvm.runtime.module.Module.export_library
#: tvm.runtime.module.Module.get_function tvm.runtime.module.Module.get_source
#: tvm.runtime.module.Module.import_module tvm.runtime.module.Module.save
#: tvm.runtime.module.Module.time_evaluator tvm.runtime.module.enabled
#: tvm.runtime.module.load_module tvm.runtime.ndarray.cpu
#: tvm.runtime.ndarray.cuda tvm.runtime.ndarray.device
#: tvm.runtime.ndarray.ext_dev tvm.runtime.ndarray.gpu
#: tvm.runtime.ndarray.metal tvm.runtime.ndarray.opencl
#: tvm.runtime.ndarray.rocm tvm.runtime.ndarray.vpi tvm.runtime.ndarray.vulkan
#: tvm.runtime.object_generic.const tvm.runtime.object_generic.convert
#: tvm.runtime.object_generic.convert_to_object
#: tvm.runtime.params.load_param_dict tvm.runtime.params.save_param_dict
#: tvm.runtime.profiling.Report.from_json tvm.runtime.profiling.Report.table
msgid "Parameters"
msgstr ""

#: of tvm._ffi.runtime_ctypes.Device.free_raw_stream:3
msgid "The stream which should to be released."
msgstr ""

#: of tvm._ffi.runtime_ctypes.Device.set_raw_stream:3
msgid "The stream which should to be set to the device."
msgstr ""

#: of tvm._ffi.runtime_ctypes.Device.sync:3
msgid "Jobs in this stream should be finished."
msgstr ""

#: of tvm.runtime.module.Module:1:<autosummary>:1
msgid ":py:obj:`entry_func <tvm.runtime.Module.entry_func>`\\"
msgstr ""

#: of tvm.runtime.Module.entry_func:1
#: tvm.runtime.module.Module:1:<autosummary>:1
msgid "Get the entry function"
msgstr ""

#: of tvm.runtime.module.Module:1:<autosummary>:1
msgid ":py:obj:`type_key <tvm.runtime.Module.type_key>`\\"
msgstr ""

#: of tvm.runtime.Module.type_key:1 tvm.runtime.module.Module:1:<autosummary>:1
msgid "Get type key of the module."
msgstr ""

#: of tvm.runtime.module.Module:1:<autosummary>:1
msgid ":py:obj:`imported_modules <tvm.runtime.Module.imported_modules>`\\"
msgstr ""

#: of tvm.runtime.Module.imported_modules:1
#: tvm.runtime.module.Module:1:<autosummary>:1
msgid "Get imported modules"
msgstr ""

#: of tvm.runtime.Module.entry_func:1:<autosummary>:1
msgid ""
":py:obj:`get_function <tvm.runtime.Module.get_function>`\\ \\(name\\[\\, "
"query\\_imports\\]\\)"
msgstr ""

#: of tvm.runtime.Module.entry_func:1:<autosummary>:1
#: tvm.runtime.module.Module.get_function:1
msgid "Get function from the module."
msgstr ""

#: of tvm.runtime.Module.entry_func:1:<autosummary>:1
msgid ":py:obj:`import_module <tvm.runtime.Module.import_module>`\\ \\(module\\)"
msgstr ""

#: of tvm.runtime.Module.entry_func:1:<autosummary>:1
#: tvm.runtime.module.Module.import_module:1
msgid "Add module to the import list of current one."
msgstr ""

#: of tvm.runtime.Module.entry_func:1:<autosummary>:1
msgid ":py:obj:`get_source <tvm.runtime.Module.get_source>`\\ \\(\\[fmt\\]\\)"
msgstr ""

#: of tvm.runtime.Module.entry_func:1:<autosummary>:1
#: tvm.runtime.module.Module.get_source:1
msgid "Get source code from module, if available."
msgstr ""

#: of tvm.runtime.Module.entry_func:1:<autosummary>:1
msgid ":py:obj:`save <tvm.runtime.Module.save>`\\ \\(file\\_name\\[\\, fmt\\]\\)"
msgstr ""

#: of tvm.runtime.Module.entry_func:1:<autosummary>:1
#: tvm.runtime.module.Module.save:1
msgid "Save the module to file."
msgstr ""

#: of tvm.runtime.Module.entry_func:1:<autosummary>:1
msgid ""
":py:obj:`time_evaluator <tvm.runtime.Module.time_evaluator>`\\ "
"\\(func\\_name\\, dev\\[\\, number\\, ...\\]\\)"
msgstr ""

#: of tvm.runtime.Module.entry_func:1:<autosummary>:1
#: tvm.runtime.module.Module.time_evaluator:1
msgid "Get an evaluator that measures time cost of running function."
msgstr ""

#: of tvm.runtime.Module.entry_func:1:<autosummary>:1
msgid ""
":py:obj:`export_library <tvm.runtime.Module.export_library>`\\ "
"\\(file\\_name\\[\\, fcompile\\, ...\\]\\)"
msgstr ""

#: of tvm.runtime.Module.entry_func:1:<autosummary>:1
#: tvm.runtime.module.Module.export_library:1
msgid "Export the module and all imported modules into a single device library."
msgstr ""

#: of tvm.runtime.Module.entry_func:3
msgid "**f** -- The entry function if exist"
msgstr ""

#: of tvm.runtime.module.Module.get_function:3
msgid "The name of the function"
msgstr ""

#: of tvm.runtime.module.Module.get_function:5
msgid "Whether also query modules imported by this module."
msgstr ""

#: of tvm.runtime.module.Module.get_function:8
msgid "**f** -- The result function."
msgstr ""

#: of tvm.runtime.module.Module.import_module:3
msgid "The other module."
msgstr ""

#: of tvm.runtime.module.Module.get_source:3
msgid "The specified format."
msgstr ""

#: of tvm.runtime.module.Module.get_source:6
msgid "**source** -- The result source code."
msgstr ""

#: of tvm.runtime.Module.imported_modules:3
msgid "**modules** -- The module"
msgstr ""

#: of tvm.runtime.module.Module.save:3
msgid "This do not save the dependent device modules. See also export_shared"
msgstr ""

#: of tvm.runtime.module.Module.save:6
msgid "The name of the file."
msgstr ""

#: of tvm.runtime.module.Module.save:8
msgid "The format of the file."
msgstr ""

#: of tvm.runtime.module.Module.save:13
msgid ":obj:`runtime.Module.export_library`"
msgstr ""

#: of tvm.runtime.module.Module.save:14
msgid "export the module to shared library."
msgstr ""

#: of tvm.runtime.module.Module.time_evaluator:3
msgid "The name of the function in the module."
msgstr ""

#: of tvm.runtime.module.Module.time_evaluator:5
msgid "The device we should run this function on."
msgstr ""

#: of tvm.runtime.module.Module.time_evaluator:7
msgid ""
"The number of times to run this function for taking average. We call "
"these runs as one `repeat` of measurement."
msgstr ""

#: of tvm.runtime.module.Module.time_evaluator:10
msgid ""
"The number of times to repeat the measurement. In total, the function "
"will be invoked (1 + number x repeat) times, where the first one is warm "
"up and will be discarded. The returned result contains `repeat` costs, "
"each of which is an average of `number` costs."
msgstr ""

#: of tvm.runtime.module.Module.time_evaluator:16
msgid ""
"The minimum duration of one `repeat` in milliseconds. By default, one "
"`repeat` contains `number` runs. If this parameter is set, the parameters"
" `number` will be dynamically adjusted to meet the minimum duration "
"requirement of one `repeat`. i.e., When the run time of one `repeat` "
"falls below this time, the `number` parameter will be automatically "
"increased."
msgstr ""

#: of tvm.runtime.module.Module.time_evaluator:23
msgid ""
"The preprocess function name we want to execute before executing the time"
" evaluator."
msgstr ""

#: of tvm.runtime.module.Module.time_evaluator:28
msgid ""
"The function will be invoked  (1 + number x repeat) times, with the first"
" call discarded in case there is lazy initialization."
msgstr ""

#: of tvm.runtime.module.Module.time_evaluator:31
msgid ""
"**ftimer** -- The function that takes same argument as func and returns a"
" BenchmarkResult. The ProfileResult reports `repeat` time costs in "
"seconds."
msgstr ""

#: of tvm.runtime.module.Module.export_library:3
msgid ""
"This function only works on host LLVM modules, other runtime::Module "
"subclasses will work with this API but they must support implement the "
"save and load mechanisms of modules completely including saving from "
"streams and files. This will pack your non-shared library module into a "
"single shared library which can later be loaded by TVM."
msgstr ""

#: of tvm.runtime.module.Module.export_library:9
msgid "The name of the shared library."
msgstr ""

#: of tvm.runtime.module.Module.export_library:11
msgid ""
"The compilation function to use create the final library object during "
"export.  For example, when fcompile=_cc.create_shared, or when it is not "
"supplied but module is \"llvm,\" this is used to link all produced "
"artifacts into a final dynamic library.  This behavior is controlled by "
"the type of object exported. If fcompile has attribute object_format, "
"will compile host library to that format. Otherwise, will use default "
"format \"o\"."
msgstr ""

#: of tvm.runtime.module.Module.export_library:11
msgid ""
"The compilation function to use create the final library object during "
"export."
msgstr ""

#: of tvm.runtime.module.Module.export_library:14
msgid ""
"For example, when fcompile=_cc.create_shared, or when it is not supplied "
"but module is \"llvm,\" this is used to link all produced artifacts into "
"a final dynamic library."
msgstr ""

#: of tvm.runtime.module.Module.export_library:18
msgid ""
"This behavior is controlled by the type of object exported. If fcompile "
"has attribute object_format, will compile host library to that format. "
"Otherwise, will use default format \"o\"."
msgstr ""

#: of tvm.runtime.module.Module.export_library:22
msgid ""
"The path of the directory used to create the intermediate artifacts when "
"exporting the module. If this is not provided a temporary dir will be "
"created."
msgstr ""

#: of tvm.runtime.module.Module.export_library:26
msgid "Additional arguments passed to fcompile"
msgstr ""

#: of tvm.runtime.module.Module.export_library:29
msgid ""
"**result of fcompile()** -- If the compilation function returns an "
"artifact it would be returned via export_library, if any."
msgstr ""

#: of tvm.runtime.profiling.Report:5
msgid "Per-call profiling metrics (function name, runtime, device, ...)."
msgstr ""

#: of tvm.runtime.profiling.Report
msgid "type"
msgstr ""

#: of tvm.runtime.profiling.Report:7
msgid "Array[Dict[str, Object]]"
msgstr ""

#: of tvm.runtime.profiling.Report:11
msgid "Per-device metrics collected over the entire run."
msgstr ""

#: of tvm.runtime.profiling.Report:13
msgid "Dict[Device, Dict[str, Object]]"
msgstr ""

#: of tvm.runtime.profiling.Report.csv:1:<autosummary>:1
msgid ":py:obj:`csv <tvm.runtime.Report.csv>`\\ \\(\\)"
msgstr ""

#: of tvm.runtime.profiling.Report.csv:1
#: tvm.runtime.profiling.Report.csv:1:<autosummary>:1
msgid "Convert this profiling report into CSV format."
msgstr ""

#: of tvm.runtime.profiling.Report.csv:1:<autosummary>:1
msgid ""
":py:obj:`table <tvm.runtime.Report.table>`\\ \\(\\[sort\\, aggregate\\, "
"col\\_sums\\]\\)"
msgstr ""

#: of tvm.runtime.profiling.Report.csv:1:<autosummary>:1
#: tvm.runtime.profiling.Report.table:1
msgid "Generate a human-readable table"
msgstr ""

#: of tvm.runtime.profiling.Report.csv:1:<autosummary>:1
msgid ":py:obj:`json <tvm.runtime.Report.json>`\\ \\(\\)"
msgstr ""

#: of tvm.runtime.profiling.Report.csv:1:<autosummary>:1
#: tvm.runtime.profiling.Report.json:1
msgid "Convert this profiling report into JSON format."
msgstr ""

#: of tvm.runtime.profiling.Report.csv:1:<autosummary>:1
msgid ":py:obj:`from_json <tvm.runtime.Report.from_json>`\\ \\(s\\)"
msgstr ""

#: of tvm.runtime.profiling.Report.csv:1:<autosummary>:1
#: tvm.runtime.profiling.Report.from_json:1
msgid "Deserialize a report from JSON."
msgstr ""

#: of tvm.runtime.profiling.Report.csv:3
msgid "This only includes calls and not overall metrics."
msgstr ""

#: of tvm.runtime.profiling.Report.csv:5
msgid "**csv** -- `calls` in CSV format."
msgstr ""

#: of tvm.runtime.profiling.Report.table:3
msgid ""
"If aggregate is true, whether to sort call frames by descending duration."
"  If aggregate is False, whether to sort frames by order of appearancei n"
" the program."
msgstr ""

#: of tvm.runtime.profiling.Report.table:7
msgid "Whether to join multiple calls to the same op into a single line."
msgstr ""

#: of tvm.runtime.profiling.Report.table:10
msgid "Whether to include the sum of each column."
msgstr ""

#: of tvm.runtime.profiling.Report.table:13
msgid "**table** -- A human-readable table"
msgstr ""

#: of tvm.runtime.profiling.Report.json:3
msgid "Example output:"
msgstr ""

#: of tvm.runtime.profiling.Report.json:50
msgid "**json** -- Formatted JSON"
msgstr ""

#: of tvm.runtime.profiling.Report.from_json:3
msgid "Report serialize via :py:meth:`json`."
msgstr ""

#: of tvm.runtime.profiling.Report.from_json:6
msgid "**report** -- The deserialized report."
msgstr ""

#: of tvm.runtime.object_generic.convert_to_object:3
msgid "The value to be inspected."
msgstr ""

#: of tvm.runtime.object_generic.convert_to_object:5
msgid "The location of this itervar in the source code."
msgstr ""

#: of tvm.runtime.object_generic.convert_to_object:8
msgid "**obj** -- The corresponding object value."
msgstr ""

#: of tvm.runtime.object_generic.convert:5
msgid "The location of this statement in the source code."
msgstr ""

#: of tvm.runtime.object_generic.convert:8
msgid "**tvm_val** -- Converted value in TVM"
msgstr ""

#: of tvm.runtime.object_generic.const:3
msgid "The content of the constant number."
msgstr ""

#: of tvm.runtime.object_generic.const:5
msgid "The data type."
msgstr ""

#: of tvm.runtime.object_generic.const:7
msgid "The location of the constant value in the source."
msgstr ""

#: of tvm.runtime.object_generic.const:10
msgid "**const_val** -- The result expression."
msgstr ""

#: of tvm.runtime.ndarray.device:3
msgid "The device type mask or name of the device."
msgstr ""

#: of tvm.runtime.ndarray.cpu:3 tvm.runtime.ndarray.cuda:3
#: tvm.runtime.ndarray.device:5 tvm.runtime.ndarray.ext_dev:3
#: tvm.runtime.ndarray.gpu:6 tvm.runtime.ndarray.metal:3
#: tvm.runtime.ndarray.opencl:3 tvm.runtime.ndarray.rocm:3
#: tvm.runtime.ndarray.vpi:3 tvm.runtime.ndarray.vulkan:3
msgid "The integer device id"
msgstr ""

#: of tvm.runtime.ndarray.device:8
msgid "**dev** -- The corresponding device."
msgstr ""

#: of tvm.runtime.module.enabled:10 tvm.runtime.ndarray.device:12
#: tvm.runtime.params.save_param_dict:13
msgid "Examples"
msgstr ""

#: of tvm.runtime.ndarray.device:13
msgid ""
"Device can be used to create reflection of device by string "
"representation of the device type."
msgstr ""

#: of tvm.runtime.ndarray.cpu:6 tvm.runtime.ndarray.cuda:6
#: tvm.runtime.ndarray.ext_dev:6 tvm.runtime.ndarray.gpu:9
#: tvm.runtime.ndarray.metal:6 tvm.runtime.ndarray.opencl:6
#: tvm.runtime.ndarray.rocm:6 tvm.runtime.ndarray.vpi:6
#: tvm.runtime.ndarray.vulkan:6
msgid "**dev** -- The created device"
msgstr ""

#: of tvm.runtime.ndarray.gpu:3
msgid "deprecated:: 0.9.0 Use :py:func:`tvm.cuda` instead."
msgstr ""

#: of tvm.runtime.ndarray.ext_dev:11
msgid ""
"This API is reserved for quick testing of new device by plugin device API"
" as ext_dev."
msgstr ""

#: of tvm.runtime.module.load_module:3
msgid "The path to the module file."
msgstr ""

#: of tvm.runtime.module.load_module:5
msgid ""
"The format of the file, if not specified it will be inferred from suffix "
"of the file."
msgstr ""

#: of tvm.runtime.module.load_module:9
msgid "**module** -- The loaded module"
msgstr ""

#: of tvm.runtime.module.load_module:14
msgid ""
"This function will automatically call cc.create_shared if the path is in "
"format .o or .tar"
msgstr ""

#: of tvm.runtime.module.enabled:3
msgid "The target device type."
msgstr ""

#: of tvm.runtime.module.enabled:6
msgid "**enabled** -- Whether runtime is enabled."
msgstr ""

#: of tvm.runtime.module.enabled:11
msgid "The following code checks if gpu is enabled."
msgstr ""

#: of tvm.runtime.module.system_lib:3
msgid ""
"System lib is a global module that contains self register functions in "
"startup. Unlike normal dso modules which need to be loaded explicitly. It"
" is useful in environments where dynamic loading api like dlopen is "
"banned."
msgstr ""

#: of tvm.runtime.module.system_lib:7
msgid ""
"To build system lib function, simply specify target option ```llvm "
"--system-lib``` The system lib will be available as long as the result "
"code is linked by the program."
msgstr ""

#: of tvm.runtime.module.system_lib:10
msgid ""
"The system lib is intended to be linked and loaded during the entire "
"life-cyle of the program. If you want dynamic loading features, use dso "
"modules instead."
msgstr ""

#: of tvm.runtime.module.system_lib:13
msgid "**module** -- The system-wide library module."
msgstr ""

#: of tvm.runtime.container.String:3
msgid "The content string used to construct the object."
msgstr ""

#: of tvm.runtime.container.ShapeTuple:1
msgid ""
"TVM runtime ShapeTuple object. :param shape: The shape list used to "
"construct the object. :type shape: list[int]"
msgstr ""

#: of tvm.runtime.params.save_param_dict:3
msgid ""
"The result binary bytes can be loaded by the GraphModule with API "
"\"load_params\"."
msgstr ""

#: of tvm.runtime.params.save_param_dict:6
msgid "The parameter dictionary."
msgstr ""

#: of tvm.runtime.params.save_param_dict:9
msgid "**param_bytes** -- Serialized parameters."
msgstr ""

#: of tvm.runtime.params.load_param_dict:3
msgid "Serialized parameters."
msgstr ""

#: of tvm.runtime.params.load_param_dict:6
msgid "**params** -- The parameter dictionary."
msgstr ""

