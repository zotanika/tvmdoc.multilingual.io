# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020 - 2021, Apache Software Foundation
# This file is distributed under the same license as the tvm package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: tvm 0.8.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-02-06 10:20+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../_staging/topic/vta/install.rst:19
msgid "VTA Installation Guide"
msgstr ""

#: ../../_staging/topic/vta/install.rst:21
msgid "We present three installation guides, each extending on the previous one:"
msgstr ""

#: ../../_staging/topic/vta/install.rst:23
msgid "`VTA Simulator Installation`_"
msgstr ""

#: ../../_staging/topic/vta/install.rst:24
msgid "`Xilinx Pynq FPGA Setup`_"
msgstr ""

#: ../../_staging/topic/vta/install.rst:25
msgid "`Intel DE10 FPGA Setup`_"
msgstr ""

#: ../../_staging/topic/vta/install.rst:26
msgid "`Bitstream Generation with Xilinx Toolchains`_"
msgstr ""

#: ../../_staging/topic/vta/install.rst:27
msgid "`Bitstream Generation with Intel Toolchains`_"
msgstr ""

#: ../../_staging/topic/vta/install.rst:31
msgid "VTA Simulator Installation"
msgstr ""

#: ../../_staging/topic/vta/install.rst:33
msgid ""
"You need :ref:`TVM installed <installation>` on your machine.  For a "
"quick and easy start, checkout the :ref:`Docker Guide <docker-images>`."
msgstr ""

#: ../../_staging/topic/vta/install.rst:36
msgid "You'll need to set the following paths to use VTA:"
msgstr ""

#: ../../_staging/topic/vta/install.rst:43
msgid ""
"The VTA functional simulation library needs to be enabled when building "
"TVM."
msgstr ""

#: ../../_staging/topic/vta/install.rst:53
msgid "Add the VTA python library to your python path to run the VTA examples."
msgstr ""

#: ../../_staging/topic/vta/install.rst:60
msgid "Testing your VTA Simulation Setup"
msgstr ""

#: ../../_staging/topic/vta/install.rst:62
msgid ""
"To ensure that you've properly installed the VTA python package, run the "
"following 2D convolution testbench."
msgstr ""

#: ../../_staging/topic/vta/install.rst:68
msgid ""
"You are invited to try out our :ref:`VTA programming tutorials <vta-"
"tutorials>`."
msgstr ""

#: ../../_staging/topic/vta/install.rst:70
msgid ""
"**Note**: You'll notice that for every convolution layer, the throughput "
"gets reported in GOPS. These numbers are actually the computational "
"throughput that the simulator achieves, by evaluating the convolutions in"
" software."
msgstr ""

#: ../../_staging/topic/vta/install.rst:73
msgid "Advanced Configuration (optional)"
msgstr ""

#: ../../_staging/topic/vta/install.rst:75
msgid ""
"VTA is a generic configurable deep learning accelerator. The "
"configuration is specified by ``vta_config.json`` under ``3rdparty/vta-"
"hw/config``. This file provides an architectural specification of the VTA"
" accelerator to parameterize the TVM compiler stack and the VTA hardware "
"stack."
msgstr ""

#: ../../_staging/topic/vta/install.rst:79
msgid ""
"The VTA configuration file also specifies the TVM compiler target. When "
"``TARGET`` is set to ``sim``, all TVM workloads execute on the VTA "
"simulator. You can modify the content of the configuration file to "
"rebuild VTA to a different parameterization. To do so,"
msgstr ""

#: ../../_staging/topic/vta/install.rst:94
msgid "Xilinx Pynq FPGA Setup"
msgstr ""

#: ../../_staging/topic/vta/install.rst:96
msgid ""
"This second guide extends the *VTA Simulator Installation* guide above to"
" run FPGA hardware tests of the complete TVM and VTA software-hardware "
"stack. In terms of hardware components you'll need:"
msgstr ""

#: ../../_staging/topic/vta/install.rst:99
msgid ""
"The `Pynq <http://www.pynq.io/>`_ FPGA development board which can be "
"acquired for $200, or $150 for academics from `Digilent "
"<https://store.digilentinc.com/pynq-z1-python-productivity-for-zynq/>`_."
msgstr ""

#: ../../_staging/topic/vta/install.rst:100
msgid ""
"An Ethernet-to-USB adapter to connect the Pynq board to your development "
"machine."
msgstr ""

#: ../../_staging/topic/vta/install.rst:101
msgid "An 8+GB micro SD card."
msgstr ""

#: ../../_staging/topic/vta/install.rst:102
msgid "An AC to DC 12V 3A power adapter."
msgstr ""

#: ../../_staging/topic/vta/install.rst:104
msgid "This guide covers the following themes:"
msgstr ""

#: ../../_staging/topic/vta/install.rst:106
msgid "Pynq board setup instructions."
msgstr ""

#: ../../_staging/topic/vta/install.rst:107
msgid "Pynq-side RPC server build and deployment."
msgstr ""

#: ../../_staging/topic/vta/install.rst:108
msgid ""
"Revisiting the test examples from the *VTA Simulator Installation* guide,"
" this time executing on the Pynq board."
msgstr ""

#: ../../_staging/topic/vta/install.rst:111
msgid "Pynq Board Setup"
msgstr ""

#: ../../_staging/topic/vta/install.rst:113
msgid ""
"Setup your Pynq board based on the `Pynq board getting started tutorial "
"<http://pynq.readthedocs.io/en/latest/getting_started.html>`_."
msgstr ""

#: ../../_staging/topic/vta/install.rst:115
msgid ""
"You should follow the instructions up to and including the *Turning On "
"the PYNQ-Z1* step (no need to pursue the tutorial beyond this point)."
msgstr ""

#: ../../_staging/topic/vta/install.rst:117
msgid ""
"Make sure that you've downloaded the latest Pynq image, `PYNQ-Z1 v2.5 "
"<http://www.pynq.io/board.html>`_, and have imaged your SD card with it "
"(we recommend the free `Etcher <https://etcher.io/>`_ program)."
msgstr ""

#: ../../_staging/topic/vta/install.rst:118
msgid ""
"For this test setup, follow the `\"Connect to a Computer\" "
"<https://pynq.readthedocs.io/en/latest/getting_started/pynq_z1_setup.html>`_"
" Ethernet setup instructions. To be able to talk to the board, make sure "
"to `assign your computer a static IP address "
"<https://pynq.readthedocs.io/en/latest/appendix.html#assign-your-"
"computer-a-static-ip>`_"
msgstr ""

#: ../../_staging/topic/vta/install.rst:120
msgid ""
"Once the board is powered on and connected to your development machine, "
"try connecting to it to make sure you've properly set up your Pynq board:"
msgstr ""

#: ../../_staging/topic/vta/install.rst:128
msgid "Pynq-Side RPC Server Build & Deployment"
msgstr ""

#: ../../_staging/topic/vta/install.rst:130
msgid ""
"Because the direct board-to-computer connection prevents the board from "
"directly accessing the internet, we'll need to mount the Pynq's file "
"system to your development machine's file system with `sshfs "
"<https://www.digitalocean.com/community/tutorials/how-to-use-sshfs-to-"
"mount-remote-file-systems-over-ssh>`_. Next we directly clone the TVM "
"repository into the sshfs mountpoint on your development machine."
msgstr ""

#: ../../_staging/topic/vta/install.rst:143
msgid ""
"Now that we've cloned the VTA repository in the Pynq's file system, we "
"can ssh into it and launch the build of the TVM-based RPC server. The "
"build process should take roughly 5 minutes."
msgstr ""

#: ../../_staging/topic/vta/install.rst:166
msgid ""
"You should see the following being displayed when starting the RPC "
"server. In order to run the next examples, you'll need to leave the RPC "
"server running in an ``ssh`` session."
msgstr ""

#: ../../_staging/topic/vta/install.rst:173
msgid "Tips regarding the Pynq RPC Server:"
msgstr ""

#: ../../_staging/topic/vta/install.rst:175
msgid ""
"The RPC server should be listening on port ``9091``. If not, an earlier "
"process might have terminated unexpectedly and it's recommended in this "
"case to just reboot the Pynq, and re-run the RPC server."
msgstr ""

#: ../../_staging/topic/vta/install.rst:176
msgid ""
"To kill the RPC server, just send the ``Ctrl + c`` command. You can re-"
"run it with ``sudo ./apps/pynq_rpc/start_rpc_server.sh``."
msgstr ""

#: ../../_staging/topic/vta/install.rst:177
msgid ""
"If unresponsive, the board can be rebooted by power-cycling it with the "
"physical power switch."
msgstr ""

#: ../../_staging/topic/vta/install.rst:180
msgid "Testing your Pynq-based Hardware Setup"
msgstr ""

#: ../../_staging/topic/vta/install.rst:182
msgid ""
"Before running the examples on your development machine, you'll need to "
"configure your host environment as follows:"
msgstr ""

#: ../../_staging/topic/vta/install.rst:191
msgid ""
"In addition, you'll need to edit the ``vta_config.json`` file on the host"
" to indicate that we are targeting the Pynq platform, by setting the "
"``TARGET`` field to ``\"pynq\"``. > Note: in contrast to our simulation "
"setup, there are no libraries to compile on the host side since the host "
"offloads all of the computation to the Pynq board."
msgstr ""

#: ../../_staging/topic/vta/install.rst:201
msgid ""
"This time again, we will run the 2D convolution testbench. Beforehand, we"
" need to program the Pynq board FPGA with a VTA bitstream, and build the "
"VTA runtime via RPC. The following ``test_program_rpc.py`` script will "
"perform two operations:"
msgstr ""

#: ../../_staging/topic/vta/install.rst:205
msgid ""
"FPGA programming, by downloading a pre-compiled bitstream from a `VTA "
"bitstream repository <https://github.com/uwsampl/vta-distro>`_ that "
"matches the default ``vta_config.json`` configuration set by the host, "
"and sending it over to the Pynq via RPC to program the Pynq's FPGA."
msgstr ""

#: ../../_staging/topic/vta/install.rst:206
msgid ""
"Runtime building on the Pynq, which needs to be run every time the "
"``vta_config.json`` configuration is modified. This ensures that the VTA "
"software runtime that generates the accelerator's executable via just-in-"
"time (JIT) compilation matches the specifications of the VTA design that "
"is programmed on the FPGA. The build process takes about 30 seconds to "
"complete so be patient!"
msgstr ""

#: ../../_staging/topic/vta/install.rst:214
msgid "We are now ready to run the 2D convolution testbench in hardware."
msgstr ""

#: ../../_staging/topic/vta/install.rst:221
msgid ""
"The performance metrics measured on the Pynq board will be reported for "
"each convolutional layer."
msgstr ""

#: ../../_staging/topic/vta/install.rst:223
msgid ""
"**Tip**: You can track progress of the FPGA programming and the runtime "
"rebuilding steps by looking at the RPC server's logging messages in your "
"Pynq ``ssh`` session."
msgstr ""

#: ../../_staging/topic/vta/install.rst:225
msgid "You can also try out our :ref:`VTA programming tutorials <vta-tutorials>`."
msgstr ""

#: ../../_staging/topic/vta/install.rst:228
msgid "Intel DE10 FPGA Setup"
msgstr ""

#: ../../_staging/topic/vta/install.rst:230
msgid ""
"Similar to the Pynq-side setup steps, this third guide bring us the "
"details on how can we setup up the Linux environment for Intel FPGA "
"boards like DE10-Nano."
msgstr ""

#: ../../_staging/topic/vta/install.rst:232
msgid ""
"In terms of hardware components, you would need the `DE10-Nano "
"Development Kit <https://www.terasic.com.tw/cgi-"
"bin/page/archive.pl?Language=English&No=1046>`_, which can be acquired "
"for $130, or $100 for academics from `Terasic "
"<https://www.terasic.com.tw/>`_. A microSD card would be delivered the "
"kit. Power cables and USB cables would be included as well. However, an "
"additional Ethernet cable would be needed to connect the board to LAN."
msgstr ""

#: ../../_staging/topic/vta/install.rst:234
msgid "The rest part of this guide would provide the steps to"
msgstr ""

#: ../../_staging/topic/vta/install.rst:236
msgid "Flash the microSD card with latest Angstrom Linux image"
msgstr ""

#: ../../_staging/topic/vta/install.rst:237
msgid "Cross-compilation setup"
msgstr ""

#: ../../_staging/topic/vta/install.rst:238
msgid "Device-side RPC server setup and deployment"
msgstr ""

#: ../../_staging/topic/vta/install.rst:241
msgid "DE10-Nano Board Setup"
msgstr ""

#: ../../_staging/topic/vta/install.rst:243
msgid ""
"Before powering up the device, we need to flash the microSD card image "
"with latest Angstrom Linux image."
msgstr ""

#: ../../_staging/topic/vta/install.rst:246
msgid "Flash SD Card and Boot Angstrom Linux"
msgstr ""

#: ../../_staging/topic/vta/install.rst:248
msgid ""
"To flash SD card and boot Linux on DE10-Nano, it is recommended to "
"navigate to the `Resource <https://www.terasic.com.tw/cgi-"
"bin/page/archive.pl?Language=English&CategoryNo=167&No=1046&PartNo=4>`_ "
"tab of the DE10-Nano product page from Terasic Inc. After registration "
"and login on the webpage, the prebuilt Angstrom Linux image would be "
"available for downloading and flashing. Specifically, to flash the "
"downloaded Linux SD card image into your physical SD card:"
msgstr ""

#: ../../_staging/topic/vta/install.rst:252
msgid "First, extract the gzipped archive file."
msgstr ""

#: ../../_staging/topic/vta/install.rst:258
msgid ""
"This would produce a single SD card image named ``de10-nano-image-"
"Angstrom-v2016.12.socfpga-sdimg`` (approx. 2.4 GB), it contains all the "
"file systems to boot Angstrom Linux."
msgstr ""

#: ../../_staging/topic/vta/install.rst:260
msgid ""
"Second, plugin a SD card that is ready to flash in your PC, and identify "
"the device id for the disk with ``fdisk -l``, or ``gparted`` if you feel "
"better to use GUI. The typical device id for your disk would likely to be"
" ``/dev/sdb``."
msgstr ""

#: ../../_staging/topic/vta/install.rst:262
msgid ""
"Then, flash the disk image into your physical SD card with the following "
"command:"
msgstr ""

#: ../../_staging/topic/vta/install.rst:269
msgid ""
"This would take a few minutes for your PC to write the whole file systems"
" into the SD card. After this process completes, you are ready to unmount"
" the SD card and insert it into your DE10-Nano board. Now you can connect"
" the power cable and serial port to boot the Angstrom Linux."
msgstr ""

#: ../../_staging/topic/vta/install.rst:273
msgid ""
"**Note**: When boot up from the microSD card, you might notice the "
"incompatibility of the Linux kernel ``zImage`` in the microSD card. In "
"this case, you might need to build the ``zImage`` file of your own from "
"`socfpga-4.9.78-ltsi <https://github.com/altera-opensource/linux-"
"socfpga/tree/socfpga-4.9.78-ltsi>`_ branch of the `linux-socfpga "
"<https://github.com/altera-opensource/linux-socfpga>`_ repository. For a "
"quick fix, you can also download a prebuilt version of the ``zImage`` "
"file `from this link <https://raw.githubusercontent.com/liangfu/de10"
"-nano-supplement/master/zImage>`_."
msgstr ""

#: ../../_staging/topic/vta/install.rst:277
msgid ""
"After connecting the usb cables to the DE10-Nano board, power on the "
"board by connecting the power cable. You may then connect to the serial "
"port of the device by using ``minicom`` on your host PC:"
msgstr ""

#: ../../_staging/topic/vta/install.rst:284
msgid ""
"The default user name for the device would be ``root``, and the password "
"is empty for the default user."
msgstr ""

#: ../../_staging/topic/vta/install.rst:286
msgid ""
"You may now start to install supporting Python3 packages (TVM has dropped"
" the support for Python2), specifically, they are ``numpy``, ``attrs`` "
"and ``decorator``."
msgstr ""

#: ../../_staging/topic/vta/install.rst:288
msgid ""
"**Note**: You might fail to install ``numpy`` by using ``pip3`` on the "
"DE10-Nano device. In that case, you have the option to either build your "
"own filesystem image for the board from `meta-de10-nano "
"<https://github.com/intel/meta-de10-nano>`_ repository; an alternative "
"option is to download prebuilt packages from existing Linux "
"distributions, e.g. Debian. For a quick fix, we have concatenated the "
"supplementary binary files `here "
"<https://raw.githubusercontent.com/liangfu/de10-nano-"
"supplement/master/rootfs_supplement.tgz>`_, and you can extract the files"
" into the root filesystem."
msgstr ""

#: ../../_staging/topic/vta/install.rst:294
msgid "Install Required Python Packages"
msgstr ""

#: ../../_staging/topic/vta/install.rst:296
msgid ""
"After accessing bash terminal from the serial port, we need to install "
"required Python packages before building and installing TVM and VTA "
"programs."
msgstr ""

#: ../../_staging/topic/vta/install.rst:299
msgid "Build Additional Components to Use VTA Bitstream"
msgstr ""

#: ../../_staging/topic/vta/install.rst:301
msgid ""
"To use the above built bitstream on DE10-Nano hardware, several "
"additional components need to be compiled for the system. Specifically, "
"to compile application executables for the system, you need to download "
"and install `SoCEDS "
"<http://fpgasoftware.intel.com/soceds/18.1/?edition=standard&download_manager=dlm3&platform=linux>`_"
" (recommended), or alternatively install the ``g++-arm-linux-gnueabihf`` "
"package on your host machine. You would also need a ``cma`` kernel module"
" to allocate contigous memory, and a driver for communicating with the "
"VTA subsystem."
msgstr ""

#: ../../_staging/topic/vta/install.rst:306
msgid "Bitstream Generation with Xilinx Toolchains"
msgstr ""

#: ../../_staging/topic/vta/install.rst:308
msgid ""
"If you're interested in generating the Xilinx FPGA bitstream on your own "
"instead of using the pre-built VTA bitstreams, follow the instructions "
"below."
msgstr ""

#: ../../_staging/topic/vta/install.rst:311
msgid "Xilinx Toolchain Installation"
msgstr ""

#: ../../_staging/topic/vta/install.rst:313
msgid ""
"We recommend using Vivado 2020.1 since our scripts have been tested to "
"work on this version of the Xilinx toolchains. Our guide is written for "
"Linux (Ubuntu) installation."
msgstr ""

#: ../../_staging/topic/vta/install.rst:316
msgid ""
"You’ll need to install Xilinx’ FPGA compilation toolchain, `Vivado HL "
"WebPACK 2020.1 <https://www.xilinx.com/products/design-"
"tools/vivado.html>`_, which a license-free version of the Vivado HLx "
"toolchain."
msgstr ""

#: ../../_staging/topic/vta/install.rst:319
msgid "Obtaining and Launching the Vivado GUI Installer"
msgstr ""

#: ../../_staging/topic/vta/install.rst:321
msgid ""
"Go to the `download webpage "
"<https://www.xilinx.com/support/download/index.html/content/xilinx/en/downloadNav"
"/vivado-design-tools/2020-1.html>`_, and download the Linux Self "
"Extracting Web Installer for Vivado HLx 2020.1: WebPACK and Editions."
msgstr ""

#: ../../_staging/topic/vta/install.rst:322
msgid ""
"You’ll have to sign in with a Xilinx account. This requires a Xilinx "
"account creation that will take 2 minutes."
msgstr ""

#: ../../_staging/topic/vta/install.rst:323
msgid ""
"Complete the Name and Address Verification by clicking “Next”, and you "
"will get the opportunity to download a binary file, called "
"``Xilinx_Unified_2020.1_0602_1208_Lin64.bin``."
msgstr ""

#: ../../_staging/topic/vta/install.rst:324
msgid ""
"Now that the file is downloaded, go to your ``Downloads`` directory, and "
"change the file permissions so it can be executed:"
msgstr ""

#: ../../_staging/topic/vta/install.rst:330
msgid "Now you can execute the binary:"
msgstr ""

#: ../../_staging/topic/vta/install.rst:337
msgid "Xilinx Vivado GUI Installer Steps"
msgstr ""

#: ../../_staging/topic/vta/install.rst:339
msgid "At this point you've launched the Vivado 2020.1 Installer GUI program."
msgstr ""

#: ../../_staging/topic/vta/install.rst:341
msgid "Click “Next” on the \"Welcome\" screen."
msgstr ""

#: ../../_staging/topic/vta/install.rst:342
msgid ""
"On the \"Select Install Type\" screen, enter your Xilinx user credentials"
" under the “User Authentication” box and select the “Download and Install"
" Now” option before clicking “Next”."
msgstr ""

#: ../../_staging/topic/vta/install.rst:343
msgid ""
"On the \"Accept License Agreements\" screen, accept all terms before "
"clicking “Next”."
msgstr ""

#: ../../_staging/topic/vta/install.rst:344
msgid ""
"On the \"Select Edition to Install\" screen, select the “Vivado HL "
"WebPACK” before clicking “Next”."
msgstr ""

#: ../../_staging/topic/vta/install.rst:345
msgid ""
"Under the \"Vivado HL WebPACK\" screen, before hitting “Next\", check the"
" following options (the rest should be unchecked): * Design Tools -> "
"Vivado Design Suite -> Vivado * Devices -> Production Devices -> SoCs -> "
"Zynq-7000 (if you are targeting the Pynq board) * Devices -> Production "
"Devices -> SoCs -> UltraScale+ MPSoC (if you are targeting the Ultra-96 "
"board)"
msgstr ""

#: ../../_staging/topic/vta/install.rst:349
msgid ""
"Your total download size should be about 5GB and the amount of Disk Space"
" Required 23GB."
msgstr ""

#: ../../_staging/topic/vta/install.rst:350
msgid ""
"On the \"Select Destination Directory\" screen, set the installation "
"directory before clicking “Next”. It might highlight some paths as red - "
"that’s because the installer doesn’t have the permission to write to the "
"directory. In that case select a path that doesn’t require special write "
"permissions (e.g. your home directory)."
msgstr ""

#: ../../_staging/topic/vta/install.rst:351
msgid "On the \"Installation Summary\" screen, hit “Install”."
msgstr ""

#: ../../_staging/topic/vta/install.rst:352
msgid ""
"An \"Installation Progress\" window will pop-up to track progress of the "
"download and the installation."
msgstr ""

#: ../../_staging/topic/vta/install.rst:353
msgid ""
"This process will take about 20-30 minutes depending on your connection "
"speed."
msgstr ""

#: ../../_staging/topic/vta/install.rst:354
msgid ""
"A pop-up window will inform you that the installation completed "
"successfully. Click \"OK\"."
msgstr ""

#: ../../_staging/topic/vta/install.rst:355
msgid ""
"Finally the \"Vivado License Manager\" will launch. Select \"Get Free ISE"
" WebPACK, ISE/Vivado IP or PetaLinux License\" and click \"Connect Now\" "
"to complete the license registration process."
msgstr ""

#: ../../_staging/topic/vta/install.rst:358
#: ../../_staging/topic/vta/install.rst:451
msgid "Environment Setup"
msgstr ""

#: ../../_staging/topic/vta/install.rst:360
msgid ""
"The last step is to update your ``~/.bashrc`` with the following lines. "
"This will include all of the Xilinx binary paths so you can launch "
"compilation scripts from the command line."
msgstr ""

#: ../../_staging/topic/vta/install.rst:369
msgid "HLS-based Custom VTA Bitstream Compilation for Pynq"
msgstr ""

#: ../../_staging/topic/vta/install.rst:371
msgid ""
"High-level hardware parameters are listed in the VTA configuration file "
"and can be customized by the user. For this custom VTA bitstream "
"compilation exercise, we'll change the frequency of our design, so it can"
" be clocked a little faster."
msgstr ""

#: ../../_staging/topic/vta/install.rst:374
msgid ""
"Set the ``HW_FREQ`` field to ``142``. The Pynq board supports 100, 142, "
"167 and 200MHz clocks. Note that the higher the frequency, the harder it "
"will be to close timing. Increasing the frequency can lead to timing "
"violation and thus faulty hardware execution."
msgstr ""

#: ../../_staging/topic/vta/install.rst:375
msgid ""
"Set the ``HW_CLK_TARGET`` to ``6``. This parameters refers to the target "
"clock period in nano seconds for HLS - a lower clock period leads to more"
" aggressive pipelining to achieve timing closure at higher frequencies. "
"Technically a 142MHz clock would require a 7ns target, but we "
"intentionally lower the clock target to 6ns to more aggressively pipeline"
" our design."
msgstr ""

#: ../../_staging/topic/vta/install.rst:377
msgid ""
"Bitstream generation is driven by a top-level ``Makefile`` under ``<tvm "
"root>/3rdparty/vta-hw/hardware/xilinx/``."
msgstr ""

#: ../../_staging/topic/vta/install.rst:379
msgid ""
"If you just want to simulate the VTA design in software emulation to make"
" sure that it is functional, enter:"
msgstr ""

#: ../../_staging/topic/vta/install.rst:387
msgid ""
"If you just want to generate the HLS-based VTA IP cores without launching"
" the entire design place and route, enter:"
msgstr ""

#: ../../_staging/topic/vta/install.rst:393
msgid ""
"You'll be able to view the HLS synthesis reports under ``<tvm "
"root>/3rdparty/vta-"
"hw/build/hardware/xilinx/hls/<configuration>/<block>/solution0/syn/report/<block>_csynth.rpt``"
msgstr ""

#: ../../_staging/topic/vta/install.rst:395
msgid ""
"**Note**: The ``<configuration>`` name is a string that summarizes the "
"VTA configuration parameters listed in the ``vta_config.json``. The "
"``<block>`` name refers to the specific module (or HLS function) that "
"compose the high-level VTA pipeline."
msgstr ""

#: ../../_staging/topic/vta/install.rst:397
msgid ""
"Finally to run the full hardware compilation and generate the VTA "
"bitstream, run ``make``."
msgstr ""

#: ../../_staging/topic/vta/install.rst:399
msgid ""
"This process is lengthy, and can take around up to an hour to complete "
"depending on your machine's specs. We recommend setting the "
"``VTA_HW_COMP_THREADS`` variable in the Makefile to take full advantage "
"of all the cores on your development machine."
msgstr ""

#: ../../_staging/topic/vta/install.rst:402
msgid ""
"Once the compilation completes, the generated bitstream can be found "
"under ``<tvm root>/3rdparty/vta-"
"hw/build/hardware/xilinx/vivado/<configuration>/export/vta.bit``."
msgstr ""

#: ../../_staging/topic/vta/install.rst:405
msgid "Using A Custom Bitstream"
msgstr ""

#: ../../_staging/topic/vta/install.rst:407
msgid ""
"We can program the new VTA FPGA bitstream by setting the bitstream path "
"of the ``vta.program_fpga()`` function in the tutorial examples, or in "
"the ``test_program_rpc.py`` script."
msgstr ""

#: ../../_staging/topic/vta/install.rst:413
msgid ""
"Instead of downloading a pre-built bitstream from the VTA bitstream "
"repository, TVM will instead use the new bitstream you just generated, "
"which is a VTA design clocked at a higher frequency. Do you observe a "
"noticeable performance increase on the ImageNet classification example?"
msgstr ""

#: ../../_staging/topic/vta/install.rst:419
msgid "Bitstream Generation with Intel Toolchains"
msgstr ""

#: ../../_staging/topic/vta/install.rst:421
msgid ""
"If you're interested in generating the Xilinx FPGA bitstream on your own "
"instead of using the pre-built VTA bistreams, follow the instructions "
"below."
msgstr ""

#: ../../_staging/topic/vta/install.rst:424
msgid "Intel Toolchain Installation"
msgstr ""

#: ../../_staging/topic/vta/install.rst:426
msgid ""
"It is recommended to use ``Intel Quartus Prime 18.1``, since the test "
"scripts contained in this document have been tested on this version."
msgstr ""

#: ../../_staging/topic/vta/install.rst:428
msgid ""
"You would need to install Intel's FPGA compilation toolchain, `Quartus "
"Prime Lite <http://fpgasoftware.intel.com/?edition=lite>`_, which is a "
"license-free version of the Intel Quartus Prime software."
msgstr ""

#: ../../_staging/topic/vta/install.rst:431
msgid "Obtaining and Launching the Quartus GUI Installer"
msgstr ""

#: ../../_staging/topic/vta/install.rst:433
msgid ""
"Go to the `download center "
"<http://fpgasoftware.intel.com/?edition=lite>`_, and download the linux "
"version of \"Quartus Prime (include Nios II EDS)\" and \"Cyclone V device"
" support\" files in the \"Separate file\" tab. This avoid downloading "
"unused device support files."
msgstr ""

#: ../../_staging/topic/vta/install.rst:434
msgid ""
"Sign in the form if you have an account, or register on the right side of"
" the web page to create an account."
msgstr ""

#: ../../_staging/topic/vta/install.rst:435
msgid ""
"After signed in, you are able to download the installer and the device "
"support files."
msgstr ""

#: ../../_staging/topic/vta/install.rst:436
msgid ""
"Now that the files are downloaded, go to your ``Downloads`` directory, "
"and change the file permissions:"
msgstr ""

#: ../../_staging/topic/vta/install.rst:442
msgid ""
"Now ensure both the installer and device support files are in the same "
"directory, and you can run the install with:"
msgstr ""

#: ../../_staging/topic/vta/install.rst:448
msgid ""
"Follow the instructions on the pop-up GUI form, and install all the "
"content in the ``/usr/local`` directory. After installation, "
"``/usr/local/intelFPGA_lite/18.1`` would be created and the Quartus "
"program along with other programs would be available in the folder."
msgstr ""

#: ../../_staging/topic/vta/install.rst:453
msgid ""
"Similar to what should be done for Xilinx toolchain, the following line "
"should be added to your ``~/.bashrc``."
msgstr ""

#: ../../_staging/topic/vta/install.rst:462
msgid ""
"This would add quartus binary path into your ``PATH`` environment "
"variable, so you can launch compilation scripts from the command line."
msgstr ""

#: ../../_staging/topic/vta/install.rst:465
msgid "Chisel-based Custom VTA Bitstream Compilation for DE10-Nano"
msgstr ""

#: ../../_staging/topic/vta/install.rst:467
msgid ""
"Similar to the HLS-based design, high-level hardware parameters in "
"Chisel-based design are listed in the VTA configuration file "
"`Configs.scala <https://github.com/apache/tvm/blob/main/3rdparty/vta-"
"hw/hardware/chisel/src/main/scala/core/Configs.scala>`_, and they can be "
"customized by the user."
msgstr ""

#: ../../_staging/topic/vta/install.rst:469
msgid ""
"For Intel FPGA, bitstream generation is driven by a top-level "
"``Makefile`` under ``<tvm root>/3rdparty/vta-hw/hardware/intel``."
msgstr ""

#: ../../_staging/topic/vta/install.rst:471
msgid ""
"If you just want to generate the Chisel-based VTA IP core for the "
"DE10-Nano board without compiling the design for the FPGA hardware, "
"enter:"
msgstr ""

#: ../../_staging/topic/vta/install.rst:478
msgid ""
"Then you'll be able to locate the generated verilog file at ``<tvm "
"root>/3rdparty/vta-"
"hw/build/hardware/intel/chisel/<configuration>/VTA.DefaultDe10Config.v``."
msgstr ""

#: ../../_staging/topic/vta/install.rst:480
msgid ""
"If you would like to run the full hardware compilation for the "
"``de10nano`` board:"
msgstr ""

#: ../../_staging/topic/vta/install.rst:486
msgid ""
"This process might be a bit lengthy, and might take up to half an hour to"
" complete depending on the performance of your PC. The Quartus Prime "
"software would automatically detect the number of cores available on your"
" PC and try to utilize all of them to perform such process."
msgstr ""

#: ../../_staging/topic/vta/install.rst:488
msgid ""
"Once the compilation completes, the generated bistream can be found under"
" ``<tvm root>/3rdparty/vta-"
"hw/build/hardware/intel/quartus/<configuration>/export/vta.rbf``. You can"
" also open the Quartus project file (.qpf) available at ``<tvm "
"root>/3rdparty/vta-"
"hw/build/hardware/intel/quartus/<configuration>/de10_nano_top.qpf`` to "
"look around the generated reports."
msgstr ""

