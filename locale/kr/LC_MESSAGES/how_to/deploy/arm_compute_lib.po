# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020 - 2021, Apache Software Foundation
# This file is distributed under the same license as the tvm package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: tvm 0.8.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-02-06 10:20+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../_staging/how_to/deploy/arm_compute_lib.rst:19
msgid "Relay Arm\\ :sup:`Â®` Compute Library Integration"
msgstr ""

#: ../../_staging/how_to/deploy/arm_compute_lib.rst:20
msgid "**Author**: `Luke Hutton <https://github.com/lhutton1>`_"
msgstr ""

#: ../../_staging/how_to/deploy/arm_compute_lib.rst:23
msgid "Introduction"
msgstr ""

#: ../../_staging/how_to/deploy/arm_compute_lib.rst:25
msgid ""
"Arm Compute Library (ACL) is an open source project that provides "
"accelerated kernels for Arm CPU's and GPU's. Currently the integration "
"offloads operators to ACL to use hand-crafted assembler routines in the "
"library. By offloading select operators from a relay graph to ACL we can "
"achieve a performance boost on such devices."
msgstr ""

#: ../../_staging/how_to/deploy/arm_compute_lib.rst:31
msgid "Installing Arm Compute Library"
msgstr ""

#: ../../_staging/how_to/deploy/arm_compute_lib.rst:33
msgid ""
"Before installing Arm Compute Library, it is important to know what "
"architecture to build for. One way to determine this is to use `lscpu` "
"and look for the \"Model name\" of the CPU. You can then use this to "
"determine the architecture by looking online."
msgstr ""

#: ../../_staging/how_to/deploy/arm_compute_lib.rst:37
msgid ""
"TVM only supports a single version of ACL, currently this is v21.08, "
"there are two recommended ways to build and install the required "
"libraries:"
msgstr ""

#: ../../_staging/how_to/deploy/arm_compute_lib.rst:40
msgid ""
"Use the script located at "
"`docker/install/ubuntu_download_arm_compute_lib_binaries.sh`. You can use"
" this script for downloading ACL binaries for the architecture and "
"extensions specified in `target_lib`, these will be installed to the "
"location denoted by `install_path`."
msgstr ""

#: ../../_staging/how_to/deploy/arm_compute_lib.rst:43
msgid ""
"Alternatively, you can download the pre-built binaries from: "
"https://github.com/ARM-software/ComputeLibrary/releases. When using this "
"package, you will need to select the binaries for the architecture and "
"extensions you require, then make sure they are visible to CMake:"
msgstr ""

#: ../../_staging/how_to/deploy/arm_compute_lib.rst:54
msgid ""
"In both cases you will need to set USE_ARM_COMPUTE_LIB_GRAPH_EXECUTOR to "
"the path where the ACL package is located. CMake will look in /path-to-"
"acl/ along with /path-to-acl/lib and /path-to-acl/build for the required "
"binaries. See the section below for more information on how to use these "
"configuration options."
msgstr ""

#: ../../_staging/how_to/deploy/arm_compute_lib.rst:59
msgid "Building with ACL support"
msgstr ""

#: ../../_staging/how_to/deploy/arm_compute_lib.rst:61
msgid ""
"The current implementation has two separate build options in CMake. The "
"reason for this split is because ACL cannot be used on an x86 machine. "
"However, we still want to be able compile an ACL runtime module on an x86"
" machine."
msgstr ""

#: ../../_staging/how_to/deploy/arm_compute_lib.rst:65
msgid ""
"USE_ARM_COMPUTE_LIB=ON/OFF - Enabling this flag will add support for "
"compiling an ACL runtime module."
msgstr ""

#: ../../_staging/how_to/deploy/arm_compute_lib.rst:66
msgid ""
"USE_ARM_COMPUTE_LIB_GRAPH_EXECUTOR=ON/OFF/path-to-acl - Enabling this "
"flag will allow the graph executor to compute the ACL offloaded "
"functions."
msgstr ""

#: ../../_staging/how_to/deploy/arm_compute_lib.rst:69
msgid ""
"These flags can be used in different scenarios depending on your setup. "
"For example, if you want to compile an ACL module on an x86 machine and "
"then run the module on a remote Arm device via RPC, you will need to use "
"USE_ARM_COMPUTE_LIB=ON on the x86 machine and "
"USE_ARM_COMPUTE_LIB_GRAPH_EXECUTOR=ON on the remote AArch64 device."
msgstr ""

#: ../../_staging/how_to/deploy/arm_compute_lib.rst:74
msgid ""
"By default both options are set to OFF. Using "
"USE_ARM_COMPUTE_LIB_GRAPH_EXECUTOR=ON will mean that ACL binaries are "
"searched for by CMake in the default locations (see "
"https://cmake.org/cmake/help/v3.4/command/find_library.html). In addition"
" to this, /path-to-tvm-project/acl/ will also be searched. It is likely "
"that you will need to set your own path to locate ACL. This can be done "
"by specifying a path in the place of ON."
msgstr ""

#: ../../_staging/how_to/deploy/arm_compute_lib.rst:80
msgid "These flags should be set in your config.cmake file. For example:"
msgstr ""

#: ../../_staging/how_to/deploy/arm_compute_lib.rst:89
msgid "Usage"
msgstr ""

#: ../../_staging/how_to/deploy/arm_compute_lib.rst:93
msgid "This section may not stay up-to-date with changes to the API."
msgstr ""

#: ../../_staging/how_to/deploy/arm_compute_lib.rst:95
msgid ""
"Create a relay graph. This may be a single operator or a whole graph. The"
" intention is that any relay graph can be input. The ACL integration will"
" only pick supported operators to be offloaded whilst the rest will be "
"computed via TVM. (For this example we will use a single max_pool2d "
"operator)."
msgstr ""

#: ../../_staging/how_to/deploy/arm_compute_lib.rst:118
msgid "Annotate and partition the graph for ACL."
msgstr ""

#: ../../_staging/how_to/deploy/arm_compute_lib.rst:126
msgid "Build the Relay graph."
msgstr ""

#: ../../_staging/how_to/deploy/arm_compute_lib.rst:135
msgid "Export the module."
msgstr ""

#: ../../_staging/how_to/deploy/arm_compute_lib.rst:144
msgid ""
"Run Inference. This must be on an Arm device. If compiling on x86 device "
"and running on AArch64, consider using the RPC mechanism. :ref:`Tutorials"
" for using the RPC mechanism <tutorial-cross-compilation-and-rpc>`"
msgstr ""

#: ../../_staging/how_to/deploy/arm_compute_lib.rst:160
msgid "More examples"
msgstr ""

#: ../../_staging/how_to/deploy/arm_compute_lib.rst:161
msgid ""
"The example above only shows a basic example of how ACL can be used for "
"offloading a single Maxpool2D. If you would like to see more examples for"
" each implemented operator and for networks refer to the tests: "
"`tests/python/contrib/test_arm_compute_lib`. Here you can modify "
"`test_config.json` to configure how a remote device is created in "
"`infrastructure.py` and, as a result, how runtime tests will be run."
msgstr ""

#: ../../_staging/how_to/deploy/arm_compute_lib.rst:167
msgid "An example configuration for `test_config.json`:"
msgstr ""

#: ../../_staging/how_to/deploy/arm_compute_lib.rst:169
msgid ""
"connection_type - The type of RPC connection. Options: local, tracker, "
"remote."
msgstr ""

#: ../../_staging/how_to/deploy/arm_compute_lib.rst:170
msgid "host - The host device to connect to."
msgstr ""

#: ../../_staging/how_to/deploy/arm_compute_lib.rst:171
msgid "port - The port to use when connecting."
msgstr ""

#: ../../_staging/how_to/deploy/arm_compute_lib.rst:172
msgid "target - The target to use for compilation."
msgstr ""

#: ../../_staging/how_to/deploy/arm_compute_lib.rst:173
msgid "device_key - The device key when connecting via a tracker."
msgstr ""

#: ../../_staging/how_to/deploy/arm_compute_lib.rst:174
msgid ""
"cross_compile - Path to cross compiler when connecting from a non-arm "
"platform e.g. aarch64-linux-gnu-g++."
msgstr ""

#: ../../_staging/how_to/deploy/arm_compute_lib.rst:189
msgid "Operator support"
msgstr ""

#: ../../_staging/how_to/deploy/arm_compute_lib.rst:191
msgid "Relay Node"
msgstr ""

#: ../../_staging/how_to/deploy/arm_compute_lib.rst:191
msgid "Remarks"
msgstr ""

#: ../../_staging/how_to/deploy/arm_compute_lib.rst:193
msgid "nn.conv2d"
msgstr ""

#: ../../_staging/how_to/deploy/arm_compute_lib.rst:195
#: ../../_staging/how_to/deploy/arm_compute_lib.rst:207
#: ../../_staging/how_to/deploy/arm_compute_lib.rst:218
#: ../../_staging/how_to/deploy/arm_compute_lib.rst:224
#: ../../_staging/how_to/deploy/arm_compute_lib.rst:231
msgid "fp32:"
msgstr ""

#: ../../_staging/how_to/deploy/arm_compute_lib.rst:194
msgid "Simple: nn.conv2d Composite: nn.pad?, nn.conv2d, nn.bias_add?, nn.relu?"
msgstr ""

#: ../../_staging/how_to/deploy/arm_compute_lib.rst:197
#: ../../_staging/how_to/deploy/arm_compute_lib.rst:203
msgid ""
"Normal and depth-wise (when kernel is 3x3 or 5x5 and strides are 1x1 or "
"2x2) convolution supported. Grouped convolution is not supported."
msgstr ""

#: ../../_staging/how_to/deploy/arm_compute_lib.rst:200
msgid "qnn.conv2d"
msgstr ""

#: ../../_staging/how_to/deploy/arm_compute_lib.rst:201
#: ../../_staging/how_to/deploy/arm_compute_lib.rst:210
#: ../../_staging/how_to/deploy/arm_compute_lib.rst:220
#: ../../_staging/how_to/deploy/arm_compute_lib.rst:226
msgid "uint8:"
msgstr ""

#: ../../_staging/how_to/deploy/arm_compute_lib.rst:201
msgid "Composite: nn.pad?, nn.conv2d, nn.bias_add?, nn.relu?, qnn.requantize"
msgstr ""

#: ../../_staging/how_to/deploy/arm_compute_lib.rst:206
msgid "nn.dense"
msgstr ""

#: ../../_staging/how_to/deploy/arm_compute_lib.rst:207
msgid "Simple: nn.dense Composite: nn.dense, nn.bias_add?"
msgstr ""

#: ../../_staging/how_to/deploy/arm_compute_lib.rst:210
msgid "qnn.dense"
msgstr ""

#: ../../_staging/how_to/deploy/arm_compute_lib.rst:211
msgid "Composite: qnn.dense, nn.bias_add?, qnn.requantize"
msgstr ""

#: ../../_staging/how_to/deploy/arm_compute_lib.rst:213
msgid "nn.max_pool2d"
msgstr ""

#: ../../_staging/how_to/deploy/arm_compute_lib.rst:213
#: ../../_staging/how_to/deploy/arm_compute_lib.rst:215
#: ../../_staging/how_to/deploy/arm_compute_lib.rst:234
msgid "fp32, uint8"
msgstr ""

#: ../../_staging/how_to/deploy/arm_compute_lib.rst:215
msgid "nn.global_max_pool2d"
msgstr ""

#: ../../_staging/how_to/deploy/arm_compute_lib.rst:217
msgid "nn.avg_pool2d"
msgstr ""

#: ../../_staging/how_to/deploy/arm_compute_lib.rst:218
msgid "Simple: nn.avg_pool2d"
msgstr ""

#: ../../_staging/how_to/deploy/arm_compute_lib.rst:221
#: ../../_staging/how_to/deploy/arm_compute_lib.rst:227
msgid "Composite: cast(int32), nn.avg_pool2d, cast(uint8)"
msgstr ""

#: ../../_staging/how_to/deploy/arm_compute_lib.rst:223
msgid "nn.global_avg_pool2d"
msgstr ""

#: ../../_staging/how_to/deploy/arm_compute_lib.rst:224
msgid "Simple: nn.global_avg_pool2d"
msgstr ""

#: ../../_staging/how_to/deploy/arm_compute_lib.rst:229
msgid "power(of 2) + nn.avg_pool2d + sqrt"
msgstr ""

#: ../../_staging/how_to/deploy/arm_compute_lib.rst:229
msgid "A special case for L2 pooling."
msgstr ""

#: ../../_staging/how_to/deploy/arm_compute_lib.rst:232
msgid "Composite: power(of 2), nn.avg_pool2d, sqrt"
msgstr ""

#: ../../_staging/how_to/deploy/arm_compute_lib.rst:234
msgid "reshape"
msgstr ""

#: ../../_staging/how_to/deploy/arm_compute_lib.rst:236
msgid "maximum"
msgstr ""

#: ../../_staging/how_to/deploy/arm_compute_lib.rst:236
#: ../../_staging/how_to/deploy/arm_compute_lib.rst:238
msgid "fp32"
msgstr ""

#: ../../_staging/how_to/deploy/arm_compute_lib.rst:238
msgid "add"
msgstr ""

#: ../../_staging/how_to/deploy/arm_compute_lib.rst:240
msgid "qnn.add"
msgstr ""

#: ../../_staging/how_to/deploy/arm_compute_lib.rst:240
msgid "uint8"
msgstr ""

#: ../../_staging/how_to/deploy/arm_compute_lib.rst:244
msgid ""
"A composite operator is a series of operators that map to a single Arm "
"Compute Library operator. You can view this as being a single fused "
"operator from the view point of Arm Compute Library. '?' denotes an "
"optional operator in the series of operators that make up a composite "
"operator."
msgstr ""

#: ../../_staging/how_to/deploy/arm_compute_lib.rst:250
msgid "Adding a new operator"
msgstr ""

#: ../../_staging/how_to/deploy/arm_compute_lib.rst:251
msgid ""
"Adding a new operator requires changes to a series of places. This "
"section will give a hint on what needs to be changed and where, it will "
"not however dive into the complexities for an individual operator. This "
"is left to the developer."
msgstr ""

#: ../../_staging/how_to/deploy/arm_compute_lib.rst:255
msgid "There are a series of files we need to make changes to:"
msgstr ""

#: ../../_staging/how_to/deploy/arm_compute_lib.rst:257
msgid ""
"`python/relay/op/contrib/arm_compute_lib.py` In this file we define the "
"operators we wish to offload using the `op.register` decorator. This will"
" mean the annotation pass recognizes this operator as ACL offloadable."
msgstr ""

#: ../../_staging/how_to/deploy/arm_compute_lib.rst:259
msgid ""
"`src/relay/backend/contrib/arm_compute_lib/codegen.cc` Implement "
"`Create[OpName]JSONNode` method. This is where we declare how the "
"operator should be represented by JSON. This will be used to create the "
"ACL module."
msgstr ""

#: ../../_staging/how_to/deploy/arm_compute_lib.rst:261
msgid ""
"`src/runtime/contrib/arm_compute_lib/acl_runtime.cc` Implement "
"`Create[OpName]Layer` method. This is where we define how the JSON "
"representation can be used to create an ACL function. We simply define "
"how to translate from the JSON representation to ACL API."
msgstr ""

#: ../../_staging/how_to/deploy/arm_compute_lib.rst:264
msgid ""
"`tests/python/contrib/test_arm_compute_lib` Add unit tests for the given "
"operator."
msgstr ""

