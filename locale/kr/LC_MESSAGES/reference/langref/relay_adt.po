# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020 - 2021, Apache Software Foundation
# This file is distributed under the same license as the tvm package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: tvm 0.8.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-02-06 10:20+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../_staging/reference/langref/relay_adt.rst:23
msgid "Algebraic Data Types in Relay"
msgstr ""

#: ../../_staging/reference/langref/relay_adt.rst:25
msgid ""
"Algebraic data types (ADTs) are a staple feature of functional "
"programming languages, particularly those derived from ML, because they "
"express data structures in a manner that is easy to reason about when "
"writing recursive computations. Because recursion is intended to be one "
"of the primary mechanisms of control flow in Relay, it is important that "
"Relay include ADTs in order to best express loops and other control flow "
"structures that must be implemented using recursion."
msgstr ""

#: ../../_staging/reference/langref/relay_adt.rst:33
msgid "Defining and Matching on an ADT"
msgstr ""

#: ../../_staging/reference/langref/relay_adt.rst:35
msgid ""
"*Note: ADTs are not presently supported in the text format. The syntax "
"here is speculative, based on ADTs in other languages.*"
msgstr ""

#: ../../_staging/reference/langref/relay_adt.rst:37
msgid ""
"ADTs can be understood as a generalized version of :code:`enum` and "
":code:`struct` types from C-like languages. Like a C :code:`struct:`, an "
"ADT instance is a container for fields of specified types, but the type "
"system allows for the same type to encode different possible groupings of"
" fields in a systematic manner, similar to C :code:`enum` types, which "
"are defined using a finite set of possible values named by the user."
msgstr ""

#: ../../_staging/reference/langref/relay_adt.rst:43
msgid ""
"Specifically, an ADT is defined as a named group of constructors, each of"
" which is a function that takes values of specified types as arguments "
"and returns an instance of the named ADT. An ADT instance simply contains"
" the values of the arguments passed to the constructor call used to "
"produce it."
msgstr ""

#: ../../_staging/reference/langref/relay_adt.rst:48
msgid ""
"An ADT value is opaque until it is *deconstructed*, allowing the "
"arguments to the constructor to be accessed again and used to compute new"
" values. Because a particular ADT can have multiple constructors with "
"different signatures, it is usually necessary to branch on the different "
"possible constructors, resulting in the *match* syntax for ADTs. Hence, "
"ADTs are sometimes called \"tagged unions\" because an ADT instance is "
"tagged by the name of the constructor used to produce it and can later be"
" inspected based on the tag."
msgstr ""

#: ../../_staging/reference/langref/relay_adt.rst:56
msgid ""
"Because each ADT has a finite set of constructors, it is straightforward "
"to determine whether a function processing an ADT instance is handling "
"all possible cases. In particular, the type system can ensure that types "
"are properly assigned in all cases when deconstructing an ADT instance, "
"in contrast to :code:`union` types in C. Hence, it is often easy to "
"reason about ADTs."
msgstr ""

#: ../../_staging/reference/langref/relay_adt.rst:62
msgid ""
"*Implementation detail: Relay ADT definitions are global and are stored "
"in the module, similarly to global function definitions. An ADT name is, "
"in fact, a global type variable (just as a global function name is a "
"global variable). The module keeps a mapping of ADT names (global type "
"variables) to the list of constructors for that ADT.*"
msgstr ""

#: ../../_staging/reference/langref/relay_adt.rst:64
msgid ""
"Below is a simple example of defining an ADT and using it in a function "
"via a match expression:"
msgstr ""

#: ../../_staging/reference/langref/relay_adt.rst:93
msgid ""
"Note that ADTs are identified by name, meaning that two ADTs with "
"structurally identical constructors will nevertheless be distinct data "
"types from the point of view of the typechecker."
msgstr ""

#: ../../_staging/reference/langref/relay_adt.rst:112
msgid "Type-Checking ADTs and Polymorphism"
msgstr ""

#: ../../_staging/reference/langref/relay_adt.rst:114
msgid ""
"This section will go into more specific detail about the typing of ADTs. "
"Most of the complexity involved results from the fact that, as with "
"functions, ADTs can be polymorphic and take type parameters."
msgstr ""

#: ../../_staging/reference/langref/relay_adt.rst:118
msgid ""
"For example, one of the standard ADTs commonly used in functional "
"programming languages is the optional type, defined here:"
msgstr ""

#: ../../_staging/reference/langref/relay_adt.rst:129
msgid ""
"Optional types are commonly used as the return type for any operation "
"involving querying into a data structure (returning :code:`Some(v)` if a "
"value is found and :code:`None` if it isn't). Taking a type parameter in "
"the definition allows the same optional type to be used in a wide variety"
" of situations, rather than having to define a unique ADT for each "
"different type that could be contained in it."
msgstr ""

#: ../../_staging/reference/langref/relay_adt.rst:136
msgid ""
"However, it is important to ensure that option types whose contents are "
"of different types can still be distinguished by the type system, since "
"it would violate type safety if a function expecting an option containing"
" a :code:`Tensor[(), int32]` instead receives an option containing a "
":code:`Tensor[(3, 4), float32]`. As this example may imply, an ADT "
"instance is thus given a type that contains the concrete type arguments "
"for that instance, ensuring the information is kept around. Let the below"
" example illustrate:"
msgstr ""

#: ../../_staging/reference/langref/relay_adt.rst:167
msgid ""
"The syntax for the annotated type arguments (e.g., "
":code:`Optional[Tensor[(), int32]]`) in the above examples is called a "
"\"type call,\" treating the polymorphic ADT definition as a type-level "
"function (taking type params and returning a type, namely the ADT). Any "
"ADT appearing in a type annotation or function signature must be "
"annotated with type arguments (a non-polymorphic ADT must be in a type "
"call with no arguments)."
msgstr ""

#: ../../_staging/reference/langref/relay_adt.rst:175
msgid ""
"Thus, we can say in general that if constructor :code:`C` that takes "
"arguments of types :code:`T1, ..., Tn` is a constructor for an ADT "
":code:`D` that takes type parameters :code:`v1, ..., vn` (where "
":code:`T1, ..., Tn` may contain any of the :code:`v1, ..., vn`), then "
":code:`C` has the type :code:`fun<v1, ..., vn>(T1, ..., Tn) -> D[v1, ...,"
" vn]`. This means that constructors are typed like ordinary functions and"
" thus appear inside call nodes and can be passed to or returned by other "
"functions. In particular, the :code:`Some` example above has the "
"signature :code:`fun<a>(a) -> Optional[a]`, while :code:`None` has the "
"signature :code:`fun<a>() -> Optional[a]`."
msgstr ""

#: ../../_staging/reference/langref/relay_adt.rst:188
msgid "Recursion with ADTs"
msgstr ""

#: ../../_staging/reference/langref/relay_adt.rst:190
msgid ""
"ADT definitions are allowed to be recursive, that is, a definition for an"
" ADT named :code:`D` can assume the existence of type :code:`D` and use "
"it as an argument to constructors. Recursion allows ADTs to represent "
"complex structures such as lists or trees; it is the source of much of "
"ADTs' power in functional programming, since an appropriately designed "
"data structure could make it easy to concisely express a computation with"
" a recursive function."
msgstr ""

#: ../../_staging/reference/langref/relay_adt.rst:198
msgid ""
"Many commonly used ADTs involve recursion; some of these are given in "
"`Common ADT Uses`_. As an example here, we will examine the list ADT, "
"ubiquitous in functional languages:"
msgstr ""

#: ../../_staging/reference/langref/relay_adt.rst:209
msgid ""
"(Notice that the recursive reference to :code:`List` is wrapped in a type"
" call even in the constructor.)"
msgstr ""

#: ../../_staging/reference/langref/relay_adt.rst:212
msgid ""
"The above definition means that a list of values of a particular type can"
" be represented by nesting :code:`Cons` constructors until the end of the"
" list is reached, which can be indicated with a :code:`Nil` (representing"
" an empty list)."
msgstr ""

#: ../../_staging/reference/langref/relay_adt.rst:217
msgid ""
"Lists represented in this manner can easily be recursively processed. For"
" example, the following function sums a list of integers:"
msgstr ""

#: ../../_staging/reference/langref/relay_adt.rst:230
msgid ""
"As it happens, many recursive functions on lists like the one just given "
"share structures that can be factored out into generic, easily usable "
"functions that will be discussed under `Common ADT Uses`_."
msgstr ""

#: ../../_staging/reference/langref/relay_adt.rst:237
msgid "Pattern Matching in Match Expressions"
msgstr ""

#: ../../_staging/reference/langref/relay_adt.rst:239
msgid ""
"Match expressions in Relay, as in other functional languages, are capable"
" of more versatile pattern matching than simply having one case for each "
"constructor for the datatype of the value being deconstructed."
msgstr ""

#: ../../_staging/reference/langref/relay_adt.rst:243
msgid "In particular, the patterns in match cases can be built up recursively:"
msgstr ""

#: ../../_staging/reference/langref/relay_adt.rst:245
msgid ""
"Constructor patterns match for a particular ADT constructor. If a value "
"matches the constructor, each argument to the constructor will be matched"
" against a nested pattern."
msgstr ""

#: ../../_staging/reference/langref/relay_adt.rst:246
msgid "Wildcard patterns will match any value and will not bind to a variable."
msgstr ""

#: ../../_staging/reference/langref/relay_adt.rst:247
msgid ""
"Variable patterns will match any value and bind it to a local variable, "
"scoped to the match clause."
msgstr ""

#: ../../_staging/reference/langref/relay_adt.rst:249
msgid ""
"In the simple case of :code:`@list_sum` above, the first match case has a"
" :code:`Nil` constructor pattern (with no nested arguments) and the "
"second has a :code:`Cons` constructor pattern that uses variable patterns"
" for each of the arguments to :code:`Cons`."
msgstr ""

#: ../../_staging/reference/langref/relay_adt.rst:252
msgid ""
"The below example uses a wildcard pattern to ignore one of the arguments "
"to :code:`Cons`:"
msgstr ""

#: ../../_staging/reference/langref/relay_adt.rst:263
msgid ""
"Here, a constructor pattern is nested inside another constructor pattern "
"to avoid nested match expressions for a list option. A top-level wildcard"
" pattern is also used to handle all cases that do not match the first "
"clause:"
msgstr ""

#: ../../_staging/reference/langref/relay_adt.rst:281
msgid ""
"Note that a match expression checks its patterns in the order the cases "
"are listed: the first clause whose pattern that matches the input value "
"is the one that is evaluated. Here, a top-level variable pattern binds "
"the whole input value:"
msgstr ""

#: ../../_staging/reference/langref/relay_adt.rst:297
msgid "Common ADT Uses"
msgstr ""

#: ../../_staging/reference/langref/relay_adt.rst:299
msgid ""
"In functional programming languages, certain ADTs provide useful "
"facilities for writing common programs. Parametric polymorphism and "
"higher-order functions allow these ADTs to be easily reuseable and for "
"generic functions to manipulate them in common situations. Relay includes"
" a \"Prelude\" of certain pre-defined ADTs and functions for them that "
"correspond to the indispensable ADTs of other languages."
msgstr ""

#: ../../_staging/reference/langref/relay_adt.rst:304
msgid ""
"The option type defined under `Type-Checking ADTs and Polymorphism`_ is "
"one such ADT, used whenever it can make sense for a function to only "
"return a value under certain circumstances. Having the option type allows"
" for the type system to keep track of which functions always return a "
"value of a certain type versus returning an option of that type, ensuring"
" that any options are always explicitly checked (contrast with returning "
"null pointers or throwing exceptions as other ways to addressing that "
"problem)."
msgstr ""

#: ../../_staging/reference/langref/relay_adt.rst:311
msgid ""
"Lists (defined in `Recursion with ADTs`_) can be manipulated by generic "
"functions in a manner similar to list comprehensions and certain library "
"functions in Python. Below are very common functions for iterating "
"through lists, which are included in Relay's Prelude. (These have all "
"been extensively characterized in the functional programming literature, "
"and we do not attempt to reproduce that work in this document.)"
msgstr ""

#: ../../_staging/reference/langref/relay_adt.rst:342
msgid ""
"Using these iteration constructs, many common operations over lists can "
"be expressed compactly. For example, the following map doubles all "
"members of a list:"
msgstr ""

#: ../../_staging/reference/langref/relay_adt.rst:358
msgid "The following right fold concatenates two lists:"
msgstr ""

#: ../../_staging/reference/langref/relay_adt.rst:373
msgid "The following left fold flattens a list of lists (using concatenation):"
msgstr ""

#: ../../_staging/reference/langref/relay_adt.rst:387
msgid ""
"Note that these iteration constructs can be implemented directly in "
"Relay's source language and more can easily be defined (and for more data"
" types, like trees), rather than being constructs built into the language"
" (e.g., `\"foreach\" in MXNet "
"<https://mxnet.apache.org/versions/master/tutorials/control_flow/ControlFlowTutorial.html>`__)."
" ADTs and their extensibility allow for a broad range of iterations and "
"data structures to be expressed in Relay and supported by the type system"
" without having to modify the language implementation."
msgstr ""

#: ../../_staging/reference/langref/relay_adt.rst:395
msgid "Implementing Neural Nets Using ADTs"
msgstr ""

#: ../../_staging/reference/langref/relay_adt.rst:397
msgid ""
"In `this 2015 blog post <http://colah.github.io/posts/2015-09-NN-Types-"
"FP/>`__, Christopher Olah notes that many neural networks can be easily "
"expressed using common functional programming constructs. Relay's ADTs "
"allow those examples to be implemented directly in TVM."
msgstr ""

#: ../../_staging/reference/langref/relay_adt.rst:401
msgid ""
"First let us suppose that we have a function corresponding to a trained "
"recurrent neural net (RNN) cell, which takes in a past state and an input"
" value and returns a new state and output value. In Relay, this would "
"have the following signature:"
msgstr ""

#: ../../_staging/reference/langref/relay_adt.rst:409
msgid ""
"We might consider a ReLU cell as a simple concrete example, with a "
"trained version below:"
msgstr ""

#: ../../_staging/reference/langref/relay_adt.rst:431
msgid ""
"Following Olah's example, we can encode a sequence (list) of inputs with "
"the following left fold:"
msgstr ""

#: ../../_staging/reference/langref/relay_adt.rst:440
msgid ""
"Using an *unfold* iterator (from Haskell's standard library), the same "
"cell could be used to make a generator network (which takes a single "
"input and produces a sequence of outputs):"
msgstr ""

#: ../../_staging/reference/langref/relay_adt.rst:469
msgid ""
"An accumulating map (a fold that simultaneously updates an accumulator "
"value and a list of outputs) can be used to write a general RNN (with an "
"output for every input):"
msgstr ""

#: ../../_staging/reference/langref/relay_adt.rst:500
msgid ""
"Olah also gives an example of a bidirectional neural network, in which "
"two sets of cells (which may have different weights) process the input in"
" both directions and produce a single set of outputs. The following is a "
"Relay implementation of that example:"
msgstr ""

