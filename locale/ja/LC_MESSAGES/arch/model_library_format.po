# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020 - 2021, Apache Software Foundation
# This file is distributed under the same license as the tvm package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: tvm 0.8.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-02-06 10:20+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../_staging/arch/model_library_format.rst:19
msgid "Model Library Format"
msgstr ""

#: ../../_staging/arch/model_library_format.rst:22
msgid "About Model Library Format"
msgstr ""

#: ../../_staging/arch/model_library_format.rst:24
msgid ""
"TVM traditionally exports generated libraries as Dynamic Shared Objects "
"(e.g. DLLs (Windows) or .so (linux)). Inferences can be performed using "
"those libraries by loading them into an executable using "
"``libtvm_runtime.so``. This process is very dependent on services "
"provided by traditional OS."
msgstr ""

#: ../../_staging/arch/model_library_format.rst:28
msgid ""
"For deployment to unconventional platforms (e.g. those lacking "
"traditional OS), TVM provides another output format, Model Library "
"Format. Initially, the microTVM project is the primary use case for this "
"format. Should it become useful in other use cases (and in particular, "
"should it become possible to export BYOC artifacts in Model Library "
"Format), it could be used as a general-purpose TVM export format.  Model "
"Library Format is a tarball containing a file for each piece of the TVM "
"compiler output."
msgstr ""

#: ../../_staging/arch/model_library_format.rst:36
msgid "What can be Exported?"
msgstr ""

#: ../../_staging/arch/model_library_format.rst:38
msgid ""
"At the time of writing, export is limited to full models built with "
"``tvm.relay.build``."
msgstr ""

#: ../../_staging/arch/model_library_format.rst:41
msgid "Directory Layout"
msgstr ""

#: ../../_staging/arch/model_library_format.rst:43
msgid ""
"Model Library Format is contained within a tarball. All paths are "
"relative to the root of the tarball:"
msgstr ""

#: ../../_staging/arch/model_library_format.rst:46
msgid "``/`` - Root of the tarball"
msgstr ""

#: ../../_staging/arch/model_library_format.rst:48
msgid "``codegen`` - Root directory for all generated device code"
msgstr ""

#: ../../_staging/arch/model_library_format.rst:50
msgid "(see `codegen`_ section)"
msgstr ""

#: ../../_staging/arch/model_library_format.rst:52
msgid ""
"``executor-config/`` - Configuration for the executor which drives model "
"inference"
msgstr ""

#: ../../_staging/arch/model_library_format.rst:54
msgid "``graph/`` - Root directory containing configuration for the GraphExecutor"
msgstr ""

#: ../../_staging/arch/model_library_format.rst:56
msgid "``graph.json`` - GraphExecutor JSON configuration"
msgstr ""

#: ../../_staging/arch/model_library_format.rst:58
msgid "``metadata.json`` - Machine-parseable metadata for this model"
msgstr ""

#: ../../_staging/arch/model_library_format.rst:60
msgid "``parameters/`` - Root directory where simplified parameters are placed"
msgstr ""

#: ../../_staging/arch/model_library_format.rst:62
msgid ""
"``<model_name>.params`` - Parameters for the model tvm.relay._save_params"
" format"
msgstr ""

#: ../../_staging/arch/model_library_format.rst:64
msgid "``src/`` - Root directory for all source code consumed by TVM"
msgstr ""

#: ../../_staging/arch/model_library_format.rst:66
msgid "``relay.txt`` - Relay source code for the generated model"
msgstr ""

#: ../../_staging/arch/model_library_format.rst:69
msgid "Description of Sub-directories"
msgstr ""

#: ../../_staging/arch/model_library_format.rst:74
msgid "``codegen``"
msgstr ""

#: ../../_staging/arch/model_library_format.rst:76
msgid ""
"All TVM-generated code is placed in this directory. At the time of "
"writing, there is 1 file per Module in the generated Module tree, though "
"this restriction may change in the future. Files in this directory should"
" have filenames of the form "
"``<target>/(lib|src)/<unique_name>.<format>``."
msgstr ""

#: ../../_staging/arch/model_library_format.rst:80
msgid "These components are described below:"
msgstr ""

#: ../../_staging/arch/model_library_format.rst:82
msgid ""
"``<target>`` - Identifies the TVM target on which the code should run. "
"Currently, only ``host`` is supported."
msgstr ""

#: ../../_staging/arch/model_library_format.rst:84
msgid ""
"``<unique_name>`` - A unique slug identifying this file. Currently "
"``lib<n>``, with ``<n>>`` an auto-incrementing integer."
msgstr ""

#: ../../_staging/arch/model_library_format.rst:86
msgid ""
"``<format>`` - Suffix identifying the filename format. Currently ``c`` or"
" ``o``."
msgstr ""

#: ../../_staging/arch/model_library_format.rst:88
msgid "An example directory tree for a CPU-only model is shown below:"
msgstr ""

#: ../../_staging/arch/model_library_format.rst:90
msgid "``codegen/`` - Codegen directory"
msgstr ""

#: ../../_staging/arch/model_library_format.rst:92
msgid "``host/`` - Generated code for ``target_host``"
msgstr ""

#: ../../_staging/arch/model_library_format.rst:94
msgid "``lib/`` - Generated binary object files"
msgstr ""

#: ../../_staging/arch/model_library_format.rst:96
msgid "``lib0.o`` - LLVM module (if ``llvm`` target is used)"
msgstr ""

#: ../../_staging/arch/model_library_format.rst:97
msgid "``lib1.o`` - LLVM CRT Metadata Module (if ``llvm`` target is used)"
msgstr ""

#: ../../_staging/arch/model_library_format.rst:99
msgid "``src/`` - Generated C source"
msgstr ""

#: ../../_staging/arch/model_library_format.rst:101
msgid "``lib0.c`` - C module (if ``c`` target is used)"
msgstr ""

#: ../../_staging/arch/model_library_format.rst:102
msgid "``lib1.c`` - C CRT Metadata module (if ``c`` target is used)"
msgstr ""

#: ../../_staging/arch/model_library_format.rst:105
msgid "``executor-config``"
msgstr ""

#: ../../_staging/arch/model_library_format.rst:107
msgid ""
"Contains machine-parsable configuration for executors which can drive "
"model inference. Currently, only the GraphExecutor produces configuration"
" for this directory, in ``graph/graph.json``. This file should be read in"
" and the resulting string supplied to the ``GraphExecutor()`` constructor"
" for parsing."
msgstr ""

#: ../../_staging/arch/model_library_format.rst:113
msgid "``parameters``"
msgstr ""

#: ../../_staging/arch/model_library_format.rst:115
msgid ""
"Contains machine-parseable parameters. A variety of formats may be "
"provided, but at present, only the format produced by "
"``tvm.relay._save_params`` is supplied. When building with "
"``tvm.relay.build``,  the ``name`` parameter is considered to be the "
"model name. A single file is created in this directory "
"``<model_name>.json``."
msgstr ""

#: ../../_staging/arch/model_library_format.rst:121
msgid "``src``"
msgstr ""

#: ../../_staging/arch/model_library_format.rst:123
msgid ""
"Contains source code parsed by TVM. Currently, just the Relay source code"
" is created in ``src/relay.txt``."
msgstr ""

#: ../../_staging/arch/model_library_format.rst:127
msgid "Metadata"
msgstr ""

#: ../../_staging/arch/model_library_format.rst:129
msgid ""
"Machine-parseable metadata is placed in a file ``metadata.json`` at the "
"root of the tarball. Metadata is a dictionary with these keys:"
msgstr ""

#: ../../_staging/arch/model_library_format.rst:132
#, python-format
msgid ""
"``export_datetime``: Timestamp when this Model Library Format was "
"generated, in `strftime <https://docs.python.org/3/library/datetime.html"
"#strftime-strptime-behavior>`_ format ``\"%Y-%M-%d %H:%M:%SZ\",``."
msgstr ""

#: ../../_staging/arch/model_library_format.rst:135
msgid ""
"``memory``: A summary of the memory usage of each generated function. "
"Documented in `Memory Usage Summary`_."
msgstr ""

#: ../../_staging/arch/model_library_format.rst:137
msgid ""
"``model_name``: The name of this model (e.g. the ``name`` parameter "
"supplied to ``tvm.relay.build``)."
msgstr ""

#: ../../_staging/arch/model_library_format.rst:139
msgid ""
"``executors``: A list of executors supported by this model. Currently, "
"this list is always ``[\"graph\"]``."
msgstr ""

#: ../../_staging/arch/model_library_format.rst:141
msgid ""
"``target``: A dictionary mapping ``device_type`` (the underlying integer,"
" as a string) to the sub-target which describes that relay backend used "
"for that ``device_type``."
msgstr ""

#: ../../_staging/arch/model_library_format.rst:143
msgid ""
"``version``: A numeric version number that identifies the format used in "
"this Model Library Format. This number is incremented when the metadata "
"structure or on-disk structure changes. This document reflects version "
"``5``."
msgstr ""

#: ../../_staging/arch/model_library_format.rst:148
msgid "Memory Usage Summary"
msgstr ""

#: ../../_staging/arch/model_library_format.rst:150
msgid "A dictionary with these sub-keys:"
msgstr ""

#: ../../_staging/arch/model_library_format.rst:152
msgid ""
"``\"main\"``: ``list[MainFunctionWorkspaceUsage]``. A list summarizing "
"memory usage for each workspace used by the main function and all sub-"
"functions invoked."
msgstr ""

#: ../../_staging/arch/model_library_format.rst:154
msgid ""
"``\"operator_functions\"``: ``map[string, "
"list[FunctionWorkspaceUsage]]``. Maps operator function name to a list "
"summarizing memory usage for each workpace used by the function."
msgstr ""

#: ../../_staging/arch/model_library_format.rst:157
msgid "A ``MainFunctionWorkspaceUsage`` is a dict with these keys:"
msgstr ""

#: ../../_staging/arch/model_library_format.rst:159
#: ../../_staging/arch/model_library_format.rst:168
msgid ""
"``\"device\"``: ``int``. The ``device_type`` associated with this "
"workspace."
msgstr ""

#: ../../_staging/arch/model_library_format.rst:160
msgid ""
"``\"workspace_size_bytes\"``: ``int``. Number of bytes needed in this "
"workspace by this function and all sub-functions invoked."
msgstr ""

#: ../../_staging/arch/model_library_format.rst:162
msgid ""
"``\"constants_size_bytes\"``: ``int``. Size of the constants used by the "
"main function."
msgstr ""

#: ../../_staging/arch/model_library_format.rst:163
msgid ""
"``\"io_size_bytes\"``: ``int``. Sum of the sizes of the buffers used from"
" this workspace by this function and sub-functions."
msgstr ""

#: ../../_staging/arch/model_library_format.rst:166
msgid "A ``FunctionWorkspaceUsage`` is a dict with these keys:"
msgstr ""

#: ../../_staging/arch/model_library_format.rst:169
msgid ""
"``\"workspace_size_bytes\"``: ``int``. Number of bytes needed in this "
"workspace by this function."
msgstr ""

