# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020 - 2021, Apache Software Foundation
# This file is distributed under the same license as the tvm package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: tvm 0.8.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-02-06 10:20+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../_staging/reference/api/python/rpc.rst:19
msgid "tvm.rpc"
msgstr ""

#: of tvm.rpc:1
msgid "Lightweight TVM RPC module."
msgstr ""

#: of tvm.rpc:3
msgid ""
"RPC enables connect to a remote server, upload and launch functions. This"
" is useful to for cross-compile and remote testing, The compiler stack "
"runs on local server, while we use RPC server to run on remote runtime "
"which don't have a compiler available."
msgstr ""

#: of tvm.rpc:8
msgid ""
"The test program compiles the program on local server, upload and run "
"remote RPC server, get the result back to verify correctness."
msgstr ""

#: of tvm.rpc:1
msgid "**Classes:**"
msgstr ""

#: of tvm.rpc:1:<autosummary>:1
msgid ""
":py:obj:`Server <tvm.rpc.Server>`\\ \\(\\[host\\, port\\, port\\_end\\, "
"is\\_proxy\\, ...\\]\\)"
msgstr ""

#: of tvm.rpc.server.Server:1 tvm.rpc:1:<autosummary>:1
msgid "Start RPC server on a separate process."
msgstr ""

#: of tvm.rpc:1:<autosummary>:1
msgid ":py:obj:`RPCSession <tvm.rpc.RPCSession>`\\ \\(sess\\)"
msgstr ""

#: of tvm.rpc.client.RPCSession:1 tvm.rpc:1:<autosummary>:1
msgid "RPC Client session module"
msgstr ""

#: of tvm.rpc:1:<autosummary>:1
msgid ":py:obj:`LocalSession <tvm.rpc.LocalSession>`\\ \\(\\)"
msgstr ""

#: of tvm.rpc.client.LocalSession:1 tvm.rpc:1:<autosummary>:1
msgid "RPCSession interface backed by local environment."
msgstr ""

#: of tvm.rpc:1:<autosummary>:1
msgid ":py:obj:`PopenSession <tvm.rpc.PopenSession>`\\ \\(binary\\)"
msgstr ""

#: of tvm.rpc.client.PopenSession:1 tvm.rpc:1:<autosummary>:1
msgid "RPCSession interface backed by popen."
msgstr ""

#: of tvm.rpc:1:<autosummary>:1
msgid ":py:obj:`TrackerSession <tvm.rpc.TrackerSession>`\\ \\(addr\\)"
msgstr ""

#: of tvm.rpc.client.TrackerSession:1 tvm.rpc:1:<autosummary>:1
msgid "Tracker client session."
msgstr ""

#: of tvm.rpc:1
msgid "**Functions:**"
msgstr ""

#: of tvm.rpc.server.Server:1:<autosummary>:1
msgid ""
":py:obj:`connect <tvm.rpc.connect>`\\ \\(url\\, port\\[\\, key\\, "
"session\\_timeout\\, ...\\]\\)"
msgstr ""

#: of tvm.rpc.client.connect:1 tvm.rpc.server.Server:1:<autosummary>:1
msgid "Connect to RPC Server"
msgstr ""

#: of tvm.rpc.server.Server:1:<autosummary>:1
msgid ":py:obj:`connect_tracker <tvm.rpc.connect_tracker>`\\ \\(url\\, port\\)"
msgstr ""

#: of tvm.rpc.client.connect_tracker:1 tvm.rpc.server.Server:1:<autosummary>:1
msgid "Connect to a RPC tracker"
msgstr ""

#: of tvm.rpc.server.Server:1:<autosummary>:1
msgid ""
":py:obj:`with_minrpc <tvm.rpc.with_minrpc>`\\ \\(compile\\_func\\[\\, "
"server\\, runtime\\]\\)"
msgstr ""

#: of tvm.rpc.minrpc.with_minrpc:1 tvm.rpc.server.Server:1:<autosummary>:1
msgid "Attach the compiler function with minrpc related options."
msgstr ""

#: of tvm.rpc.server.Server:3
msgid ""
"This is a simple python implementation based on multi-processing. It is "
"also possible to implement a similar C based server with TVM runtime "
"which does not depend on the python."
msgstr ""

#: of tvm.rpc.client.PopenSession tvm.rpc.client.RPCSession.device
#: tvm.rpc.client.RPCSession.download
#: tvm.rpc.client.RPCSession.download_linked_module
#: tvm.rpc.client.RPCSession.get_function tvm.rpc.client.RPCSession.load_module
#: tvm.rpc.client.RPCSession.remove tvm.rpc.client.RPCSession.upload
#: tvm.rpc.client.TrackerSession tvm.rpc.client.TrackerSession.request
#: tvm.rpc.client.TrackerSession.request_and_run tvm.rpc.client.connect
#: tvm.rpc.client.connect_tracker tvm.rpc.minrpc.with_minrpc
#: tvm.rpc.server.Server
msgid "Parameters"
msgstr ""

#: of tvm.rpc.server.Server:7
msgid "The host url of the server."
msgstr ""

#: of tvm.rpc.server.Server:9
msgid "The port to be bind to"
msgstr ""

#: of tvm.rpc.server.Server:11
msgid "The end port to search"
msgstr ""

#: of tvm.rpc.server.Server:13
msgid ""
"Whether the address specified is a proxy. If this is true, the host and "
"port actually corresponds to the address of the proxy server."
msgstr ""

#: of tvm.rpc.server.Server:17
msgid ""
"The address of RPC Tracker in tuple(host, ip) format. If is not None, the"
" server will register itself to the tracker."
msgstr ""

#: of tvm.rpc.server.Server:20
msgid "The key used to identify the device type in tracker."
msgstr ""

#: of tvm.rpc.server.Server:22
msgid "List of additional libraries to be loaded during execution."
msgstr ""

#: of tvm.rpc.server.Server:24
msgid "Custom IP Address to Report to RPC Tracker"
msgstr ""

#: of tvm.rpc.server.Server:26
msgid "Whether run this server in silent mode."
msgstr ""

#: of tvm.rpc.server.Server:28
msgid "Whether forbid fork in multiprocessing."
msgstr ""

#: of tvm.rpc.server.Server:30
msgid "Additional initialization function when starting the server."
msgstr ""

#: of tvm.rpc.server.Server:35
msgid ""
"The RPC server only sees functions in the tvm namespace. To bring "
"additional custom functions to the server env, you can use "
"server_init_callback."
msgstr ""

#: of tvm.rpc.client.RPCSession:1 tvm.rpc.client.TrackerSession:1
#: tvm.rpc.server.Server:1
msgid "**Methods:**"
msgstr ""

#: of tvm.rpc.server.Server.terminate:1:<autosummary>:1
msgid ":py:obj:`terminate <tvm.rpc.Server.terminate>`\\ \\(\\)"
msgstr ""

#: of tvm.rpc.server.Server.terminate:1
#: tvm.rpc.server.Server.terminate:1:<autosummary>:1
msgid "Terminate the server process"
msgstr ""

#: of tvm.rpc.client.connect:3 tvm.rpc.client.connect_tracker:3
msgid "The url of the host"
msgstr ""

#: of tvm.rpc.client.connect:5 tvm.rpc.client.connect_tracker:5
msgid "The port to connect to"
msgstr ""

#: of tvm.rpc.client.connect:7
msgid "Additional key to match server"
msgstr ""

#: of tvm.rpc.client.connect:9
msgid ""
"The duration of the session in seconds, allows server to kill the "
"connection when duration is longer than this value. When duration is "
"zero, it means the request must always be kept alive."
msgstr ""

#: of tvm.rpc.client.TrackerSession.request:13 tvm.rpc.client.connect:13
msgid ""
"List of additional arguments to passed as the remote session constructor."
" The first element of the list is always a string specifying the name of "
"the session constructor, the following args are the positional args to "
"that function."
msgstr ""

#: of tvm.rpc.client.RPCSession.device tvm.rpc.client.RPCSession.download
#: tvm.rpc.client.RPCSession.download_linked_module
#: tvm.rpc.client.RPCSession.get_function tvm.rpc.client.RPCSession.load_module
#: tvm.rpc.client.RPCSession.system_lib tvm.rpc.client.connect
#: tvm.rpc.client.connect_tracker tvm.rpc.minrpc.with_minrpc
msgid "Returns"
msgstr ""

#: of tvm.rpc.client.connect:18
msgid "**sess** -- The connected session."
msgstr ""

#: of tvm.rpc.client.RPCSession.device tvm.rpc.client.RPCSession.download
#: tvm.rpc.client.RPCSession.download_linked_module
#: tvm.rpc.client.RPCSession.get_function tvm.rpc.client.RPCSession.load_module
#: tvm.rpc.client.RPCSession.system_lib tvm.rpc.client.connect
#: tvm.rpc.client.connect_tracker tvm.rpc.minrpc.with_minrpc
msgid "Return type"
msgstr ""

#: of tvm.rpc.client.RPCSession.download_linked_module:15
#: tvm.rpc.client.connect:22
msgid "Examples"
msgstr ""

#: of tvm.rpc.client.connect:23
msgid "Normal usage .. code-block:: python"
msgstr ""

#: of tvm.rpc.client.connect:26
msgid "client = rpc.connect(server_url, server_port, server_key)"
msgstr ""

#: of tvm.rpc.client.connect:28
msgid ""
"Session_constructor can be used to customize the session in the remote "
"The following code connects to a remote internal server via a proxy by "
"constructing another RPCClientSession on the proxy machine and use that "
"as the serving session of the proxy endpoint."
msgstr ""

#: of tvm.rpc.client.connect_tracker:8
msgid "**sess** -- The connected tracker session."
msgstr ""

#: of tvm.rpc.client.RPCSession:3
msgid "Do not directly create the obhect, call connect"
msgstr ""

#: of tvm.rpc.client.RPCSession.system_lib:1:<autosummary>:1
msgid ":py:obj:`system_lib <tvm.rpc.RPCSession.system_lib>`\\ \\(\\)"
msgstr ""

#: of tvm.rpc.client.RPCSession.system_lib:1
#: tvm.rpc.client.RPCSession.system_lib:1:<autosummary>:1
msgid "Get system-wide library module."
msgstr ""

#: of tvm.rpc.client.RPCSession.system_lib:1:<autosummary>:1
msgid ":py:obj:`get_function <tvm.rpc.RPCSession.get_function>`\\ \\(name\\)"
msgstr ""

#: of tvm.rpc.client.RPCSession.get_function:1
#: tvm.rpc.client.RPCSession.system_lib:1:<autosummary>:1
msgid "Get function from the session."
msgstr ""

#: of tvm.rpc.client.RPCSession.system_lib:1:<autosummary>:1
msgid ""
":py:obj:`device <tvm.rpc.RPCSession.device>`\\ \\(dev\\_type\\[\\, "
"dev\\_id\\]\\)"
msgstr ""

#: of tvm.rpc.client.RPCSession.device:1
#: tvm.rpc.client.RPCSession.system_lib:1:<autosummary>:1
msgid "Construct a remote device."
msgstr ""

#: of tvm.rpc.client.RPCSession.system_lib:1:<autosummary>:1
msgid ":py:obj:`upload <tvm.rpc.RPCSession.upload>`\\ \\(data\\[\\, target\\]\\)"
msgstr ""

#: of tvm.rpc.client.RPCSession.system_lib:1:<autosummary>:1
#: tvm.rpc.client.RPCSession.upload:1
msgid "Upload file to remote runtime temp folder"
msgstr ""

#: of tvm.rpc.client.RPCSession.system_lib:1:<autosummary>:1
msgid ":py:obj:`download <tvm.rpc.RPCSession.download>`\\ \\(path\\)"
msgstr ""

#: of tvm.rpc.client.RPCSession.download:1
#: tvm.rpc.client.RPCSession.system_lib:1:<autosummary>:1
msgid "Download file from remote temp folder."
msgstr ""

#: of tvm.rpc.client.RPCSession.system_lib:1:<autosummary>:1
msgid ":py:obj:`remove <tvm.rpc.RPCSession.remove>`\\ \\(path\\)"
msgstr ""

#: of tvm.rpc.client.RPCSession.remove:1
#: tvm.rpc.client.RPCSession.system_lib:1:<autosummary>:1
msgid "Remove file from remote temp folder."
msgstr ""

#: of tvm.rpc.client.RPCSession.system_lib:1:<autosummary>:1
msgid ":py:obj:`load_module <tvm.rpc.RPCSession.load_module>`\\ \\(path\\)"
msgstr ""

#: of tvm.rpc.client.RPCSession.load_module:1
#: tvm.rpc.client.RPCSession.system_lib:1:<autosummary>:1
msgid "Load a remote module, the file need to be uploaded first."
msgstr ""

#: of tvm.rpc.client.RPCSession.system_lib:1:<autosummary>:1
msgid ""
":py:obj:`download_linked_module "
"<tvm.rpc.RPCSession.download_linked_module>`\\ \\(path\\)"
msgstr ""

#: of tvm.rpc.client.RPCSession.download_linked_module:1
#: tvm.rpc.client.RPCSession.system_lib:1:<autosummary>:1
msgid "Link a module in the remote and download it."
msgstr ""

#: of tvm.rpc.client.RPCSession.system_lib:1:<autosummary>:1
msgid ":py:obj:`cpu <tvm.rpc.RPCSession.cpu>`\\ \\(\\[dev\\_id\\]\\)"
msgstr ""

#: of tvm.rpc.client.RPCSession.cpu:1
#: tvm.rpc.client.RPCSession.system_lib:1:<autosummary>:1
msgid "Construct CPU device."
msgstr ""

#: of tvm.rpc.client.RPCSession.system_lib:1:<autosummary>:1
msgid ":py:obj:`cuda <tvm.rpc.RPCSession.cuda>`\\ \\(\\[dev\\_id\\]\\)"
msgstr ""

#: of tvm.rpc.client.RPCSession.cuda:1
#: tvm.rpc.client.RPCSession.system_lib:1:<autosummary>:1
msgid "Construct CUDA GPU device."
msgstr ""

#: of tvm.rpc.client.RPCSession.system_lib:1:<autosummary>:1
msgid ":py:obj:`cl <tvm.rpc.RPCSession.cl>`\\ \\(\\[dev\\_id\\]\\)"
msgstr ""

#: of tvm.rpc.client.RPCSession.cl:1
#: tvm.rpc.client.RPCSession.system_lib:1:<autosummary>:1
msgid "Construct OpenCL device."
msgstr ""

#: of tvm.rpc.client.RPCSession.system_lib:1:<autosummary>:1
msgid ":py:obj:`vulkan <tvm.rpc.RPCSession.vulkan>`\\ \\(\\[dev\\_id\\]\\)"
msgstr ""

#: of tvm.rpc.client.RPCSession.system_lib:1:<autosummary>:1
#: tvm.rpc.client.RPCSession.vulkan:1
msgid "Construct Vulkan device."
msgstr ""

#: of tvm.rpc.client.RPCSession.system_lib:1:<autosummary>:1
msgid ":py:obj:`metal <tvm.rpc.RPCSession.metal>`\\ \\(\\[dev\\_id\\]\\)"
msgstr ""

#: of tvm.rpc.client.RPCSession.metal:1
#: tvm.rpc.client.RPCSession.system_lib:1:<autosummary>:1
msgid "Construct Metal device."
msgstr ""

#: of tvm.rpc.client.RPCSession.system_lib:1:<autosummary>:1
msgid ":py:obj:`rocm <tvm.rpc.RPCSession.rocm>`\\ \\(\\[dev\\_id\\]\\)"
msgstr ""

#: of tvm.rpc.client.RPCSession.rocm:1
#: tvm.rpc.client.RPCSession.system_lib:1:<autosummary>:1
msgid "Construct ROCm device."
msgstr ""

#: of tvm.rpc.client.RPCSession.system_lib:1:<autosummary>:1
msgid ":py:obj:`ext_dev <tvm.rpc.RPCSession.ext_dev>`\\ \\(\\[dev\\_id\\]\\)"
msgstr ""

#: of tvm.rpc.client.RPCSession.ext_dev:1
#: tvm.rpc.client.RPCSession.system_lib:1:<autosummary>:1
msgid "Construct extension device."
msgstr ""

#: of tvm.rpc.client.RPCSession.system_lib:1:<autosummary>:1
msgid ":py:obj:`hexagon <tvm.rpc.RPCSession.hexagon>`\\ \\(\\[dev\\_id\\]\\)"
msgstr ""

#: of tvm.rpc.client.RPCSession.hexagon:1
#: tvm.rpc.client.RPCSession.system_lib:1:<autosummary>:1
msgid "Construct Hexagon device."
msgstr ""

#: of tvm.rpc.client.RPCSession.system_lib:1:<autosummary>:1
msgid ":py:obj:`webgpu <tvm.rpc.RPCSession.webgpu>`\\ \\(\\[dev\\_id\\]\\)"
msgstr ""

#: of tvm.rpc.client.RPCSession.system_lib:1:<autosummary>:1
#: tvm.rpc.client.RPCSession.webgpu:1
msgid "Construct WebGPU device."
msgstr ""

#: of tvm.rpc.client.RPCSession.system_lib:3
msgid "**module** -- The system-wide library module."
msgstr ""

#: of tvm.rpc.client.RPCSession.system_lib:6
msgid ":obj:`tvm.runtime.system_lib`"
msgstr ""

#: of tvm.rpc.client.RPCSession.get_function:3
msgid "The name of the function"
msgstr ""

#: of tvm.rpc.client.RPCSession.get_function:6
msgid "**f** -- The result function."
msgstr ""

#: of tvm.rpc.client.RPCSession.device:8
msgid "**dev** -- The corresponding encoded remote device."
msgstr ""

#: of tvm.rpc.client.RPCSession.upload:3
msgid "The file name or binary in local to upload."
msgstr ""

#: of tvm.rpc.client.RPCSession.upload:5
msgid "The path in remote"
msgstr ""

#: of tvm.rpc.client.RPCSession.download:3
#: tvm.rpc.client.RPCSession.download_linked_module:3
#: tvm.rpc.client.RPCSession.load_module:3 tvm.rpc.client.RPCSession.remove:3
msgid "The relative location to remote temp folder."
msgstr ""

#: of tvm.rpc.client.RPCSession.download:6
#: tvm.rpc.client.RPCSession.download_linked_module:6
msgid "**blob** -- The result blob from the file."
msgstr ""

#: of tvm.rpc.client.RPCSession.load_module:6
msgid "**m** -- The remote module containing remote function."
msgstr ""

#: of tvm.rpc.client.RPCSession.download_linked_module:11
msgid ""
"This function can be helpful when a linker is not available on the local "
"client."
msgstr ""

#: of tvm.rpc.client.LocalSession:3
msgid ""
"This class can be used to implement functions that need to be ran both "
"locally and remotely."
msgstr ""

#: of tvm.rpc.client.PopenSession:3
msgid "The binary to be executed."
msgstr ""

#: of tvm.rpc.client.TrackerSession:3
msgid "The address tuple"
msgstr ""

#: of tvm.rpc.client.TrackerSession.close:1:<autosummary>:1
msgid ":py:obj:`close <tvm.rpc.TrackerSession.close>`\\ \\(\\)"
msgstr ""

#: of tvm.rpc.client.TrackerSession.close:1
#: tvm.rpc.client.TrackerSession.close:1:<autosummary>:1
msgid "Close the tracker connection."
msgstr ""

#: of tvm.rpc.client.TrackerSession.close:1:<autosummary>:1
msgid ":py:obj:`summary <tvm.rpc.TrackerSession.summary>`\\ \\(\\)"
msgstr ""

#: of tvm.rpc.client.TrackerSession.close:1:<autosummary>:1
#: tvm.rpc.client.TrackerSession.summary:1
msgid "Get the summary dict of the tracker."
msgstr ""

#: of tvm.rpc.client.TrackerSession.close:1:<autosummary>:1
msgid ":py:obj:`text_summary <tvm.rpc.TrackerSession.text_summary>`\\ \\(\\)"
msgstr ""

#: of tvm.rpc.client.TrackerSession.close:1:<autosummary>:1
#: tvm.rpc.client.TrackerSession.text_summary:1
msgid "Get a text summary of the tracker."
msgstr ""

#: of tvm.rpc.client.TrackerSession.close:1:<autosummary>:1
msgid ""
":py:obj:`request <tvm.rpc.TrackerSession.request>`\\ \\(key\\[\\, "
"priority\\, session\\_timeout\\, ...\\]\\)"
msgstr ""

#: of tvm.rpc.client.TrackerSession.close:1:<autosummary>:1
#: tvm.rpc.client.TrackerSession.request:1
msgid "Request a new connection from the tracker."
msgstr ""

#: of tvm.rpc.client.TrackerSession.close:1:<autosummary>:1
msgid ""
":py:obj:`request_and_run <tvm.rpc.TrackerSession.request_and_run>`\\ "
"\\(key\\, func\\[\\, priority\\, ...\\]\\)"
msgstr ""

#: of tvm.rpc.client.TrackerSession.close:1:<autosummary>:1
#: tvm.rpc.client.TrackerSession.request_and_run:1
msgid "Request a resource from tracker and run the func."
msgstr ""

#: of tvm.rpc.client.TrackerSession.request:3
#: tvm.rpc.client.TrackerSession.request_and_run:6
msgid "The type key of the device."
msgstr ""

#: of tvm.rpc.client.TrackerSession.request:5
#: tvm.rpc.client.TrackerSession.request_and_run:10
msgid "The priority of the request."
msgstr ""

#: of tvm.rpc.client.TrackerSession.request:7
#: tvm.rpc.client.TrackerSession.request_and_run:12
msgid ""
"The duration of the session, allows server to kill the connection when "
"duration is longer than this value. When duration is zero, it means the "
"request must always be kept alive."
msgstr ""

#: of tvm.rpc.client.TrackerSession.request:11
msgid "Maximum number of times to retry before give up."
msgstr ""

#: of tvm.rpc.client.TrackerSession.request_and_run:3
msgid ""
"This function safe-guard rare server node dropout during execution. In "
"such case, a new resource will be requested and func will be ran again."
msgstr ""

#: of tvm.rpc.client.TrackerSession.request_and_run:8
msgid "A stateless function"
msgstr ""

#: of tvm.rpc.client.TrackerSession.request_and_run:16
msgid "Maximum number of times to retry the function before give up."
msgstr ""

#: of tvm.rpc.minrpc.with_minrpc:3
msgid "The compilation function to decorate."
msgstr ""

#: of tvm.rpc.minrpc.with_minrpc:5
msgid "The server type."
msgstr ""

#: of tvm.rpc.minrpc.with_minrpc:7
msgid "The runtime library."
msgstr ""

#: of tvm.rpc.minrpc.with_minrpc:10
msgid "**fcompile** -- The return compilation."
msgstr ""

