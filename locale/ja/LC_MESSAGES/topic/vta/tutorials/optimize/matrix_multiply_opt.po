# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020 - 2021, Apache Software Foundation
# This file is distributed under the same license as the tvm package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: tvm 0.8.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-02-06 10:26+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../_staging/topic/vta/tutorials/optimize/matrix_multiply_opt.rst:13
msgid ""
"Click :ref:`here "
"<sphx_glr_download_topic_vta_tutorials_optimize_matrix_multiply_opt.py>` "
"to download the full example code"
msgstr ""

#: ../../_staging/topic/vta/tutorials/optimize/matrix_multiply_opt.rst:24
msgid "Matrix Multiply Blocking"
msgstr ""

#: ../../_staging/topic/vta/tutorials/optimize/matrix_multiply_opt.rst:25
msgid "**Author**: `Thierry Moreau <https://homes.cs.washington.edu/~moreau/>`_"
msgstr ""

#: ../../_staging/topic/vta/tutorials/optimize/matrix_multiply_opt.rst:27
msgid ""
"This tutorial provides an overview on how to use TVM to map matrix "
"multiplication efficiently on the VTA design. We recommend covering the "
":ref:`basic-mat-mult` tutorial first."
msgstr ""

#: ../../_staging/topic/vta/tutorials/optimize/matrix_multiply_opt.rst:31
msgid ""
"In this tutorial, we will demonstrate TVM schedule optimizations to break"
" large neural network operators down onto smaller blocks to achieve "
"computation within limited hardware accelerator resources."
msgstr ""

#: ../../_staging/topic/vta/tutorials/optimize/matrix_multiply_opt.rst:38
msgid "RPC Setup"
msgstr ""

#: ../../_staging/topic/vta/tutorials/optimize/matrix_multiply_opt.rst:39
msgid "We start by programming the Pynq's FPGA and building its RPC runtime."
msgstr ""

#: ../../_staging/topic/vta/tutorials/optimize/matrix_multiply_opt.rst:88
msgid "Computation Declaration"
msgstr ""

#: ../../_staging/topic/vta/tutorials/optimize/matrix_multiply_opt.rst:89
msgid ""
"As a first step, we need to describe our matrix multiplication "
"computation. We define the matrix multiplication as the computation one "
"would find in a fully connected layer, defined by its batch size, input "
"channels, and output channels. These have to be integer multiples of the "
"VTA tensor shape: :code:`BATCH`, :code:`BLOCK_IN`, and :code:`BLOCK_OUT` "
"respectively."
msgstr ""

#: ../../_staging/topic/vta/tutorials/optimize/matrix_multiply_opt.rst:96
msgid ""
"We've added extra operators to the matrix multiplication that apply "
"shifting and clipping to the output in order to mimic a fixed-point "
"matrix multiplication followed by a rectified linear activation. We "
"describe the TVM dataflow graph of the fully connected layer below:"
msgstr ""

#: ../../_staging/topic/vta/tutorials/optimize/matrix_multiply_opt.rst:104
msgid ""
"This computation is intentionally too large to fit onto VTA's on-chip "
"buffers all at once. Therefore in the scheduling phase we'll rely on "
"computation blocking strategies to break the computation down into "
"manageable chunks."
msgstr ""

#: ../../_staging/topic/vta/tutorials/optimize/matrix_multiply_opt.rst:171
msgid "Scheduling the Computation"
msgstr ""

#: ../../_staging/topic/vta/tutorials/optimize/matrix_multiply_opt.rst:172
msgid ""
"We'll look at a set of schedule transformations necessary to map the "
"matrix multiplications onto VTA in an efficient fashion. Those include:"
msgstr ""

#: ../../_staging/topic/vta/tutorials/optimize/matrix_multiply_opt.rst:176
msgid "Computation blocking"
msgstr ""

#: ../../_staging/topic/vta/tutorials/optimize/matrix_multiply_opt.rst:177
msgid "Lowering to VTA hardware intrinsics"
msgstr ""

#: ../../_staging/topic/vta/tutorials/optimize/matrix_multiply_opt.rst:194
msgid "Blocking the Computation"
msgstr ""

#: ../../_staging/topic/vta/tutorials/optimize/matrix_multiply_opt.rst:195
msgid ""
"The matrix multiplication is by default too large for activations or "
"weights to fit on VTA's on-chip buffers all at once. We block the (1, "
"1024) by (1024, 1024) matrix multiplication into smaller (1, 256) by "
"(256, 256) matrix multiplications so the intermediate tensors can fit on "
"the accelerator's on-chip SRAM. This approach is similar to blocking "
"techniques applied to CPUs and GPUs in order to increase cache hit rate."
msgstr ""

#: ../../_staging/topic/vta/tutorials/optimize/matrix_multiply_opt.rst:203
msgid ""
"We perform blocking along each axes (the batch axis being untouched since"
" we are performing singe-batch inference). We also leave the inner-most "
"tensorization axes as-is in order to allow TVM to pattern-match "
"tensorization. We show the outcome of blocking on the computation "
"schedule in the diagram below:"
msgstr ""

#: ../../_staging/topic/vta/tutorials/optimize/matrix_multiply_opt.rst:216
msgid ""
"The code after loop splitting and reordering is equivalent to the "
"following pseudo-code. We ignore the batch axis since we are only "
"performing single-batch inference in this example:"
msgstr ""

#: ../../_staging/topic/vta/tutorials/optimize/matrix_multiply_opt.rst:287
msgid "Lowering Copies to DMA Transfers"
msgstr ""

#: ../../_staging/topic/vta/tutorials/optimize/matrix_multiply_opt.rst:288
msgid ""
"Next we set the buffer scopes to the corresponding on-chip VTA SRAM "
"buffers. We move the load loops into the matrix multiply computation loop"
" to stage memory loads such that they fit in the on-chip SRAM buffers. "
"Finally we annotate the load/store loop outer axes with the DMA copy "
"pragma to perform bulk memory transfers on VTA."
msgstr ""

#: ../../_staging/topic/vta/tutorials/optimize/matrix_multiply_opt.rst:324
msgid "Lowering Computation to VTA Compute Intrinsics"
msgstr ""

#: ../../_staging/topic/vta/tutorials/optimize/matrix_multiply_opt.rst:325
msgid ""
"The last phase is to lower the computation loops down to VTA hardware "
"intrinsics by mapping the matrix multiplication to tensor intrinsics, and"
" mapping the shift, and clipping computation to the vector ALU."
msgstr ""

#: ../../_staging/topic/vta/tutorials/optimize/matrix_multiply_opt.rst:351
msgid "TVM Compilation and Verification"
msgstr ""

#: ../../_staging/topic/vta/tutorials/optimize/matrix_multiply_opt.rst:352
msgid ""
"After specifying the schedule, we can compile it into a TVM function. We "
"save the module so we can send it over RPC. We run the function and "
"verify it against a numpy implementation to ensure correctness."
msgstr ""

#: ../../_staging/topic/vta/tutorials/optimize/matrix_multiply_opt.rst:421
msgid "Summary"
msgstr ""

#: ../../_staging/topic/vta/tutorials/optimize/matrix_multiply_opt.rst:422
msgid ""
"This tutorial demonstrates how TVM scheduling primitives can achieve "
"computation blocking for a matrix multiplication example. This allows us "
"to map arbitrarily large computation onto limited hardware accelerator "
"resources."
msgstr ""

#: ../../_staging/topic/vta/tutorials/optimize/matrix_multiply_opt.rst:441
msgid ""
":download:`Download Python source code: matrix_multiply_opt.py "
"<matrix_multiply_opt.py>`"
msgstr ""

#: ../../_staging/topic/vta/tutorials/optimize/matrix_multiply_opt.rst:447
msgid ""
":download:`Download Jupyter notebook: matrix_multiply_opt.ipynb "
"<matrix_multiply_opt.ipynb>`"
msgstr ""

#: ../../_staging/topic/vta/tutorials/optimize/matrix_multiply_opt.rst:454
msgid "`Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_"
msgstr ""

