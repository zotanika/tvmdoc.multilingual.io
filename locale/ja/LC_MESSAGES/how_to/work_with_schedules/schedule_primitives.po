# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020 - 2021, Apache Software Foundation
# This file is distributed under the same license as the tvm package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: tvm 0.8.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-02-06 10:20+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../_staging/how_to/work_with_schedules/schedule_primitives.rst:13
msgid ""
"Click :ref:`here "
"<sphx_glr_download_how_to_work_with_schedules_schedule_primitives.py>` to"
" download the full example code"
msgstr ""

#: ../../_staging/how_to/work_with_schedules/schedule_primitives.rst:24
msgid "Schedule Primitives in TVM"
msgstr ""

#: ../../_staging/how_to/work_with_schedules/schedule_primitives.rst:25
msgid "**Author**: `Ziheng Jiang <https://github.com/ZihengJiang>`_"
msgstr ""

#: ../../_staging/how_to/work_with_schedules/schedule_primitives.rst:27
msgid "TVM is a domain specific language for efficient kernel construction."
msgstr ""

#: ../../_staging/how_to/work_with_schedules/schedule_primitives.rst:29
msgid ""
"In this tutorial, we will show you how to schedule the computation by "
"various primitives provided by TVM."
msgstr ""

#: ../../_staging/how_to/work_with_schedules/schedule_primitives.rst:51
msgid ""
"There often exist several methods to compute the same result, however, "
"different methods will result in different locality and performance. So "
"TVM asks user to provide how to execute the computation called "
"**Schedule**."
msgstr ""

#: ../../_staging/how_to/work_with_schedules/schedule_primitives.rst:56
msgid ""
"A **Schedule** is a set of transformation of computation that transforms "
"the loop of computations in the program."
msgstr ""

#: ../../_staging/how_to/work_with_schedules/schedule_primitives.rst:78
msgid ""
"A schedule can be created from a list of ops, by default the schedule "
"computes tensor in a serial manner in a row-major order."
msgstr ""

#: ../../_staging/how_to/work_with_schedules/schedule_primitives.rst:104
#: ../../_staging/how_to/work_with_schedules/schedule_primitives.rst:156
#: ../../_staging/how_to/work_with_schedules/schedule_primitives.rst:201
#: ../../_staging/how_to/work_with_schedules/schedule_primitives.rst:248
#: ../../_staging/how_to/work_with_schedules/schedule_primitives.rst:303
#: ../../_staging/how_to/work_with_schedules/schedule_primitives.rst:356
#: ../../_staging/how_to/work_with_schedules/schedule_primitives.rst:411
#: ../../_staging/how_to/work_with_schedules/schedule_primitives.rst:456
#: ../../_staging/how_to/work_with_schedules/schedule_primitives.rst:502
#: ../../_staging/how_to/work_with_schedules/schedule_primitives.rst:549
#: ../../_staging/how_to/work_with_schedules/schedule_primitives.rst:594
msgid "Out:"
msgstr ""

#: ../../_staging/how_to/work_with_schedules/schedule_primitives.rst:128
msgid ""
"One schedule is composed by multiple stages, and one **Stage** represents"
" schedule for one operation. We provide various methods to schedule every"
" stage."
msgstr ""

#: ../../_staging/how_to/work_with_schedules/schedule_primitives.rst:135
msgid "split"
msgstr ""

#: ../../_staging/how_to/work_with_schedules/schedule_primitives.rst:136
msgid ":code:`split` can split a specified axis into two axes by :code:`factor`."
msgstr ""

#: ../../_staging/how_to/work_with_schedules/schedule_primitives.rst:181
msgid ""
"You can also split a axis by :code:`nparts`, which splits the axis "
"contrary with :code:`factor`."
msgstr ""

#: ../../_staging/how_to/work_with_schedules/schedule_primitives.rst:227
msgid "tile"
msgstr ""

#: ../../_staging/how_to/work_with_schedules/schedule_primitives.rst:228
msgid ":code:`tile` help you execute the computation tile by tile over two axes."
msgstr ""

#: ../../_staging/how_to/work_with_schedules/schedule_primitives.rst:280
msgid "fuse"
msgstr ""

#: ../../_staging/how_to/work_with_schedules/schedule_primitives.rst:281
msgid ":code:`fuse` can fuse two consecutive axes of one computation."
msgstr ""

#: ../../_staging/how_to/work_with_schedules/schedule_primitives.rst:333
msgid "reorder"
msgstr ""

#: ../../_staging/how_to/work_with_schedules/schedule_primitives.rst:334
msgid ":code:`reorder` can reorder the axes in the specified order."
msgstr ""

#: ../../_staging/how_to/work_with_schedules/schedule_primitives.rst:388
msgid "bind"
msgstr ""

#: ../../_staging/how_to/work_with_schedules/schedule_primitives.rst:389
msgid ""
":code:`bind` can bind a specified axis with a thread axis, often used in "
"gpu programming."
msgstr ""

#: ../../_staging/how_to/work_with_schedules/schedule_primitives.rst:435
msgid "compute_at"
msgstr ""

#: ../../_staging/how_to/work_with_schedules/schedule_primitives.rst:436
msgid ""
"For a schedule that consists of multiple operators, TVM will compute "
"tensors at the root separately by default."
msgstr ""

#: ../../_staging/how_to/work_with_schedules/schedule_primitives.rst:481
msgid ""
":code:`compute_at` can move computation of `B` into the first axis of "
"computation of `C`."
msgstr ""

#: ../../_staging/how_to/work_with_schedules/schedule_primitives.rst:526
msgid "compute_inline"
msgstr ""

#: ../../_staging/how_to/work_with_schedules/schedule_primitives.rst:527
msgid ""
":code:`compute_inline` can mark one stage as inline, then the body of "
"computation will be expanded and inserted at the address where the tensor"
" is required."
msgstr ""

#: ../../_staging/how_to/work_with_schedules/schedule_primitives.rst:572
msgid "compute_root"
msgstr ""

#: ../../_staging/how_to/work_with_schedules/schedule_primitives.rst:573
msgid ":code:`compute_root` can move computation of one stage to the root."
msgstr ""

#: ../../_staging/how_to/work_with_schedules/schedule_primitives.rst:620
msgid "Summary"
msgstr ""

#: ../../_staging/how_to/work_with_schedules/schedule_primitives.rst:621
msgid ""
"This tutorial provides an introduction to schedule primitives in tvm, "
"which permits users schedule the computation easily and flexibly."
msgstr ""

#: ../../_staging/how_to/work_with_schedules/schedule_primitives.rst:625
msgid ""
"In order to get a good performance kernel implementation, the general "
"workflow often is:"
msgstr ""

#: ../../_staging/how_to/work_with_schedules/schedule_primitives.rst:628
msgid "Describe your computation via series of operations."
msgstr ""

#: ../../_staging/how_to/work_with_schedules/schedule_primitives.rst:629
msgid "Try to schedule the computation with primitives."
msgstr ""

#: ../../_staging/how_to/work_with_schedules/schedule_primitives.rst:630
msgid "Compile and run to see the performance difference."
msgstr ""

#: ../../_staging/how_to/work_with_schedules/schedule_primitives.rst:631
msgid "Adjust your schedule according the running result."
msgstr ""

#: ../../_staging/how_to/work_with_schedules/schedule_primitives.rst:646
msgid ""
":download:`Download Python source code: schedule_primitives.py "
"<schedule_primitives.py>`"
msgstr ""

#: ../../_staging/how_to/work_with_schedules/schedule_primitives.rst:652
msgid ""
":download:`Download Jupyter notebook: schedule_primitives.ipynb "
"<schedule_primitives.ipynb>`"
msgstr ""

#: ../../_staging/how_to/work_with_schedules/schedule_primitives.rst:659
msgid "`Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_"
msgstr ""

